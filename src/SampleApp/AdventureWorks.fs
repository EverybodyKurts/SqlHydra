// This code was generated by SqlHydra.SqlServer.
namespace SampleApp.AdventureWorks

type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getter o)

type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])

module SalesLT =
    [<CLIMutable>]
    type Address =
        { City: string
          StateProvince: string
          CountryRegion: string
          PostalCode: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          AddressID: int
          AddressLine1: string
          AddressLine2: Option<string> }

    type AddressReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.City = RequiredColumn(reader, getOrdinal, reader.GetString, "City")
        member __.StateProvince = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvince")
        member __.CountryRegion = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegion")
        member __.PostalCode = RequiredColumn(reader, getOrdinal, reader.GetString, "PostalCode")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.AddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressID")
        member __.AddressLine1 = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressLine1")
        member __.AddressLine2 = OptionalColumn(reader, getOrdinal, reader.GetString, "AddressLine2")
        member __.Read() =
            { City = __.City.Read()
              StateProvince = __.StateProvince.Read()
              CountryRegion = __.CountryRegion.Read()
              PostalCode = __.PostalCode.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              AddressID = __.AddressID.Read()
              AddressLine1 = __.AddressLine1.Read()
              AddressLine2 = __.AddressLine2.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then
                None
            else
                Some(__.Read())

    [<CLIMutable>]
    type Customer =
        { LastName: string
          PasswordHash: string
          PasswordSalt: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          CustomerID: int
          NameStyle: bool
          FirstName: string
          MiddleName: Option<string>
          Title: Option<string>
          Suffix: Option<string>
          CompanyName: Option<string>
          SalesPerson: Option<string>
          EmailAddress: Option<string>
          Phone: Option<string> }

    type CustomerReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.PasswordHash = RequiredColumn(reader, getOrdinal, reader.GetString, "PasswordHash")
        member __.PasswordSalt = RequiredColumn(reader, getOrdinal, reader.GetString, "PasswordSalt")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.CustomerID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CustomerID")
        member __.NameStyle = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "NameStyle")
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.Title = OptionalColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.Suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "Suffix")
        member __.CompanyName = OptionalColumn(reader, getOrdinal, reader.GetString, "CompanyName")
        member __.SalesPerson = OptionalColumn(reader, getOrdinal, reader.GetString, "SalesPerson")
        member __.EmailAddress = OptionalColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
        member __.Phone = OptionalColumn(reader, getOrdinal, reader.GetString, "Phone")
        member __.Read() =
            { LastName = __.LastName.Read()
              PasswordHash = __.PasswordHash.Read()
              PasswordSalt = __.PasswordSalt.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              CustomerID = __.CustomerID.Read()
              NameStyle = __.NameStyle.Read()
              FirstName = __.FirstName.Read()
              MiddleName = __.MiddleName.Read()
              Title = __.Title.Read()
              Suffix = __.Suffix.Read()
              CompanyName = __.CompanyName.Read()
              SalesPerson = __.SalesPerson.Read()
              EmailAddress = __.EmailAddress.Read()
              Phone = __.Phone.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then
                None
            else
                Some(__.Read())

    [<CLIMutable>]
    type Product =
        { ProductID: int
          Name: string
          ProductNumber: string
          StandardCost: decimal
          ListPrice: decimal
          SellStartDate: System.DateTime
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          SellEndDate: Option<System.DateTime>
          DiscontinuedDate: Option<System.DateTime>
          ThumbNailPhoto: Option<byte []>
          ThumbnailPhotoFileName: Option<string>
          Size: Option<string>
          Weight: Option<decimal>
          ProductCategoryID: Option<int>
          ProductModelID: Option<int>
          Color: Option<string> }

    type ProductReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ProductNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "ProductNumber")
        member __.StandardCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StandardCost")
        member __.ListPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ListPrice")
        member __.SellStartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "SellStartDate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.SellEndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SellEndDate")
        member __.DiscontinuedDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DiscontinuedDate")
        member __.ThumbNailPhoto = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "ThumbNailPhoto")
        member __.ThumbnailPhotoFileName = OptionalColumn(reader, getOrdinal, reader.GetString, "ThumbnailPhotoFileName")
        member __.Size = OptionalColumn(reader, getOrdinal, reader.GetString, "Size")
        member __.Weight = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "Weight")
        member __.ProductCategoryID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ProductCategoryID")
        member __.ProductModelID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.Color = OptionalColumn(reader, getOrdinal, reader.GetString, "Color")
        member __.Read() =
            { ProductID = __.ProductID.Read()
              Name = __.Name.Read()
              ProductNumber = __.ProductNumber.Read()
              StandardCost = __.StandardCost.Read()
              ListPrice = __.ListPrice.Read()
              SellStartDate = __.SellStartDate.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              SellEndDate = __.SellEndDate.Read()
              DiscontinuedDate = __.DiscontinuedDate.Read()
              ThumbNailPhoto = __.ThumbNailPhoto.Read()
              ThumbnailPhotoFileName = __.ThumbnailPhotoFileName.Read()
              Size = __.Size.Read()
              Weight = __.Weight.Read()
              ProductCategoryID = __.ProductCategoryID.Read()
              ProductModelID = __.ProductModelID.Read()
              Color = __.Color.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then
                None
            else
                Some(__.Read())

    [<CLIMutable>]
    type ProductCategory =
        { Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          ProductCategoryID: int
          ParentProductCategoryID: Option<int> }

    type ProductCategoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.ProductCategoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductCategoryID")
        member __.ParentProductCategoryID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ParentProductCategoryID")
        member __.Read() =
            { Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              ProductCategoryID = __.ProductCategoryID.Read()
              ParentProductCategoryID = __.ParentProductCategoryID.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then
                None
            else
                Some(__.Read())


type SuperReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
    let entities = System.Collections.Generic.Dictionary<string, string -> int>()
    let buildGetOrdinal entity= 
        if not (entities.ContainsKey(entity)) then 
            let dictionary = 
                [0..reader.FieldCount-1] 
                |> List.mapi (fun i fieldIdx -> reader.GetName(fieldIdx), i)
                |> List.groupBy (fun (nm, i) -> nm) 
                |> List.map (fun (_, items) -> List.tryItem(entities.Count) items |> Option.defaultWith (fun () -> List.last items))
                |> dict
            let getOrdinal = fun idx -> dictionary.Item idx
            entities.Add(entity, getOrdinal)
            getOrdinal
        else
            entities.[entity]

    member __.``SalesLT.Product`` = SalesLT.ProductReader(reader, buildGetOrdinal "SalesLT.Product")
    member __.``SalesLT.ProductCategory`` = SalesLT.ProductCategoryReader(reader, buildGetOrdinal "SalesLT.ProductCategory")
    member __.``SalesLT.Customer`` = SalesLT.CustomerReader(reader, buildGetOrdinal "SalesLT.Customer")
    member __.``SalesLT.Address`` = SalesLT.AddressReader(reader, buildGetOrdinal "SalesLT.Address")
