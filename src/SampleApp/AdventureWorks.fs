// This code was generated by SqlHydra.SqlServer.
namespace SampleApp.AdventureWorks

[<AutoOpen>]
module private Extensions = 
    type System.Data.IDataReader with
        member __.Required (getter: int -> 'T, col: string) =
            __.GetOrdinal col |> getter

        member __.Optional (getter: int -> 'T, col: string) = 
            match __.GetOrdinal col with
            | o when __.IsDBNull o -> None
            | o -> Some (getter o)

        member __.RequiredBinary (getValue: int -> obj, col: string) =
            __.GetOrdinal col |> getValue :?> byte[]

        member __.OptionalBinary (getValue: int -> obj, col: string) = 
            match __.GetOrdinal col with
            | o when __.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])

type Column(reader: System.Data.IDataReader, column) =
    member __.Name = column
    member __.IsNull() = reader.GetOrdinal column |> reader.IsDBNull

type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getter: int -> 'T, column) =
    inherit Column(reader, column)
    member __.Read() = reader.GetOrdinal column |> getter

type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getter: int -> 'T, column) =
    inherit Column(reader, column)
    member __.Read() = 
        match reader.GetOrdinal column with
        | o when reader.IsDBNull o -> None
        | o -> Some (getter o)

type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getValue: int -> obj, column) =
    inherit Column(reader, column)
    member __.Read() = reader.GetOrdinal column |> getValue :?> byte[]

type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getValue: int -> obj, column) =
    inherit Column(reader, column)
    member __.Read() = 
        match reader.GetOrdinal column with
        | o when reader.IsDBNull o -> None
        | o -> Some (getValue o :?> byte[])
                
module dbo =
    [<CLIMutable>]
    type ErrorLog =
        { ErrorLogID: int
          ErrorTime: System.DateTime
          UserName: string
          ErrorNumber: int
          ErrorMessage: string
          ErrorSeverity: Option<int>
          ErrorState: Option<int>
          ErrorProcedure: Option<string>
          ErrorLine: Option<int> }

    type ErrorLogDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.ErrorLogID() =
            reader.Required(reader.GetInt32, "ErrorLogID")

        member __.ErrorTime() =
            reader.Required(reader.GetDateTime, "ErrorTime")

        member __.UserName() =
            reader.Required(reader.GetString, "UserName")

        member __.ErrorNumber() =
            reader.Required(reader.GetInt32, "ErrorNumber")

        member __.ErrorMessage() =
            reader.Required(reader.GetString, "ErrorMessage")

        member __.ErrorSeverity() =
            reader.Optional(reader.GetInt32, "ErrorSeverity")

        member __.ErrorState() =
            reader.Optional(reader.GetInt32, "ErrorState")

        member __.ErrorProcedure() =
            reader.Optional(reader.GetString, "ErrorProcedure")

        member __.ErrorLine() =
            reader.Optional(reader.GetInt32, "ErrorLine")

        member __.ToRecord() =
            { ErrorLogID = __.ErrorLogID()
              ErrorTime = __.ErrorTime()
              UserName = __.UserName()
              ErrorNumber = __.ErrorNumber()
              ErrorMessage = __.ErrorMessage()
              ErrorSeverity = __.ErrorSeverity()
              ErrorState = __.ErrorState()
              ErrorProcedure = __.ErrorProcedure()
              ErrorLine = __.ErrorLine() }

    [<CLIMutable>]
    type BuildVersion =
        { SystemInformationID: byte
          ``Database Version``: string
          VersionDate: System.DateTime
          ModifiedDate: System.DateTime }

    type BuildVersionDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.SystemInformationID() =
            reader.Required(reader.GetByte, "SystemInformationID")

        member __.``Database Version``() =
            reader.Required(reader.GetString, "Database Version")

        member __.VersionDate() =
            reader.Required(reader.GetDateTime, "VersionDate")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

        member __.ToRecord() =
            { SystemInformationID = __.SystemInformationID()
              ``Database Version`` = __.``Database Version`` ()
              VersionDate = __.VersionDate()
              ModifiedDate = __.ModifiedDate() }

module SalesLT =
    [<CLIMutable>]
    type Address =
        { City: string
          StateProvince: string
          CountryRegion: string
          PostalCode: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          AddressID: int
          AddressLine1: string
          AddressLine2: Option<string> }

    type AddressDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.City() =
            reader.Required(reader.GetString, "City")

        member __.StateProvince() =
            reader.Required(reader.GetString, "StateProvince")

        member __.CountryRegion() =
            reader.Required(reader.GetString, "CountryRegion")

        member __.PostalCode() =
            reader.Required(reader.GetString, "PostalCode")

        member __.rowguid() =
            reader.Required(reader.GetGuid, "rowguid")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

        member __.AddressID() =
            reader.Required(reader.GetInt32, "AddressID")

        member __.AddressLine1() =
            reader.Required(reader.GetString, "AddressLine1")

        member __.AddressLine2() =
            reader.Optional(reader.GetString, "AddressLine2")

        member __.ToRecord() =
            { City = __.City()
              StateProvince = __.StateProvince()
              CountryRegion = __.CountryRegion()
              PostalCode = __.PostalCode()
              rowguid = __.rowguid ()
              ModifiedDate = __.ModifiedDate()
              AddressID = __.AddressID()
              AddressLine1 = __.AddressLine1()
              AddressLine2 = __.AddressLine2() }

    [<CLIMutable>]
    type Customer =
        { LastName: string
          PasswordHash: string
          PasswordSalt: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          CustomerID: int
          NameStyle: bool
          FirstName: string
          MiddleName: Option<string>
          Title: Option<string>
          Suffix: Option<string>
          CompanyName: Option<string>
          SalesPerson: Option<string>
          EmailAddress: Option<string>
          Phone: Option<string> }

    type CustomerDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.LastName() =
            reader.Required(reader.GetString, "LastName")

        member __.PasswordHash() =
            reader.Required(reader.GetString, "PasswordHash")

        member __.PasswordSalt() =
            reader.Required(reader.GetString, "PasswordSalt")

        member __.rowguid() =
            reader.Required(reader.GetGuid, "rowguid")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

        member __.CustomerID() =
            reader.Required(reader.GetInt32, "CustomerID")

        member __.NameStyle() =
            reader.Required(reader.GetBoolean, "NameStyle")

        member __.FirstName() =
            reader.Required(reader.GetString, "FirstName")

        member __.MiddleName() =
            reader.Optional(reader.GetString, "MiddleName")

        member __.Title() =
            reader.Optional(reader.GetString, "Title")

        member __.Suffix() =
            reader.Optional(reader.GetString, "Suffix")

        member __.CompanyName() =
            reader.Optional(reader.GetString, "CompanyName")

        member __.SalesPerson() =
            reader.Optional(reader.GetString, "SalesPerson")

        member __.EmailAddress() =
            reader.Optional(reader.GetString, "EmailAddress")

        member __.Phone() =
            reader.Optional(reader.GetString, "Phone")

        member __.ToRecord() =
            { LastName = __.LastName()
              PasswordHash = __.PasswordHash()
              PasswordSalt = __.PasswordSalt()
              rowguid = __.rowguid ()
              ModifiedDate = __.ModifiedDate()
              CustomerID = __.CustomerID()
              NameStyle = __.NameStyle()
              FirstName = __.FirstName()
              MiddleName = __.MiddleName()
              Title = __.Title()
              Suffix = __.Suffix()
              CompanyName = __.CompanyName()
              SalesPerson = __.SalesPerson()
              EmailAddress = __.EmailAddress()
              Phone = __.Phone() }

    [<CLIMutable>]
    type CustomerAddress =
        { CustomerID: int
          AddressID: int
          AddressType: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type CustomerAddressDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.CustomerID() =
            reader.Required(reader.GetInt32, "CustomerID")

        member __.AddressID() =
            reader.Required(reader.GetInt32, "AddressID")

        member __.AddressType() =
            reader.Required(reader.GetString, "AddressType")

        member __.rowguid() =
            reader.Required(reader.GetGuid, "rowguid")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

        member __.ToRecord() =
            { CustomerID = __.CustomerID()
              AddressID = __.AddressID()
              AddressType = __.AddressType()
              rowguid = __.rowguid ()
              ModifiedDate = __.ModifiedDate() }

    [<CLIMutable>]
    type Product =
        { ProductID: int
          Name: string
          ProductNumber: string
          StandardCost: decimal
          ListPrice: decimal
          SellStartDate: System.DateTime
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          SellEndDate: Option<System.DateTime>
          DiscontinuedDate: Option<System.DateTime>
          ThumbNailPhoto: Option<byte []>
          ThumbnailPhotoFileName: Option<string>
          Size: Option<string>
          Weight: Option<decimal>
          ProductCategoryID: Option<int>
          ProductModelID: Option<int>
          Color: Option<string> }

    type ProductDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.ProductID() =
            reader.Required(reader.GetInt32, "ProductID")

        member __.Name() =
            reader.Required(reader.GetString, "Name")

        member __.ProductNumber() =
            reader.Required(reader.GetString, "ProductNumber")

        member __.StandardCost() =
            reader.Required(reader.GetDecimal, "StandardCost")

        member __.ListPrice() =
            reader.Required(reader.GetDecimal, "ListPrice")

        member __.SellStartDate() =
            reader.Required(reader.GetDateTime, "SellStartDate")

        member __.rowguid() =
            reader.Required(reader.GetGuid, "rowguid")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

        member __.SellEndDate() =
            reader.Optional(reader.GetDateTime, "SellEndDate")

        member __.DiscontinuedDate() =
            reader.Optional(reader.GetDateTime, "DiscontinuedDate")

        member __.ThumbNailPhoto() =
            reader.OptionalBinary(reader.GetValue, "ThumbNailPhoto")

        member __.ThumbnailPhotoFileName() =
            reader.Optional(reader.GetString, "ThumbnailPhotoFileName")

        member __.Size() =
            reader.Optional(reader.GetString, "Size")

        member __.Weight() =
            reader.Optional(reader.GetDecimal, "Weight")

        member __.ProductCategoryID() =
            reader.Optional(reader.GetInt32, "ProductCategoryID")

        member __.ProductModelID() =
            reader.Optional(reader.GetInt32, "ProductModelID")

        member __.Color() =
            reader.Optional(reader.GetString, "Color")

        member __.ToRecord() =
            { ProductID = __.ProductID()
              Name = __.Name()
              ProductNumber = __.ProductNumber()
              StandardCost = __.StandardCost()
              ListPrice = __.ListPrice()
              SellStartDate = __.SellStartDate()
              rowguid = __.rowguid ()
              ModifiedDate = __.ModifiedDate()
              SellEndDate = __.SellEndDate()
              DiscontinuedDate = __.DiscontinuedDate()
              ThumbNailPhoto = __.ThumbNailPhoto()
              ThumbnailPhotoFileName = __.ThumbnailPhotoFileName()
              Size = __.Size()
              Weight = __.Weight()
              ProductCategoryID = __.ProductCategoryID()
              ProductModelID = __.ProductModelID()
              Color = __.Color() }

    [<CLIMutable>]
    type ProductCategory =
        { Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          ProductCategoryID: int
          ParentProductCategoryID: Option<int> }

    type ProductCategoryDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.Name = RequiredColumn(reader, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, reader.GetDateTime, "ModifiedDate")
        member __.ProductCategoryID = RequiredColumn(reader, reader.GetInt32, "ProductCategoryID")
        member __.ParentProductCategoryID = OptionalColumn(reader, reader.GetInt32, "ParentProductCategoryID")

        member __.ToRecord() =
            { Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              ProductCategoryID = __.ProductCategoryID.Read()
              ParentProductCategoryID = __.ParentProductCategoryID.Read() }

        member __.ToRecordIf(column: Column) = 
            if column.IsNull()
            then None
            else Some (__.ToRecord())


    [<CLIMutable>]
    type ProductDescription =
        { ProductDescriptionID: int
          Description: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductDescriptionDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.ProductDescriptionID() =
            reader.Required(reader.GetInt32, "ProductDescriptionID")

        member __.Description() =
            reader.Required(reader.GetString, "Description")

        member __.rowguid() =
            reader.Required(reader.GetGuid, "rowguid")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

        member __.ToRecord() =
            { ProductDescriptionID = __.ProductDescriptionID()
              Description = __.Description()
              rowguid = __.rowguid ()
              ModifiedDate = __.ModifiedDate() }

    [<CLIMutable>]
    type ProductModel =
        { ProductModelID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          CatalogDescription: Option<System.Xml.Linq.XElement> }

    type ProductModelDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.ProductModelID() =
            reader.Required(reader.GetInt32, "ProductModelID")

        member __.Name() =
            reader.Required(reader.GetString, "Name")

        member __.rowguid() =
            reader.Required(reader.GetGuid, "rowguid")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type ProductModelProductDescription =
        { ProductModelID: int
          ProductDescriptionID: int
          Culture: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductModelProductDescriptionDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.ProductModelID() =
            reader.Required(reader.GetInt32, "ProductModelID")

        member __.ProductDescriptionID() =
            reader.Required(reader.GetInt32, "ProductDescriptionID")

        member __.Culture() =
            reader.Required(reader.GetString, "Culture")

        member __.rowguid() =
            reader.Required(reader.GetGuid, "rowguid")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

        member __.ToRecord() =
            { ProductModelID = __.ProductModelID()
              ProductDescriptionID = __.ProductDescriptionID()
              Culture = __.Culture()
              rowguid = __.rowguid ()
              ModifiedDate = __.ModifiedDate() }

    [<CLIMutable>]
    type SalesOrderDetail =
        { SalesOrderID: int
          SalesOrderDetailID: int
          OrderQty: int16
          ProductID: int
          UnitPrice: decimal
          UnitPriceDiscount: decimal
          LineTotal: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesOrderDetailDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.SalesOrderID() =
            reader.Required(reader.GetInt32, "SalesOrderID")

        member __.SalesOrderDetailID() =
            reader.Required(reader.GetInt32, "SalesOrderDetailID")

        member __.OrderQty() =
            reader.Required(reader.GetInt16, "OrderQty")

        member __.ProductID() =
            reader.Required(reader.GetInt32, "ProductID")

        member __.UnitPrice() =
            reader.Required(reader.GetDecimal, "UnitPrice")

        member __.UnitPriceDiscount() =
            reader.Required(reader.GetDecimal, "UnitPriceDiscount")

        member __.LineTotal() =
            reader.Required(reader.GetDecimal, "LineTotal")

        member __.rowguid() =
            reader.Required(reader.GetGuid, "rowguid")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

        member __.ToRecord() =
            { SalesOrderID = __.SalesOrderID()
              SalesOrderDetailID = __.SalesOrderDetailID()
              OrderQty = __.OrderQty()
              ProductID = __.ProductID()
              UnitPrice = __.UnitPrice()
              UnitPriceDiscount = __.UnitPriceDiscount()
              LineTotal = __.LineTotal()
              rowguid = __.rowguid ()
              ModifiedDate = __.ModifiedDate() }

    [<CLIMutable>]
    type SalesOrderHeader =
        { SalesOrderID: int
          RevisionNumber: byte
          OrderDate: System.DateTime
          DueDate: System.DateTime
          Status: byte
          OnlineOrderFlag: bool
          SalesOrderNumber: string
          CustomerID: int
          SubTotal: decimal
          TaxAmt: decimal
          Freight: decimal
          TotalDue: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          ShipMethod: string
          CreditCardApprovalCode: Option<string>
          Comment: Option<string>
          ShipToAddressID: Option<int>
          BillToAddressID: Option<int>
          PurchaseOrderNumber: Option<string>
          AccountNumber: Option<string>
          ShipDate: Option<System.DateTime> }

    type SalesOrderHeaderDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.SalesOrderID() =
            reader.Required(reader.GetInt32, "SalesOrderID")

        member __.RevisionNumber() =
            reader.Required(reader.GetByte, "RevisionNumber")

        member __.OrderDate() =
            reader.Required(reader.GetDateTime, "OrderDate")

        member __.DueDate() =
            reader.Required(reader.GetDateTime, "DueDate")

        member __.Status() =
            reader.Required(reader.GetByte, "Status")

        member __.OnlineOrderFlag() =
            reader.Required(reader.GetBoolean, "OnlineOrderFlag")

        member __.SalesOrderNumber() =
            reader.Required(reader.GetString, "SalesOrderNumber")

        member __.CustomerID() =
            reader.Required(reader.GetInt32, "CustomerID")

        member __.SubTotal() =
            reader.Required(reader.GetDecimal, "SubTotal")

        member __.TaxAmt() =
            reader.Required(reader.GetDecimal, "TaxAmt")

        member __.Freight() =
            reader.Required(reader.GetDecimal, "Freight")

        member __.TotalDue() =
            reader.Required(reader.GetDecimal, "TotalDue")

        member __.rowguid() =
            reader.Required(reader.GetGuid, "rowguid")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

        member __.ShipMethod() =
            reader.Required(reader.GetString, "ShipMethod")

        member __.CreditCardApprovalCode() =
            reader.Optional(reader.GetString, "CreditCardApprovalCode")

        member __.Comment() =
            reader.Optional(reader.GetString, "Comment")

        member __.ShipToAddressID() =
            reader.Optional(reader.GetInt32, "ShipToAddressID")

        member __.BillToAddressID() =
            reader.Optional(reader.GetInt32, "BillToAddressID")

        member __.PurchaseOrderNumber() =
            reader.Optional(reader.GetString, "PurchaseOrderNumber")

        member __.AccountNumber() =
            reader.Optional(reader.GetString, "AccountNumber")

        member __.ShipDate() =
            reader.Optional(reader.GetDateTime, "ShipDate")

        member __.ToRecord() =
            { SalesOrderID = __.SalesOrderID()
              RevisionNumber = __.RevisionNumber()
              OrderDate = __.OrderDate()
              DueDate = __.DueDate()
              Status = __.Status()
              OnlineOrderFlag = __.OnlineOrderFlag()
              SalesOrderNumber = __.SalesOrderNumber()
              CustomerID = __.CustomerID()
              SubTotal = __.SubTotal()
              TaxAmt = __.TaxAmt()
              Freight = __.Freight()
              TotalDue = __.TotalDue()
              rowguid = __.rowguid ()
              ModifiedDate = __.ModifiedDate()
              ShipMethod = __.ShipMethod()
              CreditCardApprovalCode = __.CreditCardApprovalCode()
              Comment = __.Comment()
              ShipToAddressID = __.ShipToAddressID()
              BillToAddressID = __.BillToAddressID()
              PurchaseOrderNumber = __.PurchaseOrderNumber()
              AccountNumber = __.AccountNumber()
              ShipDate = __.ShipDate() }

    [<CLIMutable>]
    type vProductAndDescription =
        { ProductID: int
          Name: string
          ProductModel: string
          Culture: string
          Description: string }

    type vProductAndDescriptionDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.ProductID() =
            reader.Required(reader.GetInt32, "ProductID")

        member __.Name() =
            reader.Required(reader.GetString, "Name")

        member __.ProductModel() =
            reader.Required(reader.GetString, "ProductModel")

        member __.Culture() =
            reader.Required(reader.GetString, "Culture")

        member __.Description() =
            reader.Required(reader.GetString, "Description")

        member __.ToRecord() =
            { ProductID = __.ProductID()
              Name = __.Name()
              ProductModel = __.ProductModel()
              Culture = __.Culture()
              Description = __.Description() }

    [<CLIMutable>]
    type vProductModelCatalogDescription =
        { ProductModelID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          Summary: Option<string>
          Manufacturer: Option<string>
          Copyright: Option<string>
          ProductURL: Option<string>
          WarrantyPeriod: Option<string>
          WarrantyDescription: Option<string>
          NoOfYears: Option<string>
          MaintenanceDescription: Option<string>
          Wheel: Option<string>
          Saddle: Option<string>
          Pedal: Option<string>
          BikeFrame: Option<string>
          Crankset: Option<string>
          PictureAngle: Option<string>
          PictureSize: Option<string>
          ProductPhotoID: Option<string>
          Material: Option<string>
          Color: Option<string>
          ProductLine: Option<string>
          Style: Option<string>
          RiderExperience: Option<string> }

    type vProductModelCatalogDescriptionDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.ProductModelID() =
            reader.Required(reader.GetInt32, "ProductModelID")

        member __.Name() =
            reader.Required(reader.GetString, "Name")

        member __.rowguid() =
            reader.Required(reader.GetGuid, "rowguid")

        member __.ModifiedDate() =
            reader.Required(reader.GetDateTime, "ModifiedDate")

        member __.Summary() =
            reader.Optional(reader.GetString, "Summary")

        member __.Manufacturer() =
            reader.Optional(reader.GetString, "Manufacturer")

        member __.Copyright() =
            reader.Optional(reader.GetString, "Copyright")

        member __.ProductURL() =
            reader.Optional(reader.GetString, "ProductURL")

        member __.WarrantyPeriod() =
            reader.Optional(reader.GetString, "WarrantyPeriod")

        member __.WarrantyDescription() =
            reader.Optional(reader.GetString, "WarrantyDescription")

        member __.NoOfYears() =
            reader.Optional(reader.GetString, "NoOfYears")

        member __.MaintenanceDescription() =
            reader.Optional(reader.GetString, "MaintenanceDescription")

        member __.Wheel() =
            reader.Optional(reader.GetString, "Wheel")

        member __.Saddle() =
            reader.Optional(reader.GetString, "Saddle")

        member __.Pedal() =
            reader.Optional(reader.GetString, "Pedal")

        member __.BikeFrame() =
            reader.Optional(reader.GetString, "BikeFrame")

        member __.Crankset() =
            reader.Optional(reader.GetString, "Crankset")

        member __.PictureAngle() =
            reader.Optional(reader.GetString, "PictureAngle")

        member __.PictureSize() =
            reader.Optional(reader.GetString, "PictureSize")

        member __.ProductPhotoID() =
            reader.Optional(reader.GetString, "ProductPhotoID")

        member __.Material() =
            reader.Optional(reader.GetString, "Material")

        member __.Color() =
            reader.Optional(reader.GetString, "Color")

        member __.ProductLine() =
            reader.Optional(reader.GetString, "ProductLine")

        member __.Style() =
            reader.Optional(reader.GetString, "Style")

        member __.RiderExperience() =
            reader.Optional(reader.GetString, "RiderExperience")

        member __.ToRecord() =
            { ProductModelID = __.ProductModelID()
              Name = __.Name()
              rowguid = __.rowguid ()
              ModifiedDate = __.ModifiedDate()
              Summary = __.Summary()
              Manufacturer = __.Manufacturer()
              Copyright = __.Copyright()
              ProductURL = __.ProductURL()
              WarrantyPeriod = __.WarrantyPeriod()
              WarrantyDescription = __.WarrantyDescription()
              NoOfYears = __.NoOfYears()
              MaintenanceDescription = __.MaintenanceDescription()
              Wheel = __.Wheel()
              Saddle = __.Saddle()
              Pedal = __.Pedal()
              BikeFrame = __.BikeFrame()
              Crankset = __.Crankset()
              PictureAngle = __.PictureAngle()
              PictureSize = __.PictureSize()
              ProductPhotoID = __.ProductPhotoID()
              Material = __.Material()
              Color = __.Color()
              ProductLine = __.ProductLine()
              Style = __.Style()
              RiderExperience = __.RiderExperience() }

    [<CLIMutable>]
    type vGetAllCategories =
        { ParentProductCategoryName: string
          ProductCategoryName: Option<string>
          ProductCategoryID: Option<int> }

    type vGetAllCategoriesDataReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
        member __.ParentProductCategoryName() =
            reader.Required(reader.GetString, "ParentProductCategoryName")

        member __.ProductCategoryName() =
            reader.Optional(reader.GetString, "ProductCategoryName")

        member __.ProductCategoryID() =
            reader.Optional(reader.GetInt32, "ProductCategoryID")

        member __.ToRecord() =
            { ParentProductCategoryName = __.ParentProductCategoryName()
              ProductCategoryName = __.ProductCategoryName()
              ProductCategoryID = __.ProductCategoryID() }
