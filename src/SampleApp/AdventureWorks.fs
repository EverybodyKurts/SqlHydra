// This code was generated by SqlHydra.Sqlite.
namespace SampleApp.AdventureWorks


[<AutoOpen>]
module Extensions = 
    type System.Data.IDataReader with
        member this.Required (getter: int -> 'T, col: string) =
            this.GetOrdinal col |> getter

        member this.Optional (getter: int -> 'T, col: string) = 
            match this.GetOrdinal col with
            | o when this.IsDBNull o -> None
            | o -> Some (getter o)

        member this.RequiredBinary (getValue: int -> obj, col: string) =
            this.GetOrdinal col |> getValue :?> byte[]

        member this.OptionalBinary (getValue: int -> obj, col: string) = 
            match this.GetOrdinal col with
            | o when this.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])
        
module main =
    [<CLIMutable>]
    type ErrorLog =
        { ErrorLogID: int64
          ErrorTime: System.DateTime
          UserName: string
          ErrorNumber: int64
          ErrorSeverity: Option<int64>
          ErrorState: Option<int64>
          ErrorProcedure: Option<string>
          ErrorLine: Option<int64>
          ErrorMessage: string }

    type ErrorLogReader(reader: System.Data.IDataReader) =
        member val ErrorLogID = reader.Required(reader.GetInt64, "ErrorLogID")
        member val ErrorTime = reader.Required(reader.GetDateTime, "ErrorTime")
        member val UserName = reader.Required(reader.GetString, "UserName")
        member val ErrorNumber = reader.Required(reader.GetInt64, "ErrorNumber")
        member val ErrorSeverity = reader.Optional(reader.GetInt64, "ErrorSeverity")
        member val ErrorState = reader.Optional(reader.GetInt64, "ErrorState")
        member val ErrorProcedure = reader.Optional(reader.GetString, "ErrorProcedure")
        member val ErrorLine = reader.Optional(reader.GetInt64, "ErrorLine")
        member val ErrorMessage = reader.Required(reader.GetString, "ErrorMessage")

    [<CLIMutable>]
    type BuildVersion =
        { SystemInformationID: int64
          ``Database Version``: string
          VersionDate: System.DateTime
          ModifiedDate: System.DateTime }

    type BuildVersionReader(reader: System.Data.IDataReader) =
        member val SystemInformationID = reader.Required(reader.GetInt64, "SystemInformationID")
        member val ``Database Version`` = reader.Required(reader.GetString, "Database Version")
        member val VersionDate = reader.Required(reader.GetDateTime, "VersionDate")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type Address =
        { AddressID: int64
          AddressLine1: string
          AddressLine2: Option<string>
          City: string
          StateProvince: string
          CountryRegion: string
          PostalCode: string
          rowguid: string
          ModifiedDate: System.DateTime }

    type AddressReader(reader: System.Data.IDataReader) =
        member val AddressID = reader.Required(reader.GetInt64, "AddressID")
        member val AddressLine1 = reader.Required(reader.GetString, "AddressLine1")
        member val AddressLine2 = reader.Optional(reader.GetString, "AddressLine2")
        member val City = reader.Required(reader.GetString, "City")
        member val StateProvince = reader.Required(reader.GetString, "StateProvince")
        member val CountryRegion = reader.Required(reader.GetString, "CountryRegion")
        member val PostalCode = reader.Required(reader.GetString, "PostalCode")
        member val rowguid = reader.Required(reader.GetString, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type Customer =
        { CustomerID: int64
          NameStyle: int64
          Title: Option<string>
          FirstName: string
          MiddleName: Option<string>
          LastName: string
          Suffix: Option<string>
          CompanyName: Option<string>
          SalesPerson: Option<string>
          EmailAddress: Option<string>
          Phone: Option<string>
          PasswordHash: string
          PasswordSalt: string
          rowguid: string
          ModifiedDate: System.DateTime }

    type CustomerReader(reader: System.Data.IDataReader) =
        member val CustomerID = reader.Required(reader.GetInt64, "CustomerID")
        member val NameStyle = reader.Required(reader.GetInt64, "NameStyle")
        member val Title = reader.Optional(reader.GetString, "Title")
        member val FirstName = reader.Required(reader.GetString, "FirstName")
        member val MiddleName = reader.Optional(reader.GetString, "MiddleName")
        member val LastName = reader.Required(reader.GetString, "LastName")
        member val Suffix = reader.Optional(reader.GetString, "Suffix")
        member val CompanyName = reader.Optional(reader.GetString, "CompanyName")
        member val SalesPerson = reader.Optional(reader.GetString, "SalesPerson")
        member val EmailAddress = reader.Optional(reader.GetString, "EmailAddress")
        member val Phone = reader.Optional(reader.GetString, "Phone")
        member val PasswordHash = reader.Required(reader.GetString, "PasswordHash")
        member val PasswordSalt = reader.Required(reader.GetString, "PasswordSalt")
        member val rowguid = reader.Required(reader.GetString, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type CustomerAddress =
        { CustomerID: int64
          AddressID: int64
          AddressType: string
          rowguid: string
          ModifiedDate: System.DateTime }

    type CustomerAddressReader(reader: System.Data.IDataReader) =
        member val CustomerID = reader.Required(reader.GetInt64, "CustomerID")
        member val AddressID = reader.Required(reader.GetInt64, "AddressID")
        member val AddressType = reader.Required(reader.GetString, "AddressType")
        member val rowguid = reader.Required(reader.GetString, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type Product =
        { ProductID: int64
          Name: string
          ProductNumber: string
          Color: Option<string>
          StandardCost: int64
          ListPrice: int64
          Size: Option<string>
          Weight: Option<int64>
          ProductCategoryID: Option<int64>
          ProductModelID: Option<int64>
          SellStartDate: System.DateTime
          SellEndDate: Option<System.DateTime>
          DiscontinuedDate: Option<System.DateTime>
          ThumbNailPhoto: Option<byte []>
          ThumbnailPhotoFileName: Option<string>
          rowguid: string
          ModifiedDate: System.DateTime }

    type ProductReader(reader: System.Data.IDataReader) =
        member val ProductID = reader.Required(reader.GetInt64, "ProductID")
        member val Name = reader.Required(reader.GetString, "Name")
        member val ProductNumber = reader.Required(reader.GetString, "ProductNumber")
        member val Color = reader.Optional(reader.GetString, "Color")
        member val StandardCost = reader.Required(reader.GetInt64, "StandardCost")
        member val ListPrice = reader.Required(reader.GetInt64, "ListPrice")
        member val Size = reader.Optional(reader.GetString, "Size")
        member val Weight = reader.Optional(reader.GetInt64, "Weight")
        member val ProductCategoryID = reader.Optional(reader.GetInt64, "ProductCategoryID")
        member val ProductModelID = reader.Optional(reader.GetInt64, "ProductModelID")
        member val SellStartDate = reader.Required(reader.GetDateTime, "SellStartDate")
        member val SellEndDate = reader.Optional(reader.GetDateTime, "SellEndDate")
        member val DiscontinuedDate = reader.Optional(reader.GetDateTime, "DiscontinuedDate")
        member val ThumbNailPhoto = reader.OptionalBinary(reader.GetValue, "ThumbNailPhoto")
        member val ThumbnailPhotoFileName = reader.Optional(reader.GetString, "ThumbnailPhotoFileName")
        member val rowguid = reader.Required(reader.GetString, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type ProductCategory =
        { ProductCategoryID: int64
          ParentProductCategoryID: Option<int64>
          Name: string
          rowguid: string
          ModifiedDate: System.DateTime }

    type ProductCategoryReader(reader: System.Data.IDataReader) =
        member val ProductCategoryID = reader.Required(reader.GetInt64, "ProductCategoryID")
        member val ParentProductCategoryID = reader.Optional(reader.GetInt64, "ParentProductCategoryID")
        member val Name = reader.Required(reader.GetString, "Name")
        member val rowguid = reader.Required(reader.GetString, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type ProductDescription =
        { ProductDescriptionID: int64
          Description: string
          rowguid: string
          ModifiedDate: System.DateTime }

    type ProductDescriptionReader(reader: System.Data.IDataReader) =
        member val ProductDescriptionID = reader.Required(reader.GetInt64, "ProductDescriptionID")
        member val Description = reader.Required(reader.GetString, "Description")
        member val rowguid = reader.Required(reader.GetString, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type ProductModel =
        { ProductModelID: int64
          Name: string
          CatalogDescription: Option<string>
          rowguid: string
          ModifiedDate: System.DateTime }

    type ProductModelReader(reader: System.Data.IDataReader) =
        member val ProductModelID = reader.Required(reader.GetInt64, "ProductModelID")
        member val Name = reader.Required(reader.GetString, "Name")
        member val CatalogDescription = reader.Optional(reader.GetString, "CatalogDescription")
        member val rowguid = reader.Required(reader.GetString, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type ProductModelProductDescription =
        { ProductModelID: int64
          ProductDescriptionID: int64
          Culture: string
          rowguid: string
          ModifiedDate: System.DateTime }

    type ProductModelProductDescriptionReader(reader: System.Data.IDataReader) =
        member val ProductModelID = reader.Required(reader.GetInt64, "ProductModelID")
        member val ProductDescriptionID = reader.Required(reader.GetInt64, "ProductDescriptionID")
        member val Culture = reader.Required(reader.GetString, "Culture")
        member val rowguid = reader.Required(reader.GetString, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type SalesOrderDetail =
        { SalesOrderID: int64
          SalesOrderDetailID: int64
          OrderQty: int64
          ProductID: int64
          UnitPrice: int64
          UnitPriceDiscount: int64
          LineTotal: int64
          rowguid: string
          ModifiedDate: System.DateTime }

    type SalesOrderDetailReader(reader: System.Data.IDataReader) =
        member val SalesOrderID = reader.Required(reader.GetInt64, "SalesOrderID")
        member val SalesOrderDetailID = reader.Required(reader.GetInt64, "SalesOrderDetailID")
        member val OrderQty = reader.Required(reader.GetInt64, "OrderQty")
        member val ProductID = reader.Required(reader.GetInt64, "ProductID")
        member val UnitPrice = reader.Required(reader.GetInt64, "UnitPrice")
        member val UnitPriceDiscount = reader.Required(reader.GetInt64, "UnitPriceDiscount")
        member val LineTotal = reader.Required(reader.GetInt64, "LineTotal")
        member val rowguid = reader.Required(reader.GetString, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")

    [<CLIMutable>]
    type SalesOrderHeader =
        { SalesOrderID: int64
          RevisionNumber: int64
          OrderDate: System.DateTime
          DueDate: System.DateTime
          ShipDate: Option<System.DateTime>
          Status: int64
          OnlineOrderFlag: int64
          SalesOrderNumber: string
          PurchaseOrderNumber: Option<int64>
          AccountNumber: Option<string>
          CustomerID: int64
          ShipToAddressID: Option<int>
          BillToAddressID: Option<int>
          ShipMethod: string
          CreditCardApprovalCode: Option<string>
          SubTotal: int64
          TaxAmt: int64
          Freight: int64
          TotalDue: int64
          Comment: Option<string>
          rowguid: string
          ModifiedDate: System.DateTime }

    type SalesOrderHeaderReader(reader: System.Data.IDataReader) =
        member val SalesOrderID = reader.Required(reader.GetInt64, "SalesOrderID")
        member val RevisionNumber = reader.Required(reader.GetInt64, "RevisionNumber")
        member val OrderDate = reader.Required(reader.GetDateTime, "OrderDate")
        member val DueDate = reader.Required(reader.GetDateTime, "DueDate")
        member val ShipDate = reader.Optional(reader.GetDateTime, "ShipDate")
        member val Status = reader.Required(reader.GetInt64, "Status")
        member val OnlineOrderFlag = reader.Required(reader.GetInt64, "OnlineOrderFlag")
        member val SalesOrderNumber = reader.Required(reader.GetString, "SalesOrderNumber")
        member val PurchaseOrderNumber = reader.Optional(reader.GetInt64, "PurchaseOrderNumber")
        member val AccountNumber = reader.Optional(reader.GetString, "AccountNumber")
        member val CustomerID = reader.Required(reader.GetInt64, "CustomerID")
        member val ShipToAddressID = reader.Optional(reader.GetInt32, "ShipToAddressID")
        member val BillToAddressID = reader.Optional(reader.GetInt32, "BillToAddressID")
        member val ShipMethod = reader.Required(reader.GetString, "ShipMethod")
        member val CreditCardApprovalCode = reader.Optional(reader.GetString, "CreditCardApprovalCode")
        member val SubTotal = reader.Required(reader.GetInt64, "SubTotal")
        member val TaxAmt = reader.Required(reader.GetInt64, "TaxAmt")
        member val Freight = reader.Required(reader.GetInt64, "Freight")
        member val TotalDue = reader.Required(reader.GetInt64, "TotalDue")
        member val Comment = reader.Optional(reader.GetString, "Comment")
        member val rowguid = reader.Required(reader.GetString, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
