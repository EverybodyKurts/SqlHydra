// This code was generated by SqlHydra.SqlServer.
namespace SampleApp.AdventureWorks


[<AutoOpen>]
module Extensions = 
    type System.Data.IDataReader with
        member this.Required (getter: int -> 'T, col: string) =
            this.GetOrdinal col |> getter

        member this.Optional (getter: int -> 'T, col: string) = 
            match this.GetOrdinal col with
            | o when this.IsDBNull o -> None
            | o -> Some (getter o)

        member this.RequiredBinary (getValue: int -> obj, col: string) =
            this.GetOrdinal col |> getValue :?> byte[]

        member this.OptionalBinary (getValue: int -> obj, col: string) = 
            match this.GetOrdinal col with
            | o when this.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])
        
module dbo =
    [<CLIMutable>]
    type ErrorLog =
        { ErrorLogID: int
          ErrorTime: System.DateTime
          UserName: string
          ErrorNumber: int
          ErrorMessage: string
          ErrorSeverity: Option<int>
          ErrorState: Option<int>
          ErrorProcedure: Option<string>
          ErrorLine: Option<int> }

    type ErrorLogReader(reader: System.Data.IDataReader) =
        member val ErrorLogID = reader.Required(reader.GetInt32, "ErrorLogID")
        member val ErrorTime = reader.Required(reader.GetDateTime, "ErrorTime")
        member val UserName = reader.Required(reader.GetString, "UserName")
        member val ErrorNumber = reader.Required(reader.GetInt32, "ErrorNumber")
        member val ErrorMessage = reader.Required(reader.GetString, "ErrorMessage")
        member val ErrorSeverity = reader.Optional(reader.GetInt32, "ErrorSeverity")
        member val ErrorState = reader.Optional(reader.GetInt32, "ErrorState")
        member val ErrorProcedure = reader.Optional(reader.GetString, "ErrorProcedure")
        member val ErrorLine = reader.Optional(reader.GetInt32, "ErrorLine")
        member __.Read() =
            { ErrorLogID = __.ErrorLogID
              ErrorTime = __.ErrorTime
              UserName = __.UserName
              ErrorNumber = __.ErrorNumber
              ErrorMessage = __.ErrorMessage
              ErrorSeverity = __.ErrorSeverity
              ErrorState = __.ErrorState
              ErrorProcedure = __.ErrorProcedure
              ErrorLine = __.ErrorLine }

    [<CLIMutable>]
    type BuildVersion =
        { SystemInformationID: byte
          ``Database Version``: string
          VersionDate: System.DateTime
          ModifiedDate: System.DateTime }

    type BuildVersionReader(reader: System.Data.IDataReader) =
        member val SystemInformationID = reader.Required(reader.GetByte, "SystemInformationID")
        member val ``Database Version`` = reader.Required(reader.GetString, "Database Version")
        member val VersionDate = reader.Required(reader.GetDateTime, "VersionDate")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { SystemInformationID = __.SystemInformationID
              ``Database Version`` = __.``Database Version``
              VersionDate = __.VersionDate
              ModifiedDate = __.ModifiedDate }

module SalesLT =
    [<CLIMutable>]
    type Address =
        { City: string
          StateProvince: string
          CountryRegion: string
          PostalCode: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          AddressID: int
          AddressLine1: string
          AddressLine2: Option<string> }

    type AddressReader(reader: System.Data.IDataReader) =
        member val City = reader.Required(reader.GetString, "City")
        member val StateProvince = reader.Required(reader.GetString, "StateProvince")
        member val CountryRegion = reader.Required(reader.GetString, "CountryRegion")
        member val PostalCode = reader.Required(reader.GetString, "PostalCode")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member val AddressID = reader.Required(reader.GetInt32, "AddressID")
        member val AddressLine1 = reader.Required(reader.GetString, "AddressLine1")
        member val AddressLine2 = reader.Optional(reader.GetString, "AddressLine2")
        member __.Read() =
            { City = __.City
              StateProvince = __.StateProvince
              CountryRegion = __.CountryRegion
              PostalCode = __.PostalCode
              rowguid = __.rowguid
              ModifiedDate = __.ModifiedDate
              AddressID = __.AddressID
              AddressLine1 = __.AddressLine1
              AddressLine2 = __.AddressLine2 }

    [<CLIMutable>]
    type Customer =
        { LastName: string
          PasswordHash: string
          PasswordSalt: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          CustomerID: int
          NameStyle: bool
          FirstName: string
          MiddleName: Option<string>
          Title: Option<string>
          Suffix: Option<string>
          CompanyName: Option<string>
          SalesPerson: Option<string>
          EmailAddress: Option<string>
          Phone: Option<string> }

    type CustomerReader(reader: System.Data.IDataReader) =
        member val LastName = reader.Required(reader.GetString, "LastName")
        member val PasswordHash = reader.Required(reader.GetString, "PasswordHash")
        member val PasswordSalt = reader.Required(reader.GetString, "PasswordSalt")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member val CustomerID = reader.Required(reader.GetInt32, "CustomerID")
        member val NameStyle = reader.Required(reader.GetBoolean, "NameStyle")
        member val FirstName = reader.Required(reader.GetString, "FirstName")
        member val MiddleName = reader.Optional(reader.GetString, "MiddleName")
        member val Title = reader.Optional(reader.GetString, "Title")
        member val Suffix = reader.Optional(reader.GetString, "Suffix")
        member val CompanyName = reader.Optional(reader.GetString, "CompanyName")
        member val SalesPerson = reader.Optional(reader.GetString, "SalesPerson")
        member val EmailAddress = reader.Optional(reader.GetString, "EmailAddress")
        member val Phone = reader.Optional(reader.GetString, "Phone")
        member __.Read() =
            { LastName = __.LastName
              PasswordHash = __.PasswordHash
              PasswordSalt = __.PasswordSalt
              rowguid = __.rowguid
              ModifiedDate = __.ModifiedDate
              CustomerID = __.CustomerID
              NameStyle = __.NameStyle
              FirstName = __.FirstName
              MiddleName = __.MiddleName
              Title = __.Title
              Suffix = __.Suffix
              CompanyName = __.CompanyName
              SalesPerson = __.SalesPerson
              EmailAddress = __.EmailAddress
              Phone = __.Phone }

    [<CLIMutable>]
    type CustomerAddress =
        { CustomerID: int
          AddressID: int
          AddressType: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type CustomerAddressReader(reader: System.Data.IDataReader) =
        member val CustomerID = reader.Required(reader.GetInt32, "CustomerID")
        member val AddressID = reader.Required(reader.GetInt32, "AddressID")
        member val AddressType = reader.Required(reader.GetString, "AddressType")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { CustomerID = __.CustomerID
              AddressID = __.AddressID
              AddressType = __.AddressType
              rowguid = __.rowguid
              ModifiedDate = __.ModifiedDate }

    [<CLIMutable>]
    type Product =
        { ProductID: int
          Name: string
          ProductNumber: string
          StandardCost: decimal
          ListPrice: decimal
          SellStartDate: System.DateTime
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          SellEndDate: Option<System.DateTime>
          DiscontinuedDate: Option<System.DateTime>
          ThumbNailPhoto: Option<byte []>
          ThumbnailPhotoFileName: Option<string>
          Size: Option<string>
          Weight: Option<decimal>
          ProductCategoryID: Option<int>
          ProductModelID: Option<int>
          Color: Option<string> }

    type ProductReader(reader: System.Data.IDataReader) =
        member val ProductID = reader.Required(reader.GetInt32, "ProductID")
        member val Name = reader.Required(reader.GetString, "Name")
        member val ProductNumber = reader.Required(reader.GetString, "ProductNumber")
        member val StandardCost = reader.Required(reader.GetDecimal, "StandardCost")
        member val ListPrice = reader.Required(reader.GetDecimal, "ListPrice")
        member val SellStartDate = reader.Required(reader.GetDateTime, "SellStartDate")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member val SellEndDate = reader.Optional(reader.GetDateTime, "SellEndDate")
        member val DiscontinuedDate = reader.Optional(reader.GetDateTime, "DiscontinuedDate")
        member val ThumbNailPhoto = reader.OptionalBinary(reader.GetValue, "ThumbNailPhoto")
        member val ThumbnailPhotoFileName = reader.Optional(reader.GetString, "ThumbnailPhotoFileName")
        member val Size = reader.Optional(reader.GetString, "Size")
        member val Weight = reader.Optional(reader.GetDecimal, "Weight")
        member val ProductCategoryID = reader.Optional(reader.GetInt32, "ProductCategoryID")
        member val ProductModelID = reader.Optional(reader.GetInt32, "ProductModelID")
        member val Color = reader.Optional(reader.GetString, "Color")
        member __.Read() =
            { ProductID = __.ProductID
              Name = __.Name
              ProductNumber = __.ProductNumber
              StandardCost = __.StandardCost
              ListPrice = __.ListPrice
              SellStartDate = __.SellStartDate
              rowguid = __.rowguid
              ModifiedDate = __.ModifiedDate
              SellEndDate = __.SellEndDate
              DiscontinuedDate = __.DiscontinuedDate
              ThumbNailPhoto = __.ThumbNailPhoto
              ThumbnailPhotoFileName = __.ThumbnailPhotoFileName
              Size = __.Size
              Weight = __.Weight
              ProductCategoryID = __.ProductCategoryID
              ProductModelID = __.ProductModelID
              Color = __.Color }

    [<CLIMutable>]
    type ProductCategory =
        { Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          ProductCategoryID: int
          ParentProductCategoryID: Option<int> }

    type ProductCategoryReader(reader: System.Data.IDataReader) =
        member val Name = reader.Required(reader.GetString, "Name")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member val ProductCategoryID = reader.Required(reader.GetInt32, "ProductCategoryID")
        member val ParentProductCategoryID = reader.Optional(reader.GetInt32, "ParentProductCategoryID")
        member __.Read() =
            { Name = __.Name
              rowguid = __.rowguid
              ModifiedDate = __.ModifiedDate
              ProductCategoryID = __.ProductCategoryID
              ParentProductCategoryID = __.ParentProductCategoryID }

    [<CLIMutable>]
    type ProductDescription =
        { ProductDescriptionID: int
          Description: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductDescriptionReader(reader: System.Data.IDataReader) =
        member val ProductDescriptionID = reader.Required(reader.GetInt32, "ProductDescriptionID")
        member val Description = reader.Required(reader.GetString, "Description")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ProductDescriptionID = __.ProductDescriptionID
              Description = __.Description
              rowguid = __.rowguid
              ModifiedDate = __.ModifiedDate }

    [<CLIMutable>]
    type ProductModel =
        { ProductModelID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          CatalogDescription: Option<System.Xml.Linq.XElement> }

    type ProductModelReader(reader: System.Data.IDataReader) =
        member val ProductModelID = reader.Required(reader.GetInt32, "ProductModelID")
        member val Name = reader.Required(reader.GetString, "Name")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member val CatalogDescription = reader.Optional(reader.GetValue, "CatalogDescription")

    [<CLIMutable>]
    type ProductModelProductDescription =
        { ProductModelID: int
          ProductDescriptionID: int
          Culture: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductModelProductDescriptionReader(reader: System.Data.IDataReader) =
        member val ProductModelID = reader.Required(reader.GetInt32, "ProductModelID")
        member val ProductDescriptionID = reader.Required(reader.GetInt32, "ProductDescriptionID")
        member val Culture = reader.Required(reader.GetString, "Culture")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ProductModelID = __.ProductModelID
              ProductDescriptionID = __.ProductDescriptionID
              Culture = __.Culture
              rowguid = __.rowguid
              ModifiedDate = __.ModifiedDate }

    [<CLIMutable>]
    type SalesOrderDetail =
        { SalesOrderID: int
          SalesOrderDetailID: int
          OrderQty: int16
          ProductID: int
          UnitPrice: decimal
          UnitPriceDiscount: decimal
          LineTotal: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesOrderDetailReader(reader: System.Data.IDataReader) =
        member val SalesOrderID = reader.Required(reader.GetInt32, "SalesOrderID")
        member val SalesOrderDetailID = reader.Required(reader.GetInt32, "SalesOrderDetailID")
        member val OrderQty = reader.Required(reader.GetInt16, "OrderQty")
        member val ProductID = reader.Required(reader.GetInt32, "ProductID")
        member val UnitPrice = reader.Required(reader.GetDecimal, "UnitPrice")
        member val UnitPriceDiscount = reader.Required(reader.GetDecimal, "UnitPriceDiscount")
        member val LineTotal = reader.Required(reader.GetDecimal, "LineTotal")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { SalesOrderID = __.SalesOrderID
              SalesOrderDetailID = __.SalesOrderDetailID
              OrderQty = __.OrderQty
              ProductID = __.ProductID
              UnitPrice = __.UnitPrice
              UnitPriceDiscount = __.UnitPriceDiscount
              LineTotal = __.LineTotal
              rowguid = __.rowguid
              ModifiedDate = __.ModifiedDate }

    [<CLIMutable>]
    type SalesOrderHeader =
        { SalesOrderID: int
          RevisionNumber: byte
          OrderDate: System.DateTime
          DueDate: System.DateTime
          Status: byte
          OnlineOrderFlag: bool
          SalesOrderNumber: string
          CustomerID: int
          SubTotal: decimal
          TaxAmt: decimal
          Freight: decimal
          TotalDue: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          ShipMethod: string
          CreditCardApprovalCode: Option<string>
          Comment: Option<string>
          ShipToAddressID: Option<int>
          BillToAddressID: Option<int>
          PurchaseOrderNumber: Option<string>
          AccountNumber: Option<string>
          ShipDate: Option<System.DateTime> }

    type SalesOrderHeaderReader(reader: System.Data.IDataReader) =
        member val SalesOrderID = reader.Required(reader.GetInt32, "SalesOrderID")
        member val RevisionNumber = reader.Required(reader.GetByte, "RevisionNumber")
        member val OrderDate = reader.Required(reader.GetDateTime, "OrderDate")
        member val DueDate = reader.Required(reader.GetDateTime, "DueDate")
        member val Status = reader.Required(reader.GetByte, "Status")
        member val OnlineOrderFlag = reader.Required(reader.GetBoolean, "OnlineOrderFlag")
        member val SalesOrderNumber = reader.Required(reader.GetString, "SalesOrderNumber")
        member val CustomerID = reader.Required(reader.GetInt32, "CustomerID")
        member val SubTotal = reader.Required(reader.GetDecimal, "SubTotal")
        member val TaxAmt = reader.Required(reader.GetDecimal, "TaxAmt")
        member val Freight = reader.Required(reader.GetDecimal, "Freight")
        member val TotalDue = reader.Required(reader.GetDecimal, "TotalDue")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member val ShipMethod = reader.Required(reader.GetString, "ShipMethod")
        member val CreditCardApprovalCode = reader.Optional(reader.GetString, "CreditCardApprovalCode")
        member val Comment = reader.Optional(reader.GetString, "Comment")
        member val ShipToAddressID = reader.Optional(reader.GetInt32, "ShipToAddressID")
        member val BillToAddressID = reader.Optional(reader.GetInt32, "BillToAddressID")
        member val PurchaseOrderNumber = reader.Optional(reader.GetString, "PurchaseOrderNumber")
        member val AccountNumber = reader.Optional(reader.GetString, "AccountNumber")
        member val ShipDate = reader.Optional(reader.GetDateTime, "ShipDate")
        member __.Read() =
            { SalesOrderID = __.SalesOrderID
              RevisionNumber = __.RevisionNumber
              OrderDate = __.OrderDate
              DueDate = __.DueDate
              Status = __.Status
              OnlineOrderFlag = __.OnlineOrderFlag
              SalesOrderNumber = __.SalesOrderNumber
              CustomerID = __.CustomerID
              SubTotal = __.SubTotal
              TaxAmt = __.TaxAmt
              Freight = __.Freight
              TotalDue = __.TotalDue
              rowguid = __.rowguid
              ModifiedDate = __.ModifiedDate
              ShipMethod = __.ShipMethod
              CreditCardApprovalCode = __.CreditCardApprovalCode
              Comment = __.Comment
              ShipToAddressID = __.ShipToAddressID
              BillToAddressID = __.BillToAddressID
              PurchaseOrderNumber = __.PurchaseOrderNumber
              AccountNumber = __.AccountNumber
              ShipDate = __.ShipDate }

    [<CLIMutable>]
    type vProductAndDescription =
        { ProductID: int
          Name: string
          ProductModel: string
          Culture: string
          Description: string }

    type vProductAndDescriptionReader(reader: System.Data.IDataReader) =
        member val ProductID = reader.Required(reader.GetInt32, "ProductID")
        member val Name = reader.Required(reader.GetString, "Name")
        member val ProductModel = reader.Required(reader.GetString, "ProductModel")
        member val Culture = reader.Required(reader.GetString, "Culture")
        member val Description = reader.Required(reader.GetString, "Description")
        member __.Read() =
            { ProductID = __.ProductID
              Name = __.Name
              ProductModel = __.ProductModel
              Culture = __.Culture
              Description = __.Description }

    [<CLIMutable>]
    type vProductModelCatalogDescription =
        { ProductModelID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          Summary: Option<string>
          Manufacturer: Option<string>
          Copyright: Option<string>
          ProductURL: Option<string>
          WarrantyPeriod: Option<string>
          WarrantyDescription: Option<string>
          NoOfYears: Option<string>
          MaintenanceDescription: Option<string>
          Wheel: Option<string>
          Saddle: Option<string>
          Pedal: Option<string>
          BikeFrame: Option<string>
          Crankset: Option<string>
          PictureAngle: Option<string>
          PictureSize: Option<string>
          ProductPhotoID: Option<string>
          Material: Option<string>
          Color: Option<string>
          ProductLine: Option<string>
          Style: Option<string>
          RiderExperience: Option<string> }

    type vProductModelCatalogDescriptionReader(reader: System.Data.IDataReader) =
        member val ProductModelID = reader.Required(reader.GetInt32, "ProductModelID")
        member val Name = reader.Required(reader.GetString, "Name")
        member val rowguid = reader.Required(reader.GetGuid, "rowguid")
        member val ModifiedDate = reader.Required(reader.GetDateTime, "ModifiedDate")
        member val Summary = reader.Optional(reader.GetString, "Summary")
        member val Manufacturer = reader.Optional(reader.GetString, "Manufacturer")
        member val Copyright = reader.Optional(reader.GetString, "Copyright")
        member val ProductURL = reader.Optional(reader.GetString, "ProductURL")
        member val WarrantyPeriod = reader.Optional(reader.GetString, "WarrantyPeriod")
        member val WarrantyDescription = reader.Optional(reader.GetString, "WarrantyDescription")
        member val NoOfYears = reader.Optional(reader.GetString, "NoOfYears")
        member val MaintenanceDescription = reader.Optional(reader.GetString, "MaintenanceDescription")
        member val Wheel = reader.Optional(reader.GetString, "Wheel")
        member val Saddle = reader.Optional(reader.GetString, "Saddle")
        member val Pedal = reader.Optional(reader.GetString, "Pedal")
        member val BikeFrame = reader.Optional(reader.GetString, "BikeFrame")
        member val Crankset = reader.Optional(reader.GetString, "Crankset")
        member val PictureAngle = reader.Optional(reader.GetString, "PictureAngle")
        member val PictureSize = reader.Optional(reader.GetString, "PictureSize")
        member val ProductPhotoID = reader.Optional(reader.GetString, "ProductPhotoID")
        member val Material = reader.Optional(reader.GetString, "Material")
        member val Color = reader.Optional(reader.GetString, "Color")
        member val ProductLine = reader.Optional(reader.GetString, "ProductLine")
        member val Style = reader.Optional(reader.GetString, "Style")
        member val RiderExperience = reader.Optional(reader.GetString, "RiderExperience")
        member __.Read() =
            { ProductModelID = __.ProductModelID
              Name = __.Name
              rowguid = __.rowguid
              ModifiedDate = __.ModifiedDate
              Summary = __.Summary
              Manufacturer = __.Manufacturer
              Copyright = __.Copyright
              ProductURL = __.ProductURL
              WarrantyPeriod = __.WarrantyPeriod
              WarrantyDescription = __.WarrantyDescription
              NoOfYears = __.NoOfYears
              MaintenanceDescription = __.MaintenanceDescription
              Wheel = __.Wheel
              Saddle = __.Saddle
              Pedal = __.Pedal
              BikeFrame = __.BikeFrame
              Crankset = __.Crankset
              PictureAngle = __.PictureAngle
              PictureSize = __.PictureSize
              ProductPhotoID = __.ProductPhotoID
              Material = __.Material
              Color = __.Color
              ProductLine = __.ProductLine
              Style = __.Style
              RiderExperience = __.RiderExperience }

    [<CLIMutable>]
    type vGetAllCategories =
        { ParentProductCategoryName: string
          ProductCategoryName: Option<string>
          ProductCategoryID: Option<int> }

    type vGetAllCategoriesReader(reader: System.Data.IDataReader) =
        member val ParentProductCategoryName = reader.Required(reader.GetString, "ParentProductCategoryName")
        member val ProductCategoryName = reader.Optional(reader.GetString, "ProductCategoryName")
        member val ProductCategoryID = reader.Optional(reader.GetInt32, "ProductCategoryID")
        member __.Read() =
            { ParentProductCategoryName = __.ParentProductCategoryName
              ProductCategoryName = __.ProductCategoryName
              ProductCategoryID = __.ProductCategoryID }
