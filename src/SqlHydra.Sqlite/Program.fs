open SqlHydra
open SqlHydra.Sqlite
open Argu
open Schema

let sqlHydraId  = "SqlHydra.Sqlite"
let command     = "sqlhydra-sqlite"
let readerType = "System.Data.IDataReader"
let comment     = $"// This code was generated by {sqlHydraId}."

[<EntryPoint>]
let main argv =

    let cfg = 
        let parser = ArgumentParser.Create<Schema.Arguments>(command)
        let args = parser.Parse(argv)

        { 
            Config.ConnectionString = args.GetResult(Arguments.Connection)
            Config.Namespace = args.GetResult(Arguments.Namespace)
            Config.OutputFile = args.GetResult(Arguments.Output)
            Config.IsCLIMutable = args.Contains(Arguments.CLI_Mutable) 
            Config.Readers = 
                if args.Contains(Arguments.Readers) then
                    {
                        IsEnabled = true
                        ReaderType = args.GetResult(Arguments.Readers) |> Option.defaultValue readerType
                    }
                else
                    { 
                        IsEnabled = false
                        ReaderType = readerType
                    }
        }

    let formattedCode = 
        SqliteSchemaProvider.getSchema cfg
        |> SchemaGenerator.generateModule cfg
        |> SchemaGenerator.toFormattedCode cfg comment

    System.IO.File.WriteAllText(cfg.OutputFile, formattedCode)
    0
