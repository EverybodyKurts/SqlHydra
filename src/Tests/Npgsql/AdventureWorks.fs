// This code was generated by `SqlHydra.Npgsql` -- v0.510.0.0.
namespace Npgsql.AdventureWorks

type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getter o)

type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])
        
module humanresources =
    [<CLIMutable>]
    type department =
        { groupname: string
          modifieddate: System.DateTime
          name: string
          departmentid: int }

    type departmentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.groupname = RequiredColumn(reader, getOrdinal, reader.GetString, "groupname")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.departmentid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "departmentid")
        member __.Read() =
            { groupname = __.groupname.Read()
              modifieddate = __.modifieddate.Read()
              name = __.name.Read()
              departmentid = __.departmentid.Read() }

        member __.ReadIfNotNull() =
            if __.departmentid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type employee =
        { hiredate: System.DateTime
          birthdate: System.DateTime
          maritalstatus: string
          sickleavehours: int16
          nationalidnumber: string
          modifieddate: System.DateTime
          currentflag: bool
          loginid: string
          rowguid: System.Guid
          organizationnode: Option<string>
          jobtitle: string
          vacationhours: int16
          salariedflag: bool
          businessentityid: int
          gender: string }

    type employeeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.hiredate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "hiredate")
        member __.birthdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "birthdate")
        member __.maritalstatus = RequiredColumn(reader, getOrdinal, reader.GetString, "maritalstatus")
        member __.sickleavehours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "sickleavehours")
        member __.nationalidnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "nationalidnumber")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.currentflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "currentflag")
        member __.loginid = RequiredColumn(reader, getOrdinal, reader.GetString, "loginid")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.organizationnode = OptionalColumn(reader, getOrdinal, reader.GetString, "organizationnode")
        member __.jobtitle = RequiredColumn(reader, getOrdinal, reader.GetString, "jobtitle")
        member __.vacationhours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "vacationhours")
        member __.salariedflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "salariedflag")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.gender = RequiredColumn(reader, getOrdinal, reader.GetString, "gender")
        member __.Read() =
            { hiredate = __.hiredate.Read()
              birthdate = __.birthdate.Read()
              maritalstatus = __.maritalstatus.Read()
              sickleavehours = __.sickleavehours.Read()
              nationalidnumber = __.nationalidnumber.Read()
              modifieddate = __.modifieddate.Read()
              currentflag = __.currentflag.Read()
              loginid = __.loginid.Read()
              rowguid = __.rowguid.Read()
              organizationnode = __.organizationnode.Read()
              jobtitle = __.jobtitle.Read()
              vacationhours = __.vacationhours.Read()
              salariedflag = __.salariedflag.Read()
              businessentityid = __.businessentityid.Read()
              gender = __.gender.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type employeedepartmenthistory =
        { startdate: System.DateTime
          shiftid: int16
          departmentid: int16
          modifieddate: System.DateTime
          businessentityid: int
          enddate: Option<System.DateTime> }

    type employeedepartmenthistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
        member __.shiftid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "shiftid")
        member __.departmentid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "departmentid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
        member __.Read() =
            { startdate = __.startdate.Read()
              shiftid = __.shiftid.Read()
              departmentid = __.departmentid.Read()
              modifieddate = __.modifieddate.Read()
              businessentityid = __.businessentityid.Read()
              enddate = __.enddate.Read() }

        member __.ReadIfNotNull() =
            if __.startdate.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type employeepayhistory =
        { modifieddate: System.DateTime
          businessentityid: int
          ratechangedate: System.DateTime
          rate: decimal
          payfrequency: int16 }

    type employeepayhistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.ratechangedate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ratechangedate")
        member __.rate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "rate")
        member __.payfrequency = RequiredColumn(reader, getOrdinal, reader.GetInt16, "payfrequency")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              businessentityid = __.businessentityid.Read()
              ratechangedate = __.ratechangedate.Read()
              rate = __.rate.Read()
              payfrequency = __.payfrequency.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type jobcandidate =
        { modifieddate: System.DateTime
          resume: Option<string>
          businessentityid: Option<int>
          jobcandidateid: int }

    type jobcandidateReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.resume = OptionalColumn(reader, getOrdinal, reader.GetString, "resume")
        member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.jobcandidateid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "jobcandidateid")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              resume = __.resume.Read()
              businessentityid = __.businessentityid.Read()
              jobcandidateid = __.jobcandidateid.Read() }

        member __.ReadIfNotNull() =
            if __.jobcandidateid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type shift =
        { shiftid: int
          modifieddate: System.DateTime
          endtime: System.TimeSpan
          starttime: System.TimeSpan
          name: string }

    type shiftReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.shiftid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shiftid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.endtime = RequiredColumn(reader, getOrdinal, reader.GetTimeSpan, "endtime")
        member __.starttime = RequiredColumn(reader, getOrdinal, reader.GetTimeSpan, "starttime")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.Read() =
            { shiftid = __.shiftid.Read()
              modifieddate = __.modifieddate.Read()
              endtime = __.endtime.Read()
              starttime = __.starttime.Read()
              name = __.name.Read() }

        member __.ReadIfNotNull() =
            if __.shiftid.IsNull() then None else Some(__.Read())

module person =
    [<CLIMutable>]
    type address =
        { addressline1: string
          city: string
          addressline2: Option<string>
          rowguid: System.Guid
          spatiallocation: Option<string>
          stateprovinceid: int
          addressid: int
          modifieddate: System.DateTime
          postalcode: string }

    type addressReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.addressline1 = RequiredColumn(reader, getOrdinal, reader.GetString, "addressline1")
        member __.city = RequiredColumn(reader, getOrdinal, reader.GetString, "city")
        member __.addressline2 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline2")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.spatiallocation = OptionalColumn(reader, getOrdinal, reader.GetString, "spatiallocation")
        member __.stateprovinceid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "stateprovinceid")
        member __.addressid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "addressid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.postalcode = RequiredColumn(reader, getOrdinal, reader.GetString, "postalcode")
        member __.Read() =
            { addressline1 = __.addressline1.Read()
              city = __.city.Read()
              addressline2 = __.addressline2.Read()
              rowguid = __.rowguid.Read()
              spatiallocation = __.spatiallocation.Read()
              stateprovinceid = __.stateprovinceid.Read()
              addressid = __.addressid.Read()
              modifieddate = __.modifieddate.Read()
              postalcode = __.postalcode.Read() }

        member __.ReadIfNotNull() =
            if __.addressid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type addresstype =
        { rowguid: System.Guid
          modifieddate: System.DateTime
          name: string
          addresstypeid: int }

    type addresstypeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.addresstypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "addresstypeid")
        member __.Read() =
            { rowguid = __.rowguid.Read()
              modifieddate = __.modifieddate.Read()
              name = __.name.Read()
              addresstypeid = __.addresstypeid.Read() }

        member __.ReadIfNotNull() =
            if __.addresstypeid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type businessentity =
        { businessentityid: int
          modifieddate: System.DateTime
          rowguid: System.Guid }

    type businessentityReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              modifieddate = __.modifieddate.Read()
              rowguid = __.rowguid.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type businessentityaddress =
        { businessentityid: int
          modifieddate: System.DateTime
          addresstypeid: int
          rowguid: System.Guid
          addressid: int }

    type businessentityaddressReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.addresstypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "addresstypeid")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.addressid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "addressid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              modifieddate = __.modifieddate.Read()
              addresstypeid = __.addresstypeid.Read()
              rowguid = __.rowguid.Read()
              addressid = __.addressid.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type businessentitycontact =
        { modifieddate: System.DateTime
          businessentityid: int
          personid: int
          rowguid: System.Guid
          contacttypeid: int }

    type businessentitycontactReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.personid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "personid")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.contacttypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "contacttypeid")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              businessentityid = __.businessentityid.Read()
              personid = __.personid.Read()
              rowguid = __.rowguid.Read()
              contacttypeid = __.contacttypeid.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type contacttype =
        { modifieddate: System.DateTime
          name: string
          contacttypeid: int }

    type contacttypeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.contacttypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "contacttypeid")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              name = __.name.Read()
              contacttypeid = __.contacttypeid.Read() }

        member __.ReadIfNotNull() =
            if __.contacttypeid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type countryregion =
        { name: string
          modifieddate: System.DateTime
          countryregioncode: string }

    type countryregionReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
        member __.Read() =
            { name = __.name.Read()
              modifieddate = __.modifieddate.Read()
              countryregioncode = __.countryregioncode.Read() }

        member __.ReadIfNotNull() =
            if __.countryregioncode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type emailaddress =
        { businessentityid: int
          modifieddate: System.DateTime
          emailaddress: Option<string>
          rowguid: System.Guid
          emailaddressid: int }

    type emailaddressReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.emailaddressid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "emailaddressid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              modifieddate = __.modifieddate.Read()
              emailaddress = __.emailaddress.Read()
              rowguid = __.rowguid.Read()
              emailaddressid = __.emailaddressid.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type password =
        { passwordsalt: string
          rowguid: System.Guid
          passwordhash: string
          businessentityid: int
          modifieddate: System.DateTime }

    type passwordReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.passwordsalt = RequiredColumn(reader, getOrdinal, reader.GetString, "passwordsalt")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.passwordhash = RequiredColumn(reader, getOrdinal, reader.GetString, "passwordhash")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.Read() =
            { passwordsalt = __.passwordsalt.Read()
              rowguid = __.rowguid.Read()
              passwordhash = __.passwordhash.Read()
              businessentityid = __.businessentityid.Read()
              modifieddate = __.modifieddate.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type person =
        { additionalcontactinfo: Option<string>
          suffix: Option<string>
          lastname: string
          persontype: string
          modifieddate: System.DateTime
          namestyle: bool
          title: Option<string>
          middlename: Option<string>
          rowguid: System.Guid
          demographics: Option<string>
          firstname: string
          emailpromotion: int
          businessentityid: int }

    type personReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.additionalcontactinfo = OptionalColumn(reader, getOrdinal, reader.GetString, "additionalcontactinfo")
        member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
        member __.lastname = RequiredColumn(reader, getOrdinal, reader.GetString, "lastname")
        member __.persontype = RequiredColumn(reader, getOrdinal, reader.GetString, "persontype")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.namestyle = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "namestyle")
        member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
        member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.demographics = OptionalColumn(reader, getOrdinal, reader.GetString, "demographics")
        member __.firstname = RequiredColumn(reader, getOrdinal, reader.GetString, "firstname")
        member __.emailpromotion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "emailpromotion")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.Read() =
            { additionalcontactinfo = __.additionalcontactinfo.Read()
              suffix = __.suffix.Read()
              lastname = __.lastname.Read()
              persontype = __.persontype.Read()
              modifieddate = __.modifieddate.Read()
              namestyle = __.namestyle.Read()
              title = __.title.Read()
              middlename = __.middlename.Read()
              rowguid = __.rowguid.Read()
              demographics = __.demographics.Read()
              firstname = __.firstname.Read()
              emailpromotion = __.emailpromotion.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type personphone =
        { businessentityid: int
          phonenumber: string
          modifieddate: System.DateTime
          phonenumbertypeid: int }

    type personphoneReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.phonenumber = RequiredColumn(reader, getOrdinal, reader.GetString, "phonenumber")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.phonenumbertypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "phonenumbertypeid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              phonenumber = __.phonenumber.Read()
              modifieddate = __.modifieddate.Read()
              phonenumbertypeid = __.phonenumbertypeid.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type phonenumbertype =
        { phonenumbertypeid: int
          name: string
          modifieddate: System.DateTime }

    type phonenumbertypeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.phonenumbertypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "phonenumbertypeid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.Read() =
            { phonenumbertypeid = __.phonenumbertypeid.Read()
              name = __.name.Read()
              modifieddate = __.modifieddate.Read() }

        member __.ReadIfNotNull() =
            if __.phonenumbertypeid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type stateprovince =
        { name: string
          stateprovinceid: int
          territoryid: int
          stateprovincecode: string
          isonlystateprovinceflag: bool
          countryregioncode: string
          modifieddate: System.DateTime
          rowguid: System.Guid }

    type stateprovinceReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.stateprovinceid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "stateprovinceid")
        member __.territoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
        member __.stateprovincecode = RequiredColumn(reader, getOrdinal, reader.GetString, "stateprovincecode")
        member __.isonlystateprovinceflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "isonlystateprovinceflag")
        member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.Read() =
            { name = __.name.Read()
              stateprovinceid = __.stateprovinceid.Read()
              territoryid = __.territoryid.Read()
              stateprovincecode = __.stateprovincecode.Read()
              isonlystateprovinceflag = __.isonlystateprovinceflag.Read()
              countryregioncode = __.countryregioncode.Read()
              modifieddate = __.modifieddate.Read()
              rowguid = __.rowguid.Read() }

        member __.ReadIfNotNull() =
            if __.stateprovinceid.IsNull() then None else Some(__.Read())

module production =
    [<CLIMutable>]
    type billofmaterials =
        { enddate: Option<System.DateTime>
          modifieddate: System.DateTime
          billofmaterialsid: int
          unitmeasurecode: string
          productassemblyid: Option<int>
          componentid: int
          startdate: System.DateTime
          bomlevel: int16
          perassemblyqty: decimal }

    type billofmaterialsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.billofmaterialsid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "billofmaterialsid")
        member __.unitmeasurecode = RequiredColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
        member __.productassemblyid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productassemblyid")
        member __.componentid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "componentid")
        member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
        member __.bomlevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "bomlevel")
        member __.perassemblyqty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "perassemblyqty")
        member __.Read() =
            { enddate = __.enddate.Read()
              modifieddate = __.modifieddate.Read()
              billofmaterialsid = __.billofmaterialsid.Read()
              unitmeasurecode = __.unitmeasurecode.Read()
              productassemblyid = __.productassemblyid.Read()
              componentid = __.componentid.Read()
              startdate = __.startdate.Read()
              bomlevel = __.bomlevel.Read()
              perassemblyqty = __.perassemblyqty.Read() }

        member __.ReadIfNotNull() =
            if __.billofmaterialsid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type culture =
        { modifieddate: System.DateTime
          name: string
          cultureid: string }

    type cultureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.cultureid = RequiredColumn(reader, getOrdinal, reader.GetString, "cultureid")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              name = __.name.Read()
              cultureid = __.cultureid.Read() }

        member __.ReadIfNotNull() =
            if __.cultureid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type document =
        { revision: string
          fileextension: Option<string>
          status: int16
          title: string
          modifieddate: System.DateTime
          owner: int
          rowguid: System.Guid
          filename: string
          documentnode: string
          changenumber: int
          documentsummary: Option<string>
          document: Option<byte []>
          folderflag: bool }

    type documentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.revision = RequiredColumn(reader, getOrdinal, reader.GetString, "revision")
        member __.fileextension = OptionalColumn(reader, getOrdinal, reader.GetString, "fileextension")
        member __.status = RequiredColumn(reader, getOrdinal, reader.GetInt16, "status")
        member __.title = RequiredColumn(reader, getOrdinal, reader.GetString, "title")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.owner = RequiredColumn(reader, getOrdinal, reader.GetInt32, "owner")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.filename = RequiredColumn(reader, getOrdinal, reader.GetString, "filename")
        member __.documentnode = RequiredColumn(reader, getOrdinal, reader.GetString, "documentnode")
        member __.changenumber = RequiredColumn(reader, getOrdinal, reader.GetInt32, "changenumber")
        member __.documentsummary = OptionalColumn(reader, getOrdinal, reader.GetString, "documentsummary")
        member __.document = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "document")
        member __.folderflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "folderflag")
        member __.Read() =
            { revision = __.revision.Read()
              fileextension = __.fileextension.Read()
              status = __.status.Read()
              title = __.title.Read()
              modifieddate = __.modifieddate.Read()
              owner = __.owner.Read()
              rowguid = __.rowguid.Read()
              filename = __.filename.Read()
              documentnode = __.documentnode.Read()
              changenumber = __.changenumber.Read()
              documentsummary = __.documentsummary.Read()
              document = __.document.Read()
              folderflag = __.folderflag.Read() }

        member __.ReadIfNotNull() =
            if __.documentnode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type illustration =
        { diagram: Option<string>
          modifieddate: System.DateTime
          illustrationid: int }

    type illustrationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.diagram = OptionalColumn(reader, getOrdinal, reader.GetString, "diagram")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.illustrationid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "illustrationid")
        member __.Read() =
            { diagram = __.diagram.Read()
              modifieddate = __.modifieddate.Read()
              illustrationid = __.illustrationid.Read() }

        member __.ReadIfNotNull() =
            if __.illustrationid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type location =
        { locationid: int
          modifieddate: System.DateTime
          costrate: decimal
          availability: decimal
          name: string }

    type locationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.locationid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "locationid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.costrate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "costrate")
        member __.availability = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "availability")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.Read() =
            { locationid = __.locationid.Read()
              modifieddate = __.modifieddate.Read()
              costrate = __.costrate.Read()
              availability = __.availability.Read()
              name = __.name.Read() }

        member __.ReadIfNotNull() =
            if __.locationid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type product =
        { finishedgoodsflag: bool
          productmodelid: Option<int>
          size: Option<string>
          sizeunitmeasurecode: Option<string>
          productid: int
          sellenddate: Option<System.DateTime>
          standardcost: decimal
          daystomanufacture: int
          sellstartdate: System.DateTime
          modifieddate: System.DateTime
          ``class``: Option<string>
          color: Option<string>
          weightunitmeasurecode: Option<string>
          productsubcategoryid: Option<int>
          name: string
          style: Option<string>
          makeflag: bool
          productline: Option<string>
          weight: Option<decimal>
          productnumber: string
          rowguid: System.Guid
          listprice: decimal
          discontinueddate: Option<System.DateTime>
          safetystocklevel: int16
          reorderpoint: int16 }

    type productReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.finishedgoodsflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "finishedgoodsflag")
        member __.productmodelid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
        member __.size = OptionalColumn(reader, getOrdinal, reader.GetString, "size")
        member __.sizeunitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "sizeunitmeasurecode")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.sellenddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "sellenddate")
        member __.standardcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "standardcost")
        member __.daystomanufacture = RequiredColumn(reader, getOrdinal, reader.GetInt32, "daystomanufacture")
        member __.sellstartdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "sellstartdate")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.``class`` = OptionalColumn(reader, getOrdinal, reader.GetString, "class")
        member __.color = OptionalColumn(reader, getOrdinal, reader.GetString, "color")
        member __.weightunitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "weightunitmeasurecode")
        member __.productsubcategoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productsubcategoryid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.style = OptionalColumn(reader, getOrdinal, reader.GetString, "style")
        member __.makeflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "makeflag")
        member __.productline = OptionalColumn(reader, getOrdinal, reader.GetString, "productline")
        member __.weight = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "weight")
        member __.productnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "productnumber")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.listprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "listprice")
        member __.discontinueddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "discontinueddate")
        member __.safetystocklevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "safetystocklevel")
        member __.reorderpoint = RequiredColumn(reader, getOrdinal, reader.GetInt16, "reorderpoint")
        member __.Read() =
            { finishedgoodsflag = __.finishedgoodsflag.Read()
              productmodelid = __.productmodelid.Read()
              size = __.size.Read()
              sizeunitmeasurecode = __.sizeunitmeasurecode.Read()
              productid = __.productid.Read()
              sellenddate = __.sellenddate.Read()
              standardcost = __.standardcost.Read()
              daystomanufacture = __.daystomanufacture.Read()
              sellstartdate = __.sellstartdate.Read()
              modifieddate = __.modifieddate.Read()
              ``class`` = __.``class``.Read()
              color = __.color.Read()
              weightunitmeasurecode = __.weightunitmeasurecode.Read()
              productsubcategoryid = __.productsubcategoryid.Read()
              name = __.name.Read()
              style = __.style.Read()
              makeflag = __.makeflag.Read()
              productline = __.productline.Read()
              weight = __.weight.Read()
              productnumber = __.productnumber.Read()
              rowguid = __.rowguid.Read()
              listprice = __.listprice.Read()
              discontinueddate = __.discontinueddate.Read()
              safetystocklevel = __.safetystocklevel.Read()
              reorderpoint = __.reorderpoint.Read() }

        member __.ReadIfNotNull() =
            if __.productid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productcategory =
        { name: string
          rowguid: System.Guid
          modifieddate: System.DateTime
          productcategoryid: int }

    type productcategoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.productcategoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productcategoryid")
        member __.Read() =
            { name = __.name.Read()
              rowguid = __.rowguid.Read()
              modifieddate = __.modifieddate.Read()
              productcategoryid = __.productcategoryid.Read() }

        member __.ReadIfNotNull() =
            if __.productcategoryid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productcosthistory =
        { startdate: System.DateTime
          enddate: Option<System.DateTime>
          standardcost: decimal
          modifieddate: System.DateTime
          productid: int }

    type productcosthistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
        member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
        member __.standardcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "standardcost")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.Read() =
            { startdate = __.startdate.Read()
              enddate = __.enddate.Read()
              standardcost = __.standardcost.Read()
              modifieddate = __.modifieddate.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull() =
            if __.startdate.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productdescription =
        { productdescriptionid: int
          description: string
          modifieddate: System.DateTime
          rowguid: System.Guid }

    type productdescriptionReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productdescriptionid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productdescriptionid")
        member __.description = RequiredColumn(reader, getOrdinal, reader.GetString, "description")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.Read() =
            { productdescriptionid = __.productdescriptionid.Read()
              description = __.description.Read()
              modifieddate = __.modifieddate.Read()
              rowguid = __.rowguid.Read() }

        member __.ReadIfNotNull() =
            if __.productdescriptionid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productdocument =
        { modifieddate: System.DateTime
          documentnode: string
          productid: int }

    type productdocumentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.documentnode = RequiredColumn(reader, getOrdinal, reader.GetString, "documentnode")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              documentnode = __.documentnode.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull() =
            if __.documentnode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productinventory =
        { rowguid: System.Guid
          productid: int
          quantity: int16
          modifieddate: System.DateTime
          shelf: string
          bin: int16
          locationid: int16 }

    type productinventoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt16, "quantity")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.shelf = RequiredColumn(reader, getOrdinal, reader.GetString, "shelf")
        member __.bin = RequiredColumn(reader, getOrdinal, reader.GetInt16, "bin")
        member __.locationid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "locationid")
        member __.Read() =
            { rowguid = __.rowguid.Read()
              productid = __.productid.Read()
              quantity = __.quantity.Read()
              modifieddate = __.modifieddate.Read()
              shelf = __.shelf.Read()
              bin = __.bin.Read()
              locationid = __.locationid.Read() }

        member __.ReadIfNotNull() =
            if __.productid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productlistpricehistory =
        { enddate: Option<System.DateTime>
          listprice: decimal
          startdate: System.DateTime
          productid: int
          modifieddate: System.DateTime }

    type productlistpricehistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
        member __.listprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "listprice")
        member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.Read() =
            { enddate = __.enddate.Read()
              listprice = __.listprice.Read()
              startdate = __.startdate.Read()
              productid = __.productid.Read()
              modifieddate = __.modifieddate.Read() }

        member __.ReadIfNotNull() =
            if __.startdate.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productmodel =
        { modifieddate: System.DateTime
          rowguid: System.Guid
          productmodelid: int
          name: string
          catalogdescription: Option<string>
          instructions: Option<string> }

    type productmodelReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.productmodelid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.catalogdescription = OptionalColumn(reader, getOrdinal, reader.GetString, "catalogdescription")
        member __.instructions = OptionalColumn(reader, getOrdinal, reader.GetString, "instructions")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              rowguid = __.rowguid.Read()
              productmodelid = __.productmodelid.Read()
              name = __.name.Read()
              catalogdescription = __.catalogdescription.Read()
              instructions = __.instructions.Read() }

        member __.ReadIfNotNull() =
            if __.productmodelid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productmodelillustration =
        { modifieddate: System.DateTime
          illustrationid: int
          productmodelid: int }

    type productmodelillustrationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.illustrationid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "illustrationid")
        member __.productmodelid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              illustrationid = __.illustrationid.Read()
              productmodelid = __.productmodelid.Read() }

        member __.ReadIfNotNull() =
            if __.illustrationid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productmodelproductdescriptionculture =
        { productmodelid: int
          modifieddate: System.DateTime
          cultureid: string
          productdescriptionid: int }

    type productmodelproductdescriptioncultureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productmodelid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.cultureid = RequiredColumn(reader, getOrdinal, reader.GetString, "cultureid")
        member __.productdescriptionid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productdescriptionid")
        member __.Read() =
            { productmodelid = __.productmodelid.Read()
              modifieddate = __.modifieddate.Read()
              cultureid = __.cultureid.Read()
              productdescriptionid = __.productdescriptionid.Read() }

        member __.ReadIfNotNull() =
            if __.productmodelid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productphoto =
        { productphotoid: int
          largephotofilename: Option<string>
          modifieddate: System.DateTime
          thumbnailphotofilename: Option<string>
          largephoto: Option<byte []>
          thumbnailphoto: Option<byte []> }

    type productphotoReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productphotoid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productphotoid")
        member __.largephotofilename = OptionalColumn(reader, getOrdinal, reader.GetString, "largephotofilename")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.thumbnailphotofilename = OptionalColumn(reader, getOrdinal, reader.GetString, "thumbnailphotofilename")
        member __.largephoto = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "largephoto")
        member __.thumbnailphoto = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "thumbnailphoto")
        member __.Read() =
            { productphotoid = __.productphotoid.Read()
              largephotofilename = __.largephotofilename.Read()
              modifieddate = __.modifieddate.Read()
              thumbnailphotofilename = __.thumbnailphotofilename.Read()
              largephoto = __.largephoto.Read()
              thumbnailphoto = __.thumbnailphoto.Read() }

        member __.ReadIfNotNull() =
            if __.productphotoid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productproductphoto =
        { productid: int
          modifieddate: System.DateTime
          primary: bool
          productphotoid: int }

    type productproductphotoReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.primary = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "primary")
        member __.productphotoid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productphotoid")
        member __.Read() =
            { productid = __.productid.Read()
              modifieddate = __.modifieddate.Read()
              primary = __.primary.Read()
              productphotoid = __.productphotoid.Read() }

        member __.ReadIfNotNull() =
            if __.productid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productreview =
        { comments: Option<string>
          modifieddate: System.DateTime
          productid: int
          reviewdate: System.DateTime
          reviewername: string
          rating: int
          emailaddress: string
          productreviewid: int }

    type productreviewReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.comments = OptionalColumn(reader, getOrdinal, reader.GetString, "comments")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.reviewdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "reviewdate")
        member __.reviewername = RequiredColumn(reader, getOrdinal, reader.GetString, "reviewername")
        member __.rating = RequiredColumn(reader, getOrdinal, reader.GetInt32, "rating")
        member __.emailaddress = RequiredColumn(reader, getOrdinal, reader.GetString, "emailaddress")
        member __.productreviewid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productreviewid")
        member __.Read() =
            { comments = __.comments.Read()
              modifieddate = __.modifieddate.Read()
              productid = __.productid.Read()
              reviewdate = __.reviewdate.Read()
              reviewername = __.reviewername.Read()
              rating = __.rating.Read()
              emailaddress = __.emailaddress.Read()
              productreviewid = __.productreviewid.Read() }

        member __.ReadIfNotNull() =
            if __.productreviewid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productsubcategory =
        { productsubcategoryid: int
          modifieddate: System.DateTime
          rowguid: System.Guid
          name: string
          productcategoryid: int }

    type productsubcategoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productsubcategoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productsubcategoryid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.productcategoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productcategoryid")
        member __.Read() =
            { productsubcategoryid = __.productsubcategoryid.Read()
              modifieddate = __.modifieddate.Read()
              rowguid = __.rowguid.Read()
              name = __.name.Read()
              productcategoryid = __.productcategoryid.Read() }

        member __.ReadIfNotNull() =
            if __.productsubcategoryid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type scrapreason =
        { name: string
          modifieddate: System.DateTime
          scrapreasonid: int }

    type scrapreasonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.scrapreasonid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "scrapreasonid")
        member __.Read() =
            { name = __.name.Read()
              modifieddate = __.modifieddate.Read()
              scrapreasonid = __.scrapreasonid.Read() }

        member __.ReadIfNotNull() =
            if __.scrapreasonid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type transactionhistory =
        { productid: int
          referenceorderlineid: int
          referenceorderid: int
          actualcost: decimal
          quantity: int
          transactiondate: System.DateTime
          transactionid: int
          modifieddate: System.DateTime
          transactiontype: string }

    type transactionhistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.referenceorderlineid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "referenceorderlineid")
        member __.referenceorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "referenceorderid")
        member __.actualcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
        member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "quantity")
        member __.transactiondate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "transactiondate")
        member __.transactionid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "transactionid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.transactiontype = RequiredColumn(reader, getOrdinal, reader.GetString, "transactiontype")
        member __.Read() =
            { productid = __.productid.Read()
              referenceorderlineid = __.referenceorderlineid.Read()
              referenceorderid = __.referenceorderid.Read()
              actualcost = __.actualcost.Read()
              quantity = __.quantity.Read()
              transactiondate = __.transactiondate.Read()
              transactionid = __.transactionid.Read()
              modifieddate = __.modifieddate.Read()
              transactiontype = __.transactiontype.Read() }

        member __.ReadIfNotNull() =
            if __.transactionid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type transactionhistoryarchive =
        { referenceorderid: int
          referenceorderlineid: int
          productid: int
          quantity: int
          actualcost: decimal
          modifieddate: System.DateTime
          transactionid: int
          transactiondate: System.DateTime
          transactiontype: string }

    type transactionhistoryarchiveReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.referenceorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "referenceorderid")
        member __.referenceorderlineid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "referenceorderlineid")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "quantity")
        member __.actualcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.transactionid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "transactionid")
        member __.transactiondate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "transactiondate")
        member __.transactiontype = RequiredColumn(reader, getOrdinal, reader.GetString, "transactiontype")
        member __.Read() =
            { referenceorderid = __.referenceorderid.Read()
              referenceorderlineid = __.referenceorderlineid.Read()
              productid = __.productid.Read()
              quantity = __.quantity.Read()
              actualcost = __.actualcost.Read()
              modifieddate = __.modifieddate.Read()
              transactionid = __.transactionid.Read()
              transactiondate = __.transactiondate.Read()
              transactiontype = __.transactiontype.Read() }

        member __.ReadIfNotNull() =
            if __.transactionid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type unitmeasure =
        { unitmeasurecode: string
          modifieddate: System.DateTime
          name: string }

    type unitmeasureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.unitmeasurecode = RequiredColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.Read() =
            { unitmeasurecode = __.unitmeasurecode.Read()
              modifieddate = __.modifieddate.Read()
              name = __.name.Read() }

        member __.ReadIfNotNull() =
            if __.unitmeasurecode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type workorder =
        { duedate: System.DateTime
          enddate: Option<System.DateTime>
          modifieddate: System.DateTime
          orderqty: int
          productid: int
          startdate: System.DateTime
          workorderid: int
          scrapreasonid: Option<int16>
          scrappedqty: int16 }

    type workorderReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.duedate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "duedate")
        member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.orderqty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "orderqty")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
        member __.workorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "workorderid")
        member __.scrapreasonid = OptionalColumn(reader, getOrdinal, reader.GetInt16, "scrapreasonid")
        member __.scrappedqty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "scrappedqty")
        member __.Read() =
            { duedate = __.duedate.Read()
              enddate = __.enddate.Read()
              modifieddate = __.modifieddate.Read()
              orderqty = __.orderqty.Read()
              productid = __.productid.Read()
              startdate = __.startdate.Read()
              workorderid = __.workorderid.Read()
              scrapreasonid = __.scrapreasonid.Read()
              scrappedqty = __.scrappedqty.Read() }

        member __.ReadIfNotNull() =
            if __.workorderid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type workorderrouting =
        { scheduledenddate: System.DateTime
          workorderid: int
          actualresourcehrs: Option<decimal>
          scheduledstartdate: System.DateTime
          actualcost: Option<decimal>
          modifieddate: System.DateTime
          actualstartdate: Option<System.DateTime>
          actualenddate: Option<System.DateTime>
          plannedcost: decimal
          locationid: int16
          operationsequence: int16
          productid: int }

    type workorderroutingReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.scheduledenddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "scheduledenddate")
        member __.workorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "workorderid")
        member __.actualresourcehrs = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "actualresourcehrs")
        member __.scheduledstartdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "scheduledstartdate")
        member __.actualcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.actualstartdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "actualstartdate")
        member __.actualenddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "actualenddate")
        member __.plannedcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "plannedcost")
        member __.locationid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "locationid")
        member __.operationsequence = RequiredColumn(reader, getOrdinal, reader.GetInt16, "operationsequence")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.Read() =
            { scheduledenddate = __.scheduledenddate.Read()
              workorderid = __.workorderid.Read()
              actualresourcehrs = __.actualresourcehrs.Read()
              scheduledstartdate = __.scheduledstartdate.Read()
              actualcost = __.actualcost.Read()
              modifieddate = __.modifieddate.Read()
              actualstartdate = __.actualstartdate.Read()
              actualenddate = __.actualenddate.Read()
              plannedcost = __.plannedcost.Read()
              locationid = __.locationid.Read()
              operationsequence = __.operationsequence.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull() =
            if __.workorderid.IsNull() then None else Some(__.Read())

module purchasing =
    [<CLIMutable>]
    type productvendor =
        { minorderqty: int
          maxorderqty: int
          unitmeasurecode: string
          averageleadtime: int
          standardprice: decimal
          businessentityid: int
          lastreceiptdate: Option<System.DateTime>
          onorderqty: Option<int>
          productid: int
          lastreceiptcost: Option<decimal>
          modifieddate: System.DateTime }

    type productvendorReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.minorderqty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "minorderqty")
        member __.maxorderqty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "maxorderqty")
        member __.unitmeasurecode = RequiredColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
        member __.averageleadtime = RequiredColumn(reader, getOrdinal, reader.GetInt32, "averageleadtime")
        member __.standardprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "standardprice")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.lastreceiptdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "lastreceiptdate")
        member __.onorderqty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "onorderqty")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.lastreceiptcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "lastreceiptcost")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.Read() =
            { minorderqty = __.minorderqty.Read()
              maxorderqty = __.maxorderqty.Read()
              unitmeasurecode = __.unitmeasurecode.Read()
              averageleadtime = __.averageleadtime.Read()
              standardprice = __.standardprice.Read()
              businessentityid = __.businessentityid.Read()
              lastreceiptdate = __.lastreceiptdate.Read()
              onorderqty = __.onorderqty.Read()
              productid = __.productid.Read()
              lastreceiptcost = __.lastreceiptcost.Read()
              modifieddate = __.modifieddate.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type purchaseorderdetail =
        { unitprice: decimal
          rejectedqty: decimal
          purchaseorderid: int
          productid: int
          modifieddate: System.DateTime
          receivedqty: decimal
          duedate: System.DateTime
          orderqty: int16
          purchaseorderdetailid: int }

    type purchaseorderdetailReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.unitprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "unitprice")
        member __.rejectedqty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "rejectedqty")
        member __.purchaseorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "purchaseorderid")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.receivedqty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "receivedqty")
        member __.duedate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "duedate")
        member __.orderqty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "orderqty")
        member __.purchaseorderdetailid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "purchaseorderdetailid")
        member __.Read() =
            { unitprice = __.unitprice.Read()
              rejectedqty = __.rejectedqty.Read()
              purchaseorderid = __.purchaseorderid.Read()
              productid = __.productid.Read()
              modifieddate = __.modifieddate.Read()
              receivedqty = __.receivedqty.Read()
              duedate = __.duedate.Read()
              orderqty = __.orderqty.Read()
              purchaseorderdetailid = __.purchaseorderdetailid.Read() }

        member __.ReadIfNotNull() =
            if __.purchaseorderid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type purchaseorderheader =
        { revisionnumber: int16
          modifieddate: System.DateTime
          status: int16
          employeeid: int
          taxamt: decimal
          shipdate: Option<System.DateTime>
          orderdate: System.DateTime
          freight: decimal
          vendorid: int
          subtotal: decimal
          purchaseorderid: int
          shipmethodid: int }

    type purchaseorderheaderReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.revisionnumber = RequiredColumn(reader, getOrdinal, reader.GetInt16, "revisionnumber")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.status = RequiredColumn(reader, getOrdinal, reader.GetInt16, "status")
        member __.employeeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "employeeid")
        member __.taxamt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "taxamt")
        member __.shipdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "shipdate")
        member __.orderdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "orderdate")
        member __.freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "freight")
        member __.vendorid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "vendorid")
        member __.subtotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "subtotal")
        member __.purchaseorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "purchaseorderid")
        member __.shipmethodid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shipmethodid")
        member __.Read() =
            { revisionnumber = __.revisionnumber.Read()
              modifieddate = __.modifieddate.Read()
              status = __.status.Read()
              employeeid = __.employeeid.Read()
              taxamt = __.taxamt.Read()
              shipdate = __.shipdate.Read()
              orderdate = __.orderdate.Read()
              freight = __.freight.Read()
              vendorid = __.vendorid.Read()
              subtotal = __.subtotal.Read()
              purchaseorderid = __.purchaseorderid.Read()
              shipmethodid = __.shipmethodid.Read() }

        member __.ReadIfNotNull() =
            if __.purchaseorderid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type shipmethod =
        { rowguid: System.Guid
          shipmethodid: int
          modifieddate: System.DateTime
          name: string
          shipbase: decimal
          shiprate: decimal }

    type shipmethodReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.shipmethodid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shipmethodid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.shipbase = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "shipbase")
        member __.shiprate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "shiprate")
        member __.Read() =
            { rowguid = __.rowguid.Read()
              shipmethodid = __.shipmethodid.Read()
              modifieddate = __.modifieddate.Read()
              name = __.name.Read()
              shipbase = __.shipbase.Read()
              shiprate = __.shiprate.Read() }

        member __.ReadIfNotNull() =
            if __.shipmethodid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vendor =
        { purchasingwebserviceurl: Option<string>
          modifieddate: System.DateTime
          accountnumber: string
          name: string
          creditrating: int16
          activeflag: bool
          preferredvendorstatus: bool
          businessentityid: int }

    type vendorReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.purchasingwebserviceurl = OptionalColumn(reader, getOrdinal, reader.GetString, "purchasingwebserviceurl")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.accountnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "accountnumber")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.creditrating = RequiredColumn(reader, getOrdinal, reader.GetInt16, "creditrating")
        member __.activeflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "activeflag")
        member __.preferredvendorstatus = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "preferredvendorstatus")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.Read() =
            { purchasingwebserviceurl = __.purchasingwebserviceurl.Read()
              modifieddate = __.modifieddate.Read()
              accountnumber = __.accountnumber.Read()
              name = __.name.Read()
              creditrating = __.creditrating.Read()
              activeflag = __.activeflag.Read()
              preferredvendorstatus = __.preferredvendorstatus.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

module sales =
    [<CLIMutable>]
    type countryregioncurrency =
        { modifieddate: System.DateTime
          currencycode: string
          countryregioncode: string }

    type countryregioncurrencyReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.currencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "currencycode")
        member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              currencycode = __.currencycode.Read()
              countryregioncode = __.countryregioncode.Read() }

        member __.ReadIfNotNull() =
            if __.currencycode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type creditcard =
        { modifieddate: System.DateTime
          creditcardid: int
          expyear: int16
          expmonth: int16
          cardnumber: string
          cardtype: string }

    type creditcardReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.creditcardid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "creditcardid")
        member __.expyear = RequiredColumn(reader, getOrdinal, reader.GetInt16, "expyear")
        member __.expmonth = RequiredColumn(reader, getOrdinal, reader.GetInt16, "expmonth")
        member __.cardnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "cardnumber")
        member __.cardtype = RequiredColumn(reader, getOrdinal, reader.GetString, "cardtype")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              creditcardid = __.creditcardid.Read()
              expyear = __.expyear.Read()
              expmonth = __.expmonth.Read()
              cardnumber = __.cardnumber.Read()
              cardtype = __.cardtype.Read() }

        member __.ReadIfNotNull() =
            if __.creditcardid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type currency =
        { name: string
          modifieddate: System.DateTime
          currencycode: string }

    type currencyReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.currencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "currencycode")
        member __.Read() =
            { name = __.name.Read()
              modifieddate = __.modifieddate.Read()
              currencycode = __.currencycode.Read() }

        member __.ReadIfNotNull() =
            if __.currencycode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type currencyrate =
        { currencyratedate: System.DateTime
          tocurrencycode: string
          fromcurrencycode: string
          modifieddate: System.DateTime
          averagerate: decimal
          currencyrateid: int
          endofdayrate: decimal }

    type currencyrateReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.currencyratedate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "currencyratedate")
        member __.tocurrencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "tocurrencycode")
        member __.fromcurrencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "fromcurrencycode")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.averagerate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "averagerate")
        member __.currencyrateid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "currencyrateid")
        member __.endofdayrate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "endofdayrate")
        member __.Read() =
            { currencyratedate = __.currencyratedate.Read()
              tocurrencycode = __.tocurrencycode.Read()
              fromcurrencycode = __.fromcurrencycode.Read()
              modifieddate = __.modifieddate.Read()
              averagerate = __.averagerate.Read()
              currencyrateid = __.currencyrateid.Read()
              endofdayrate = __.endofdayrate.Read() }

        member __.ReadIfNotNull() =
            if __.currencyrateid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type customer =
        { modifieddate: System.DateTime
          territoryid: Option<int>
          storeid: Option<int>
          personid: Option<int>
          rowguid: System.Guid
          customerid: int }

    type customerReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
        member __.storeid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "storeid")
        member __.personid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "personid")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.customerid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "customerid")
        member __.Read() =
            { modifieddate = __.modifieddate.Read()
              territoryid = __.territoryid.Read()
              storeid = __.storeid.Read()
              personid = __.personid.Read()
              rowguid = __.rowguid.Read()
              customerid = __.customerid.Read() }

        member __.ReadIfNotNull() =
            if __.customerid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type personcreditcard =
        { creditcardid: int
          modifieddate: System.DateTime
          businessentityid: int }

    type personcreditcardReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.creditcardid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "creditcardid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.Read() =
            { creditcardid = __.creditcardid.Read()
              modifieddate = __.modifieddate.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull() =
            if __.creditcardid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesorderdetail =
        { specialofferid: int
          modifieddate: System.DateTime
          productid: int
          salesorderid: int
          rowguid: System.Guid
          unitpricediscount: decimal
          unitprice: decimal
          salesorderdetailid: int
          orderqty: int16
          carriertrackingnumber: Option<string> }

    type salesorderdetailReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.specialofferid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "specialofferid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.salesorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesorderid")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.unitpricediscount = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "unitpricediscount")
        member __.unitprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "unitprice")
        member __.salesorderdetailid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesorderdetailid")
        member __.orderqty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "orderqty")
        member __.carriertrackingnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "carriertrackingnumber")
        member __.Read() =
            { specialofferid = __.specialofferid.Read()
              modifieddate = __.modifieddate.Read()
              productid = __.productid.Read()
              salesorderid = __.salesorderid.Read()
              rowguid = __.rowguid.Read()
              unitpricediscount = __.unitpricediscount.Read()
              unitprice = __.unitprice.Read()
              salesorderdetailid = __.salesorderdetailid.Read()
              orderqty = __.orderqty.Read()
              carriertrackingnumber = __.carriertrackingnumber.Read() }

        member __.ReadIfNotNull() =
            if __.salesorderid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesorderheader =
        { creditcardapprovalcode: Option<string>
          revisionnumber: int16
          territoryid: Option<int>
          currencyrateid: Option<int>
          shipmethodid: int
          duedate: System.DateTime
          orderdate: System.DateTime
          billtoaddressid: int
          accountnumber: Option<string>
          comment: Option<string>
          totaldue: Option<decimal>
          onlineorderflag: bool
          subtotal: decimal
          salespersonid: Option<int>
          customerid: int
          shipdate: Option<System.DateTime>
          salesorderid: int
          freight: decimal
          purchaseordernumber: Option<string>
          rowguid: System.Guid
          modifieddate: System.DateTime
          creditcardid: Option<int>
          taxamt: decimal
          shiptoaddressid: int
          status: int16 }

    type salesorderheaderReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.creditcardapprovalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "creditcardapprovalcode")
        member __.revisionnumber = RequiredColumn(reader, getOrdinal, reader.GetInt16, "revisionnumber")
        member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
        member __.currencyrateid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "currencyrateid")
        member __.shipmethodid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shipmethodid")
        member __.duedate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "duedate")
        member __.orderdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "orderdate")
        member __.billtoaddressid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "billtoaddressid")
        member __.accountnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "accountnumber")
        member __.comment = OptionalColumn(reader, getOrdinal, reader.GetString, "comment")
        member __.totaldue = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "totaldue")
        member __.onlineorderflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "onlineorderflag")
        member __.subtotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "subtotal")
        member __.salespersonid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salespersonid")
        member __.customerid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "customerid")
        member __.shipdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "shipdate")
        member __.salesorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesorderid")
        member __.freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "freight")
        member __.purchaseordernumber = OptionalColumn(reader, getOrdinal, reader.GetString, "purchaseordernumber")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.creditcardid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "creditcardid")
        member __.taxamt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "taxamt")
        member __.shiptoaddressid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shiptoaddressid")
        member __.status = RequiredColumn(reader, getOrdinal, reader.GetInt16, "status")
        member __.Read() =
            { creditcardapprovalcode = __.creditcardapprovalcode.Read()
              revisionnumber = __.revisionnumber.Read()
              territoryid = __.territoryid.Read()
              currencyrateid = __.currencyrateid.Read()
              shipmethodid = __.shipmethodid.Read()
              duedate = __.duedate.Read()
              orderdate = __.orderdate.Read()
              billtoaddressid = __.billtoaddressid.Read()
              accountnumber = __.accountnumber.Read()
              comment = __.comment.Read()
              totaldue = __.totaldue.Read()
              onlineorderflag = __.onlineorderflag.Read()
              subtotal = __.subtotal.Read()
              salespersonid = __.salespersonid.Read()
              customerid = __.customerid.Read()
              shipdate = __.shipdate.Read()
              salesorderid = __.salesorderid.Read()
              freight = __.freight.Read()
              purchaseordernumber = __.purchaseordernumber.Read()
              rowguid = __.rowguid.Read()
              modifieddate = __.modifieddate.Read()
              creditcardid = __.creditcardid.Read()
              taxamt = __.taxamt.Read()
              shiptoaddressid = __.shiptoaddressid.Read()
              status = __.status.Read() }

        member __.ReadIfNotNull() =
            if __.salesorderid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesorderheadersalesreason =
        { salesorderid: int
          salesreasonid: int
          modifieddate: System.DateTime }

    type salesorderheadersalesreasonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.salesorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesorderid")
        member __.salesreasonid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesreasonid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.Read() =
            { salesorderid = __.salesorderid.Read()
              salesreasonid = __.salesreasonid.Read()
              modifieddate = __.modifieddate.Read() }

        member __.ReadIfNotNull() =
            if __.salesorderid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesperson =
        { rowguid: System.Guid
          saleslastyear: decimal
          territoryid: Option<int>
          salesquota: Option<decimal>
          bonus: decimal
          salesytd: decimal
          commissionpct: decimal
          modifieddate: System.DateTime
          businessentityid: int }

    type salespersonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.saleslastyear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "saleslastyear")
        member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
        member __.salesquota = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "salesquota")
        member __.bonus = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "bonus")
        member __.salesytd = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "salesytd")
        member __.commissionpct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "commissionpct")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.Read() =
            { rowguid = __.rowguid.Read()
              saleslastyear = __.saleslastyear.Read()
              territoryid = __.territoryid.Read()
              salesquota = __.salesquota.Read()
              bonus = __.bonus.Read()
              salesytd = __.salesytd.Read()
              commissionpct = __.commissionpct.Read()
              modifieddate = __.modifieddate.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salespersonquotahistory =
        { rowguid: System.Guid
          salesquota: decimal
          quotadate: System.DateTime
          businessentityid: int
          modifieddate: System.DateTime }

    type salespersonquotahistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.salesquota = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "salesquota")
        member __.quotadate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "quotadate")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.Read() =
            { rowguid = __.rowguid.Read()
              salesquota = __.salesquota.Read()
              quotadate = __.quotadate.Read()
              businessentityid = __.businessentityid.Read()
              modifieddate = __.modifieddate.Read() }

        member __.ReadIfNotNull() =
            if __.quotadate.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesreason =
        { salesreasonid: int
          name: string
          modifieddate: System.DateTime
          reasontype: string }

    type salesreasonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.salesreasonid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesreasonid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.reasontype = RequiredColumn(reader, getOrdinal, reader.GetString, "reasontype")
        member __.Read() =
            { salesreasonid = __.salesreasonid.Read()
              name = __.name.Read()
              modifieddate = __.modifieddate.Read()
              reasontype = __.reasontype.Read() }

        member __.ReadIfNotNull() =
            if __.salesreasonid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salestaxrate =
        { stateprovinceid: int
          taxrate: decimal
          taxtype: int16
          modifieddate: System.DateTime
          name: string
          salestaxrateid: int
          rowguid: System.Guid }

    type salestaxrateReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.stateprovinceid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "stateprovinceid")
        member __.taxrate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "taxrate")
        member __.taxtype = RequiredColumn(reader, getOrdinal, reader.GetInt16, "taxtype")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.salestaxrateid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salestaxrateid")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.Read() =
            { stateprovinceid = __.stateprovinceid.Read()
              taxrate = __.taxrate.Read()
              taxtype = __.taxtype.Read()
              modifieddate = __.modifieddate.Read()
              name = __.name.Read()
              salestaxrateid = __.salestaxrateid.Read()
              rowguid = __.rowguid.Read() }

        member __.ReadIfNotNull() =
            if __.salestaxrateid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesterritory =
        { saleslastyear: decimal
          salesytd: decimal
          territoryid: int
          rowguid: System.Guid
          modifieddate: System.DateTime
          costytd: decimal
          costlastyear: decimal
          name: string
          group: string
          countryregioncode: string }

    type salesterritoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.saleslastyear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "saleslastyear")
        member __.salesytd = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "salesytd")
        member __.territoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.costytd = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "costytd")
        member __.costlastyear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "costlastyear")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.group = RequiredColumn(reader, getOrdinal, reader.GetString, "group")
        member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
        member __.Read() =
            { saleslastyear = __.saleslastyear.Read()
              salesytd = __.salesytd.Read()
              territoryid = __.territoryid.Read()
              rowguid = __.rowguid.Read()
              modifieddate = __.modifieddate.Read()
              costytd = __.costytd.Read()
              costlastyear = __.costlastyear.Read()
              name = __.name.Read()
              group = __.group.Read()
              countryregioncode = __.countryregioncode.Read() }

        member __.ReadIfNotNull() =
            if __.territoryid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesterritoryhistory =
        { businessentityid: int
          rowguid: System.Guid
          modifieddate: System.DateTime
          startdate: System.DateTime
          enddate: Option<System.DateTime>
          territoryid: int }

    type salesterritoryhistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
        member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
        member __.territoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              rowguid = __.rowguid.Read()
              modifieddate = __.modifieddate.Read()
              startdate = __.startdate.Read()
              enddate = __.enddate.Read()
              territoryid = __.territoryid.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type shoppingcartitem =
        { datecreated: System.DateTime
          shoppingcartitemid: int
          modifieddate: System.DateTime
          shoppingcartid: string
          quantity: int
          productid: int }

    type shoppingcartitemReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.datecreated = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "datecreated")
        member __.shoppingcartitemid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shoppingcartitemid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.shoppingcartid = RequiredColumn(reader, getOrdinal, reader.GetString, "shoppingcartid")
        member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "quantity")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.Read() =
            { datecreated = __.datecreated.Read()
              shoppingcartitemid = __.shoppingcartitemid.Read()
              modifieddate = __.modifieddate.Read()
              shoppingcartid = __.shoppingcartid.Read()
              quantity = __.quantity.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull() =
            if __.shoppingcartitemid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type specialoffer =
        { discountpct: decimal
          ``type``: string
          description: string
          minqty: int
          enddate: System.DateTime
          rowguid: System.Guid
          maxqty: Option<int>
          specialofferid: int
          modifieddate: System.DateTime
          category: string
          startdate: System.DateTime }

    type specialofferReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.discountpct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "discountpct")
        member __.``type`` = RequiredColumn(reader, getOrdinal, reader.GetString, "type")
        member __.description = RequiredColumn(reader, getOrdinal, reader.GetString, "description")
        member __.minqty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "minqty")
        member __.enddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.maxqty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "maxqty")
        member __.specialofferid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "specialofferid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.category = RequiredColumn(reader, getOrdinal, reader.GetString, "category")
        member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
        member __.Read() =
            { discountpct = __.discountpct.Read()
              ``type`` = __.``type``.Read()
              description = __.description.Read()
              minqty = __.minqty.Read()
              enddate = __.enddate.Read()
              rowguid = __.rowguid.Read()
              maxqty = __.maxqty.Read()
              specialofferid = __.specialofferid.Read()
              modifieddate = __.modifieddate.Read()
              category = __.category.Read()
              startdate = __.startdate.Read() }

        member __.ReadIfNotNull() =
            if __.specialofferid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type specialofferproduct =
        { specialofferid: int
          rowguid: System.Guid
          modifieddate: System.DateTime
          productid: int }

    type specialofferproductReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.specialofferid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "specialofferid")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
        member __.Read() =
            { specialofferid = __.specialofferid.Read()
              rowguid = __.rowguid.Read()
              modifieddate = __.modifieddate.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull() =
            if __.specialofferid.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type store =
        { demographics: Option<string>
          salespersonid: Option<int>
          name: string
          modifieddate: System.DateTime
          businessentityid: int
          rowguid: System.Guid }

    type storeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.demographics = OptionalColumn(reader, getOrdinal, reader.GetString, "demographics")
        member __.salespersonid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salespersonid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.Read() =
            { demographics = __.demographics.Read()
              salespersonid = __.salespersonid.Read()
              name = __.name.Read()
              modifieddate = __.modifieddate.Read()
              businessentityid = __.businessentityid.Read()
              rowguid = __.rowguid.Read() }

        member __.ReadIfNotNull() =
            if __.businessentityid.IsNull() then None else Some(__.Read())

type HydraReader(reader: Npgsql.NpgsqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazyhumanresourcesdepartment = lazy (humanresources.departmentReader (reader, buildGetOrdinal 4))
    let lazyhumanresourcesemployee = lazy (humanresources.employeeReader (reader, buildGetOrdinal 15))
    let lazyhumanresourcesemployeedepartmenthistory = lazy (humanresources.employeedepartmenthistoryReader (reader, buildGetOrdinal 6))
    let lazyhumanresourcesemployeepayhistory = lazy (humanresources.employeepayhistoryReader (reader, buildGetOrdinal 5))
    let lazyhumanresourcesjobcandidate = lazy (humanresources.jobcandidateReader (reader, buildGetOrdinal 4))
    let lazyhumanresourcesshift = lazy (humanresources.shiftReader (reader, buildGetOrdinal 5))
    let lazypersonaddress = lazy (person.addressReader (reader, buildGetOrdinal 9))
    let lazypersonaddresstype = lazy (person.addresstypeReader (reader, buildGetOrdinal 4))
    let lazypersonbusinessentity = lazy (person.businessentityReader (reader, buildGetOrdinal 3))
    let lazypersonbusinessentityaddress = lazy (person.businessentityaddressReader (reader, buildGetOrdinal 5))
    let lazypersonbusinessentitycontact = lazy (person.businessentitycontactReader (reader, buildGetOrdinal 5))
    let lazypersoncontacttype = lazy (person.contacttypeReader (reader, buildGetOrdinal 3))
    let lazypersoncountryregion = lazy (person.countryregionReader (reader, buildGetOrdinal 3))
    let lazypersonemailaddress = lazy (person.emailaddressReader (reader, buildGetOrdinal 5))
    let lazypersonpassword = lazy (person.passwordReader (reader, buildGetOrdinal 5))
    let lazypersonperson = lazy (person.personReader (reader, buildGetOrdinal 13))
    let lazypersonpersonphone = lazy (person.personphoneReader (reader, buildGetOrdinal 4))
    let lazypersonphonenumbertype = lazy (person.phonenumbertypeReader (reader, buildGetOrdinal 3))
    let lazypersonstateprovince = lazy (person.stateprovinceReader (reader, buildGetOrdinal 8))
    let lazyproductionbillofmaterials = lazy (production.billofmaterialsReader (reader, buildGetOrdinal 9))
    let lazyproductionculture = lazy (production.cultureReader (reader, buildGetOrdinal 3))
    let lazyproductiondocument = lazy (production.documentReader (reader, buildGetOrdinal 13))
    let lazyproductionillustration = lazy (production.illustrationReader (reader, buildGetOrdinal 3))
    let lazyproductionlocation = lazy (production.locationReader (reader, buildGetOrdinal 5))
    let lazyproductionproduct = lazy (production.productReader (reader, buildGetOrdinal 25))
    let lazyproductionproductcategory = lazy (production.productcategoryReader (reader, buildGetOrdinal 4))
    let lazyproductionproductcosthistory = lazy (production.productcosthistoryReader (reader, buildGetOrdinal 5))
    let lazyproductionproductdescription = lazy (production.productdescriptionReader (reader, buildGetOrdinal 4))
    let lazyproductionproductdocument = lazy (production.productdocumentReader (reader, buildGetOrdinal 3))
    let lazyproductionproductinventory = lazy (production.productinventoryReader (reader, buildGetOrdinal 7))
    let lazyproductionproductlistpricehistory = lazy (production.productlistpricehistoryReader (reader, buildGetOrdinal 5))
    let lazyproductionproductmodel = lazy (production.productmodelReader (reader, buildGetOrdinal 6))
    let lazyproductionproductmodelillustration = lazy (production.productmodelillustrationReader (reader, buildGetOrdinal 3))
    let lazyproductionproductmodelproductdescriptionculture = lazy (production.productmodelproductdescriptioncultureReader (reader, buildGetOrdinal 4))
    let lazyproductionproductphoto = lazy (production.productphotoReader (reader, buildGetOrdinal 6))
    let lazyproductionproductproductphoto = lazy (production.productproductphotoReader (reader, buildGetOrdinal 4))
    let lazyproductionproductreview = lazy (production.productreviewReader (reader, buildGetOrdinal 8))
    let lazyproductionproductsubcategory = lazy (production.productsubcategoryReader (reader, buildGetOrdinal 5))
    let lazyproductionscrapreason = lazy (production.scrapreasonReader (reader, buildGetOrdinal 3))
    let lazyproductiontransactionhistory = lazy (production.transactionhistoryReader (reader, buildGetOrdinal 9))
    let lazyproductiontransactionhistoryarchive = lazy (production.transactionhistoryarchiveReader (reader, buildGetOrdinal 9))
    let lazyproductionunitmeasure = lazy (production.unitmeasureReader (reader, buildGetOrdinal 3))
    let lazyproductionworkorder = lazy (production.workorderReader (reader, buildGetOrdinal 9))
    let lazyproductionworkorderrouting = lazy (production.workorderroutingReader (reader, buildGetOrdinal 12))
    let lazypurchasingproductvendor = lazy (purchasing.productvendorReader (reader, buildGetOrdinal 11))
    let lazypurchasingpurchaseorderdetail = lazy (purchasing.purchaseorderdetailReader (reader, buildGetOrdinal 9))
    let lazypurchasingpurchaseorderheader = lazy (purchasing.purchaseorderheaderReader (reader, buildGetOrdinal 12))
    let lazypurchasingshipmethod = lazy (purchasing.shipmethodReader (reader, buildGetOrdinal 6))
    let lazypurchasingvendor = lazy (purchasing.vendorReader (reader, buildGetOrdinal 8))
    let lazysalescountryregioncurrency = lazy (sales.countryregioncurrencyReader (reader, buildGetOrdinal 3))
    let lazysalescreditcard = lazy (sales.creditcardReader (reader, buildGetOrdinal 6))
    let lazysalescurrency = lazy (sales.currencyReader (reader, buildGetOrdinal 3))
    let lazysalescurrencyrate = lazy (sales.currencyrateReader (reader, buildGetOrdinal 7))
    let lazysalescustomer = lazy (sales.customerReader (reader, buildGetOrdinal 6))
    let lazysalespersoncreditcard = lazy (sales.personcreditcardReader (reader, buildGetOrdinal 3))
    let lazysalessalesorderdetail = lazy (sales.salesorderdetailReader (reader, buildGetOrdinal 10))
    let lazysalessalesorderheader = lazy (sales.salesorderheaderReader (reader, buildGetOrdinal 25))
    let lazysalessalesorderheadersalesreason = lazy (sales.salesorderheadersalesreasonReader (reader, buildGetOrdinal 3))
    let lazysalessalesperson = lazy (sales.salespersonReader (reader, buildGetOrdinal 9))
    let lazysalessalespersonquotahistory = lazy (sales.salespersonquotahistoryReader (reader, buildGetOrdinal 5))
    let lazysalessalesreason = lazy (sales.salesreasonReader (reader, buildGetOrdinal 4))
    let lazysalessalestaxrate = lazy (sales.salestaxrateReader (reader, buildGetOrdinal 7))
    let lazysalessalesterritory = lazy (sales.salesterritoryReader (reader, buildGetOrdinal 10))
    let lazysalessalesterritoryhistory = lazy (sales.salesterritoryhistoryReader (reader, buildGetOrdinal 6))
    let lazysalesshoppingcartitem = lazy (sales.shoppingcartitemReader (reader, buildGetOrdinal 6))
    let lazysalesspecialoffer = lazy (sales.specialofferReader (reader, buildGetOrdinal 11))
    let lazysalesspecialofferproduct = lazy (sales.specialofferproductReader (reader, buildGetOrdinal 4))
    let lazysalesstore = lazy (sales.storeReader (reader, buildGetOrdinal 6))
    member __.``humanresources.department`` = lazyhumanresourcesdepartment.Value
    member __.``humanresources.employee`` = lazyhumanresourcesemployee.Value
    member __.``humanresources.employeedepartmenthistory`` = lazyhumanresourcesemployeedepartmenthistory.Value
    member __.``humanresources.employeepayhistory`` = lazyhumanresourcesemployeepayhistory.Value
    member __.``humanresources.jobcandidate`` = lazyhumanresourcesjobcandidate.Value
    member __.``humanresources.shift`` = lazyhumanresourcesshift.Value
    member __.``person.address`` = lazypersonaddress.Value
    member __.``person.addresstype`` = lazypersonaddresstype.Value
    member __.``person.businessentity`` = lazypersonbusinessentity.Value
    member __.``person.businessentityaddress`` = lazypersonbusinessentityaddress.Value
    member __.``person.businessentitycontact`` = lazypersonbusinessentitycontact.Value
    member __.``person.contacttype`` = lazypersoncontacttype.Value
    member __.``person.countryregion`` = lazypersoncountryregion.Value
    member __.``person.emailaddress`` = lazypersonemailaddress.Value
    member __.``person.password`` = lazypersonpassword.Value
    member __.``person.person`` = lazypersonperson.Value
    member __.``person.personphone`` = lazypersonpersonphone.Value
    member __.``person.phonenumbertype`` = lazypersonphonenumbertype.Value
    member __.``person.stateprovince`` = lazypersonstateprovince.Value
    member __.``production.billofmaterials`` = lazyproductionbillofmaterials.Value
    member __.``production.culture`` = lazyproductionculture.Value
    member __.``production.document`` = lazyproductiondocument.Value
    member __.``production.illustration`` = lazyproductionillustration.Value
    member __.``production.location`` = lazyproductionlocation.Value
    member __.``production.product`` = lazyproductionproduct.Value
    member __.``production.productcategory`` = lazyproductionproductcategory.Value
    member __.``production.productcosthistory`` = lazyproductionproductcosthistory.Value
    member __.``production.productdescription`` = lazyproductionproductdescription.Value
    member __.``production.productdocument`` = lazyproductionproductdocument.Value
    member __.``production.productinventory`` = lazyproductionproductinventory.Value
    member __.``production.productlistpricehistory`` = lazyproductionproductlistpricehistory.Value
    member __.``production.productmodel`` = lazyproductionproductmodel.Value
    member __.``production.productmodelillustration`` = lazyproductionproductmodelillustration.Value
    member __.``production.productmodelproductdescriptionculture`` = lazyproductionproductmodelproductdescriptionculture.Value
    member __.``production.productphoto`` = lazyproductionproductphoto.Value
    member __.``production.productproductphoto`` = lazyproductionproductproductphoto.Value
    member __.``production.productreview`` = lazyproductionproductreview.Value
    member __.``production.productsubcategory`` = lazyproductionproductsubcategory.Value
    member __.``production.scrapreason`` = lazyproductionscrapreason.Value
    member __.``production.transactionhistory`` = lazyproductiontransactionhistory.Value
    member __.``production.transactionhistoryarchive`` = lazyproductiontransactionhistoryarchive.Value
    member __.``production.unitmeasure`` = lazyproductionunitmeasure.Value
    member __.``production.workorder`` = lazyproductionworkorder.Value
    member __.``production.workorderrouting`` = lazyproductionworkorderrouting.Value
    member __.``purchasing.productvendor`` = lazypurchasingproductvendor.Value
    member __.``purchasing.purchaseorderdetail`` = lazypurchasingpurchaseorderdetail.Value
    member __.``purchasing.purchaseorderheader`` = lazypurchasingpurchaseorderheader.Value
    member __.``purchasing.shipmethod`` = lazypurchasingshipmethod.Value
    member __.``purchasing.vendor`` = lazypurchasingvendor.Value
    member __.``sales.countryregioncurrency`` = lazysalescountryregioncurrency.Value
    member __.``sales.creditcard`` = lazysalescreditcard.Value
    member __.``sales.currency`` = lazysalescurrency.Value
    member __.``sales.currencyrate`` = lazysalescurrencyrate.Value
    member __.``sales.customer`` = lazysalescustomer.Value
    member __.``sales.personcreditcard`` = lazysalespersoncreditcard.Value
    member __.``sales.salesorderdetail`` = lazysalessalesorderdetail.Value
    member __.``sales.salesorderheader`` = lazysalessalesorderheader.Value
    member __.``sales.salesorderheadersalesreason`` = lazysalessalesorderheadersalesreason.Value
    member __.``sales.salesperson`` = lazysalessalesperson.Value
    member __.``sales.salespersonquotahistory`` = lazysalessalespersonquotahistory.Value
    member __.``sales.salesreason`` = lazysalessalesreason.Value
    member __.``sales.salestaxrate`` = lazysalessalestaxrate.Value
    member __.``sales.salesterritory`` = lazysalessalesterritory.Value
    member __.``sales.salesterritoryhistory`` = lazysalessalesterritoryhistory.Value
    member __.``sales.shoppingcartitem`` = lazysalesshoppingcartitem.Value
    member __.``sales.specialoffer`` = lazysalesspecialoffer.Value
    member __.``sales.specialofferproduct`` = lazysalesspecialofferproduct.Value
    member __.``sales.store`` = lazysalesstore.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value
    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "humanresources.department", false -> __.``humanresources.department``.Read >> box
        | "humanresources.department", true -> __.``humanresources.department``.ReadIfNotNull >> box
        | "humanresources.employee", false -> __.``humanresources.employee``.Read >> box
        | "humanresources.employee", true -> __.``humanresources.employee``.ReadIfNotNull >> box
        | "humanresources.employeedepartmenthistory", false -> __.``humanresources.employeedepartmenthistory``.Read >> box
        | "humanresources.employeedepartmenthistory", true -> __.``humanresources.employeedepartmenthistory``.ReadIfNotNull >> box
        | "humanresources.employeepayhistory", false -> __.``humanresources.employeepayhistory``.Read >> box
        | "humanresources.employeepayhistory", true -> __.``humanresources.employeepayhistory``.ReadIfNotNull >> box
        | "humanresources.jobcandidate", false -> __.``humanresources.jobcandidate``.Read >> box
        | "humanresources.jobcandidate", true -> __.``humanresources.jobcandidate``.ReadIfNotNull >> box
        | "humanresources.shift", false -> __.``humanresources.shift``.Read >> box
        | "humanresources.shift", true -> __.``humanresources.shift``.ReadIfNotNull >> box
        | "person.address", false -> __.``person.address``.Read >> box
        | "person.address", true -> __.``person.address``.ReadIfNotNull >> box
        | "person.addresstype", false -> __.``person.addresstype``.Read >> box
        | "person.addresstype", true -> __.``person.addresstype``.ReadIfNotNull >> box
        | "person.businessentity", false -> __.``person.businessentity``.Read >> box
        | "person.businessentity", true -> __.``person.businessentity``.ReadIfNotNull >> box
        | "person.businessentityaddress", false -> __.``person.businessentityaddress``.Read >> box
        | "person.businessentityaddress", true -> __.``person.businessentityaddress``.ReadIfNotNull >> box
        | "person.businessentitycontact", false -> __.``person.businessentitycontact``.Read >> box
        | "person.businessentitycontact", true -> __.``person.businessentitycontact``.ReadIfNotNull >> box
        | "person.contacttype", false -> __.``person.contacttype``.Read >> box
        | "person.contacttype", true -> __.``person.contacttype``.ReadIfNotNull >> box
        | "person.countryregion", false -> __.``person.countryregion``.Read >> box
        | "person.countryregion", true -> __.``person.countryregion``.ReadIfNotNull >> box
        | "person.emailaddress", false -> __.``person.emailaddress``.Read >> box
        | "person.emailaddress", true -> __.``person.emailaddress``.ReadIfNotNull >> box
        | "person.password", false -> __.``person.password``.Read >> box
        | "person.password", true -> __.``person.password``.ReadIfNotNull >> box
        | "person.person", false -> __.``person.person``.Read >> box
        | "person.person", true -> __.``person.person``.ReadIfNotNull >> box
        | "person.personphone", false -> __.``person.personphone``.Read >> box
        | "person.personphone", true -> __.``person.personphone``.ReadIfNotNull >> box
        | "person.phonenumbertype", false -> __.``person.phonenumbertype``.Read >> box
        | "person.phonenumbertype", true -> __.``person.phonenumbertype``.ReadIfNotNull >> box
        | "person.stateprovince", false -> __.``person.stateprovince``.Read >> box
        | "person.stateprovince", true -> __.``person.stateprovince``.ReadIfNotNull >> box
        | "production.billofmaterials", false -> __.``production.billofmaterials``.Read >> box
        | "production.billofmaterials", true -> __.``production.billofmaterials``.ReadIfNotNull >> box
        | "production.culture", false -> __.``production.culture``.Read >> box
        | "production.culture", true -> __.``production.culture``.ReadIfNotNull >> box
        | "production.document", false -> __.``production.document``.Read >> box
        | "production.document", true -> __.``production.document``.ReadIfNotNull >> box
        | "production.illustration", false -> __.``production.illustration``.Read >> box
        | "production.illustration", true -> __.``production.illustration``.ReadIfNotNull >> box
        | "production.location", false -> __.``production.location``.Read >> box
        | "production.location", true -> __.``production.location``.ReadIfNotNull >> box
        | "production.product", false -> __.``production.product``.Read >> box
        | "production.product", true -> __.``production.product``.ReadIfNotNull >> box
        | "production.productcategory", false -> __.``production.productcategory``.Read >> box
        | "production.productcategory", true -> __.``production.productcategory``.ReadIfNotNull >> box
        | "production.productcosthistory", false -> __.``production.productcosthistory``.Read >> box
        | "production.productcosthistory", true -> __.``production.productcosthistory``.ReadIfNotNull >> box
        | "production.productdescription", false -> __.``production.productdescription``.Read >> box
        | "production.productdescription", true -> __.``production.productdescription``.ReadIfNotNull >> box
        | "production.productdocument", false -> __.``production.productdocument``.Read >> box
        | "production.productdocument", true -> __.``production.productdocument``.ReadIfNotNull >> box
        | "production.productinventory", false -> __.``production.productinventory``.Read >> box
        | "production.productinventory", true -> __.``production.productinventory``.ReadIfNotNull >> box
        | "production.productlistpricehistory", false -> __.``production.productlistpricehistory``.Read >> box
        | "production.productlistpricehistory", true -> __.``production.productlistpricehistory``.ReadIfNotNull >> box
        | "production.productmodel", false -> __.``production.productmodel``.Read >> box
        | "production.productmodel", true -> __.``production.productmodel``.ReadIfNotNull >> box
        | "production.productmodelillustration", false -> __.``production.productmodelillustration``.Read >> box
        | "production.productmodelillustration", true -> __.``production.productmodelillustration``.ReadIfNotNull >> box
        | "production.productmodelproductdescriptionculture", false -> __.``production.productmodelproductdescriptionculture``.Read >> box
        | "production.productmodelproductdescriptionculture", true -> __.``production.productmodelproductdescriptionculture``.ReadIfNotNull >> box
        | "production.productphoto", false -> __.``production.productphoto``.Read >> box
        | "production.productphoto", true -> __.``production.productphoto``.ReadIfNotNull >> box
        | "production.productproductphoto", false -> __.``production.productproductphoto``.Read >> box
        | "production.productproductphoto", true -> __.``production.productproductphoto``.ReadIfNotNull >> box
        | "production.productreview", false -> __.``production.productreview``.Read >> box
        | "production.productreview", true -> __.``production.productreview``.ReadIfNotNull >> box
        | "production.productsubcategory", false -> __.``production.productsubcategory``.Read >> box
        | "production.productsubcategory", true -> __.``production.productsubcategory``.ReadIfNotNull >> box
        | "production.scrapreason", false -> __.``production.scrapreason``.Read >> box
        | "production.scrapreason", true -> __.``production.scrapreason``.ReadIfNotNull >> box
        | "production.transactionhistory", false -> __.``production.transactionhistory``.Read >> box
        | "production.transactionhistory", true -> __.``production.transactionhistory``.ReadIfNotNull >> box
        | "production.transactionhistoryarchive", false -> __.``production.transactionhistoryarchive``.Read >> box
        | "production.transactionhistoryarchive", true -> __.``production.transactionhistoryarchive``.ReadIfNotNull >> box
        | "production.unitmeasure", false -> __.``production.unitmeasure``.Read >> box
        | "production.unitmeasure", true -> __.``production.unitmeasure``.ReadIfNotNull >> box
        | "production.workorder", false -> __.``production.workorder``.Read >> box
        | "production.workorder", true -> __.``production.workorder``.ReadIfNotNull >> box
        | "production.workorderrouting", false -> __.``production.workorderrouting``.Read >> box
        | "production.workorderrouting", true -> __.``production.workorderrouting``.ReadIfNotNull >> box
        | "purchasing.productvendor", false -> __.``purchasing.productvendor``.Read >> box
        | "purchasing.productvendor", true -> __.``purchasing.productvendor``.ReadIfNotNull >> box
        | "purchasing.purchaseorderdetail", false -> __.``purchasing.purchaseorderdetail``.Read >> box
        | "purchasing.purchaseorderdetail", true -> __.``purchasing.purchaseorderdetail``.ReadIfNotNull >> box
        | "purchasing.purchaseorderheader", false -> __.``purchasing.purchaseorderheader``.Read >> box
        | "purchasing.purchaseorderheader", true -> __.``purchasing.purchaseorderheader``.ReadIfNotNull >> box
        | "purchasing.shipmethod", false -> __.``purchasing.shipmethod``.Read >> box
        | "purchasing.shipmethod", true -> __.``purchasing.shipmethod``.ReadIfNotNull >> box
        | "purchasing.vendor", false -> __.``purchasing.vendor``.Read >> box
        | "purchasing.vendor", true -> __.``purchasing.vendor``.ReadIfNotNull >> box
        | "sales.countryregioncurrency", false -> __.``sales.countryregioncurrency``.Read >> box
        | "sales.countryregioncurrency", true -> __.``sales.countryregioncurrency``.ReadIfNotNull >> box
        | "sales.creditcard", false -> __.``sales.creditcard``.Read >> box
        | "sales.creditcard", true -> __.``sales.creditcard``.ReadIfNotNull >> box
        | "sales.currency", false -> __.``sales.currency``.Read >> box
        | "sales.currency", true -> __.``sales.currency``.ReadIfNotNull >> box
        | "sales.currencyrate", false -> __.``sales.currencyrate``.Read >> box
        | "sales.currencyrate", true -> __.``sales.currencyrate``.ReadIfNotNull >> box
        | "sales.customer", false -> __.``sales.customer``.Read >> box
        | "sales.customer", true -> __.``sales.customer``.ReadIfNotNull >> box
        | "sales.personcreditcard", false -> __.``sales.personcreditcard``.Read >> box
        | "sales.personcreditcard", true -> __.``sales.personcreditcard``.ReadIfNotNull >> box
        | "sales.salesorderdetail", false -> __.``sales.salesorderdetail``.Read >> box
        | "sales.salesorderdetail", true -> __.``sales.salesorderdetail``.ReadIfNotNull >> box
        | "sales.salesorderheader", false -> __.``sales.salesorderheader``.Read >> box
        | "sales.salesorderheader", true -> __.``sales.salesorderheader``.ReadIfNotNull >> box
        | "sales.salesorderheadersalesreason", false -> __.``sales.salesorderheadersalesreason``.Read >> box
        | "sales.salesorderheadersalesreason", true -> __.``sales.salesorderheadersalesreason``.ReadIfNotNull >> box
        | "sales.salesperson", false -> __.``sales.salesperson``.Read >> box
        | "sales.salesperson", true -> __.``sales.salesperson``.ReadIfNotNull >> box
        | "sales.salespersonquotahistory", false -> __.``sales.salespersonquotahistory``.Read >> box
        | "sales.salespersonquotahistory", true -> __.``sales.salespersonquotahistory``.ReadIfNotNull >> box
        | "sales.salesreason", false -> __.``sales.salesreason``.Read >> box
        | "sales.salesreason", true -> __.``sales.salesreason``.ReadIfNotNull >> box
        | "sales.salestaxrate", false -> __.``sales.salestaxrate``.Read >> box
        | "sales.salestaxrate", true -> __.``sales.salestaxrate``.ReadIfNotNull >> box
        | "sales.salesterritory", false -> __.``sales.salesterritory``.Read >> box
        | "sales.salesterritory", true -> __.``sales.salesterritory``.ReadIfNotNull >> box
        | "sales.salesterritoryhistory", false -> __.``sales.salesterritoryhistory``.Read >> box
        | "sales.salesterritoryhistory", true -> __.``sales.salesterritoryhistory``.ReadIfNotNull >> box
        | "sales.shoppingcartitem", false -> __.``sales.shoppingcartitem``.Read >> box
        | "sales.shoppingcartitem", true -> __.``sales.shoppingcartitem``.ReadIfNotNull >> box
        | "sales.specialoffer", false -> __.``sales.specialoffer``.Read >> box
        | "sales.specialoffer", true -> __.``sales.specialoffer``.ReadIfNotNull >> box
        | "sales.specialofferproduct", false -> __.``sales.specialofferproduct``.Read >> box
        | "sales.specialofferproduct", true -> __.``sales.specialofferproduct``.ReadIfNotNull >> box
        | "sales.store", false -> __.``sales.store``.Read >> box
        | "sales.store", true -> __.``sales.store``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Npgsql.NpgsqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
                if isOpt 
                then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
                else get ord |> box 
        
        if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<System.TimeSpan> then Some(wrap reader.GetTimeSpan)
        else if t = typedefof<byte []> then Some(wrap reader.GetValue)
        else if t = typedefof<char> then Some(wrap reader.GetChar)
        else None

    static member Read(reader: Npgsql.NpgsqlDataReader) = 
            let hydra = HydraReader(reader)
            
            let getOrdinalAndIncrement() = 
                let ordinal = hydra.AccFieldCount
                hydra.AccFieldCount <- hydra.AccFieldCount + 1
                ordinal
            
            let buildEntityReadFn (t: System.Type) = 
                let t, isOpt = 
                    if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                    then t.GenericTypeArguments.[0], true
                    else t, false
            
                match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
                | Some primitiveReader -> 
                    let ord = getOrdinalAndIncrement()
                    fun () -> primitiveReader ord
                | None ->
                    let nameParts = t.FullName.Split([| '.'; '+' |])
                    let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                    hydra.GetReaderByName(schemaAndType, isOpt)
            
            // Return a fn that will hydrate 'T (which may be a tuple)
            // This fn will be called once per each record returned by the data reader.
            let t = typeof<'T>
            if FSharp.Reflection.FSharpType.IsTuple(t) then
                let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
                fun () ->
                    let entities = readEntityFns |> Array.map (fun read -> read())
                    Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
            else
                let readEntityFn = t |> buildEntityReadFn
                fun () -> 
                    readEntityFn() :?> 'T
        
