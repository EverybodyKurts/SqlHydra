// This code was generated by `SqlHydra.Npgsql` -- v0.210.0.0.
namespace Npgsql.AdventureWorks

type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getter o)

type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])
        
module person =
    [<CLIMutable>]
    type address =
        { addressline1: string
          city: string
          addressline2: Option<string>
          spatiallocation: Option<string>
          stateprovinceid: int64
          addressid: int64
          postalcode: string }

    type addressReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.addressline1 = RequiredColumn(reader, getOrdinal, reader.GetString, "addressline1")
        member __.city = RequiredColumn(reader, getOrdinal, reader.GetString, "city")
        member __.addressline2 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline2")
        member __.spatiallocation = OptionalColumn(reader, getOrdinal, reader.GetString, "spatiallocation")
        member __.stateprovinceid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "stateprovinceid")
        member __.addressid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "addressid")
        member __.postalcode = RequiredColumn(reader, getOrdinal, reader.GetString, "postalcode")
        member __.Read() =
            { addressline1 = __.addressline1.Read()
              city = __.city.Read()
              addressline2 = __.addressline2.Read()
              spatiallocation = __.spatiallocation.Read()
              stateprovinceid = __.stateprovinceid.Read()
              addressid = __.addressid.Read()
              postalcode = __.postalcode.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type stateprovince =
        { name: string
          stateprovinceid: int64
          territoryid: int64
          stateprovincecode: string
          isonlystateprovinceflag: bool
          countryregioncode: string }

    type stateprovinceReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.stateprovinceid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "stateprovinceid")
        member __.territoryid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "territoryid")
        member __.stateprovincecode = RequiredColumn(reader, getOrdinal, reader.GetString, "stateprovincecode")
        member __.isonlystateprovinceflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "isonlystateprovinceflag")
        member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
        member __.Read() =
            { name = __.name.Read()
              stateprovinceid = __.stateprovinceid.Read()
              territoryid = __.territoryid.Read()
              stateprovincecode = __.stateprovincecode.Read()
              isonlystateprovinceflag = __.isonlystateprovinceflag.Read()
              countryregioncode = __.countryregioncode.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type businessentityaddress =
        { businessentityid: int64
          addresstypeid: int64
          addressid: int64 }

    type businessentityaddressReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.addresstypeid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "addresstypeid")
        member __.addressid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "addressid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              addresstypeid = __.addresstypeid.Read()
              addressid = __.addressid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type addresstype = { name: string; addresstypeid: int64 }

    type addresstypeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.addresstypeid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "addresstypeid")
        member __.Read() =
            { name = __.name.Read()
              addresstypeid = __.addresstypeid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type businessentity = { businessentityid: int64 }

    type businessentityReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type person =
        { additionalcontactinfo: Option<string>
          suffix: Option<string>
          lastname: string
          persontype: string
          namestyle: bool
          title: Option<string>
          middlename: Option<string>
          demographics: Option<string>
          firstname: string
          emailpromotion: int64
          businessentityid: int64 }

    type personReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.additionalcontactinfo = OptionalColumn(reader, getOrdinal, reader.GetString, "additionalcontactinfo")
        member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
        member __.lastname = RequiredColumn(reader, getOrdinal, reader.GetString, "lastname")
        member __.persontype = RequiredColumn(reader, getOrdinal, reader.GetString, "persontype")
        member __.namestyle = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "namestyle")
        member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
        member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
        member __.demographics = OptionalColumn(reader, getOrdinal, reader.GetString, "demographics")
        member __.firstname = RequiredColumn(reader, getOrdinal, reader.GetString, "firstname")
        member __.emailpromotion = RequiredColumn(reader, getOrdinal, reader.GetInt64, "emailpromotion")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.Read() =
            { additionalcontactinfo = __.additionalcontactinfo.Read()
              suffix = __.suffix.Read()
              lastname = __.lastname.Read()
              persontype = __.persontype.Read()
              namestyle = __.namestyle.Read()
              title = __.title.Read()
              middlename = __.middlename.Read()
              demographics = __.demographics.Read()
              firstname = __.firstname.Read()
              emailpromotion = __.emailpromotion.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type businessentitycontact =
        { businessentityid: int64
          personid: int64
          contacttypeid: int64 }

    type businessentitycontactReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.personid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "personid")
        member __.contacttypeid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "contacttypeid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              personid = __.personid.Read()
              contacttypeid = __.contacttypeid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type contacttype = { name: string; contacttypeid: int64 }

    type contacttypeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.contacttypeid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "contacttypeid")
        member __.Read() =
            { name = __.name.Read()
              contacttypeid = __.contacttypeid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type emailaddress =
        { businessentityid: int64
          emailaddress: Option<string>
          emailaddressid: int64 }

    type emailaddressReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
        member __.emailaddressid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "emailaddressid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              emailaddress = __.emailaddress.Read()
              emailaddressid = __.emailaddressid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type password =
        { passwordsalt: string
          passwordhash: string
          businessentityid: int64 }

    type passwordReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.passwordsalt = RequiredColumn(reader, getOrdinal, reader.GetString, "passwordsalt")
        member __.passwordhash = RequiredColumn(reader, getOrdinal, reader.GetString, "passwordhash")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.Read() =
            { passwordsalt = __.passwordsalt.Read()
              passwordhash = __.passwordhash.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type personphone =
        { businessentityid: int64
          phonenumber: string
          phonenumbertypeid: int64 }

    type personphoneReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.phonenumber = RequiredColumn(reader, getOrdinal, reader.GetString, "phonenumber")
        member __.phonenumbertypeid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "phonenumbertypeid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              phonenumber = __.phonenumber.Read()
              phonenumbertypeid = __.phonenumbertypeid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type phonenumbertype =
        { phonenumbertypeid: int64
          name: string }

    type phonenumbertypeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.phonenumbertypeid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "phonenumbertypeid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.Read() =
            { phonenumbertypeid = __.phonenumbertypeid.Read()
              name = __.name.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type countryregion =
        { name: string
          countryregioncode: string }

    type countryregionReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
        member __.Read() =
            { name = __.name.Read()
              countryregioncode = __.countryregioncode.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

module humanresources =
    [<CLIMutable>]
    type employee =
        { hiredate: System.DateTime
          birthdate: System.DateTime
          maritalstatus: string
          sickleavehours: int16
          nationalidnumber: string
          currentflag: bool
          loginid: string
          organizationnode: Option<string>
          jobtitle: string
          vacationhours: int16
          salariedflag: bool
          businessentityid: int64
          gender: string }

    type employeeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.hiredate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "hiredate")
        member __.birthdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "birthdate")
        member __.maritalstatus = RequiredColumn(reader, getOrdinal, reader.GetString, "maritalstatus")
        member __.sickleavehours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "sickleavehours")
        member __.nationalidnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "nationalidnumber")
        member __.currentflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "currentflag")
        member __.loginid = RequiredColumn(reader, getOrdinal, reader.GetString, "loginid")
        member __.organizationnode = OptionalColumn(reader, getOrdinal, reader.GetString, "organizationnode")
        member __.jobtitle = RequiredColumn(reader, getOrdinal, reader.GetString, "jobtitle")
        member __.vacationhours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "vacationhours")
        member __.salariedflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "salariedflag")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.gender = RequiredColumn(reader, getOrdinal, reader.GetString, "gender")
        member __.Read() =
            { hiredate = __.hiredate.Read()
              birthdate = __.birthdate.Read()
              maritalstatus = __.maritalstatus.Read()
              sickleavehours = __.sickleavehours.Read()
              nationalidnumber = __.nationalidnumber.Read()
              currentflag = __.currentflag.Read()
              loginid = __.loginid.Read()
              organizationnode = __.organizationnode.Read()
              jobtitle = __.jobtitle.Read()
              vacationhours = __.vacationhours.Read()
              salariedflag = __.salariedflag.Read()
              businessentityid = __.businessentityid.Read()
              gender = __.gender.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type department =
        { groupname: string
          name: string
          departmentid: int64 }

    type departmentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.groupname = RequiredColumn(reader, getOrdinal, reader.GetString, "groupname")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.departmentid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "departmentid")
        member __.Read() =
            { groupname = __.groupname.Read()
              name = __.name.Read()
              departmentid = __.departmentid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type employeedepartmenthistory =
        { startdate: System.DateTime
          shiftid: int16
          departmentid: int16
          businessentityid: int64
          enddate: Option<System.DateTime> }

    type employeedepartmenthistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
        member __.shiftid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "shiftid")
        member __.departmentid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "departmentid")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
        member __.Read() =
            { startdate = __.startdate.Read()
              shiftid = __.shiftid.Read()
              departmentid = __.departmentid.Read()
              businessentityid = __.businessentityid.Read()
              enddate = __.enddate.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type shift = { shiftid: int64; name: string }

    type shiftReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.shiftid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "shiftid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.Read() =
            { shiftid = __.shiftid.Read()
              name = __.name.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type employeepayhistory =
        { businessentityid: int64
          rate: decimal
          payfrequency: int16 }

    type employeepayhistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.rate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "rate")
        member __.payfrequency = RequiredColumn(reader, getOrdinal, reader.GetInt16, "payfrequency")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              rate = __.rate.Read()
              payfrequency = __.payfrequency.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type jobcandidate =
        { resume: Option<string>
          businessentityid: Option<int64>
          jobcandidateid: int64 }

    type jobcandidateReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.resume = OptionalColumn(reader, getOrdinal, reader.GetString, "resume")
        member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.jobcandidateid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "jobcandidateid")
        member __.Read() =
            { resume = __.resume.Read()
              businessentityid = __.businessentityid.Read()
              jobcandidateid = __.jobcandidateid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

module production =
    [<CLIMutable>]
    type billofmaterials =
        { billofmaterialsid: int64
          unitmeasurecode: string
          productassemblyid: Option<int64>
          componentid: int64
          bomlevel: int16
          perassemblyqty: decimal }

    type billofmaterialsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.billofmaterialsid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "billofmaterialsid")
        member __.unitmeasurecode = RequiredColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
        member __.productassemblyid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "productassemblyid")
        member __.componentid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "componentid")
        member __.bomlevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "bomlevel")
        member __.perassemblyqty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "perassemblyqty")
        member __.Read() =
            { billofmaterialsid = __.billofmaterialsid.Read()
              unitmeasurecode = __.unitmeasurecode.Read()
              productassemblyid = __.productassemblyid.Read()
              componentid = __.componentid.Read()
              bomlevel = __.bomlevel.Read()
              perassemblyqty = __.perassemblyqty.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type culture = { name: string; cultureid: string }

    type cultureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.cultureid = RequiredColumn(reader, getOrdinal, reader.GetString, "cultureid")
        member __.Read() =
            { name = __.name.Read()
              cultureid = __.cultureid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type document =
        { revision: string
          fileextension: Option<string>
          status: int16
          title: string
          owner: int64
          filename: string
          documentnode: string
          changenumber: int64
          documentsummary: Option<string>
          folderflag: bool }

    type documentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.revision = RequiredColumn(reader, getOrdinal, reader.GetString, "revision")
        member __.fileextension = OptionalColumn(reader, getOrdinal, reader.GetString, "fileextension")
        member __.status = RequiredColumn(reader, getOrdinal, reader.GetInt16, "status")
        member __.title = RequiredColumn(reader, getOrdinal, reader.GetString, "title")
        member __.owner = RequiredColumn(reader, getOrdinal, reader.GetInt64, "owner")
        member __.filename = RequiredColumn(reader, getOrdinal, reader.GetString, "filename")
        member __.documentnode = RequiredColumn(reader, getOrdinal, reader.GetString, "documentnode")
        member __.changenumber = RequiredColumn(reader, getOrdinal, reader.GetInt64, "changenumber")
        member __.documentsummary = OptionalColumn(reader, getOrdinal, reader.GetString, "documentsummary")
        member __.folderflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "folderflag")
        member __.Read() =
            { revision = __.revision.Read()
              fileextension = __.fileextension.Read()
              status = __.status.Read()
              title = __.title.Read()
              owner = __.owner.Read()
              filename = __.filename.Read()
              documentnode = __.documentnode.Read()
              changenumber = __.changenumber.Read()
              documentsummary = __.documentsummary.Read()
              folderflag = __.folderflag.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productmodel =
        { productmodelid: int64
          name: string
          catalogdescription: Option<string>
          instructions: Option<string> }

    type productmodelReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productmodelid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productmodelid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.catalogdescription = OptionalColumn(reader, getOrdinal, reader.GetString, "catalogdescription")
        member __.instructions = OptionalColumn(reader, getOrdinal, reader.GetString, "instructions")
        member __.Read() =
            { productmodelid = __.productmodelid.Read()
              name = __.name.Read()
              catalogdescription = __.catalogdescription.Read()
              instructions = __.instructions.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type product =
        { finishedgoodsflag: bool
          productmodelid: Option<int64>
          size: Option<string>
          sizeunitmeasurecode: Option<string>
          productid: int64
          standardcost: decimal
          daystomanufacture: int64
          ``class``: Option<string>
          color: Option<string>
          weightunitmeasurecode: Option<string>
          productsubcategoryid: Option<int64>
          name: string
          style: Option<string>
          makeflag: bool
          productline: Option<string>
          weight: Option<decimal>
          productnumber: string
          listprice: decimal
          safetystocklevel: int16
          reorderpoint: int16 }

    type productReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.finishedgoodsflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "finishedgoodsflag")
        member __.productmodelid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "productmodelid")
        member __.size = OptionalColumn(reader, getOrdinal, reader.GetString, "size")
        member __.sizeunitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "sizeunitmeasurecode")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.standardcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "standardcost")
        member __.daystomanufacture = RequiredColumn(reader, getOrdinal, reader.GetInt64, "daystomanufacture")
        member __.``class`` = OptionalColumn(reader, getOrdinal, reader.GetString, "class")
        member __.color = OptionalColumn(reader, getOrdinal, reader.GetString, "color")
        member __.weightunitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "weightunitmeasurecode")
        member __.productsubcategoryid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "productsubcategoryid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.style = OptionalColumn(reader, getOrdinal, reader.GetString, "style")
        member __.makeflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "makeflag")
        member __.productline = OptionalColumn(reader, getOrdinal, reader.GetString, "productline")
        member __.weight = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "weight")
        member __.productnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "productnumber")
        member __.listprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "listprice")
        member __.safetystocklevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "safetystocklevel")
        member __.reorderpoint = RequiredColumn(reader, getOrdinal, reader.GetInt16, "reorderpoint")
        member __.Read() =
            { finishedgoodsflag = __.finishedgoodsflag.Read()
              productmodelid = __.productmodelid.Read()
              size = __.size.Read()
              sizeunitmeasurecode = __.sizeunitmeasurecode.Read()
              productid = __.productid.Read()
              standardcost = __.standardcost.Read()
              daystomanufacture = __.daystomanufacture.Read()
              ``class`` = __.``class``.Read()
              color = __.color.Read()
              weightunitmeasurecode = __.weightunitmeasurecode.Read()
              productsubcategoryid = __.productsubcategoryid.Read()
              name = __.name.Read()
              style = __.style.Read()
              makeflag = __.makeflag.Read()
              productline = __.productline.Read()
              weight = __.weight.Read()
              productnumber = __.productnumber.Read()
              listprice = __.listprice.Read()
              safetystocklevel = __.safetystocklevel.Read()
              reorderpoint = __.reorderpoint.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productsubcategory =
        { productsubcategoryid: int64
          name: string
          productcategoryid: int64 }

    type productsubcategoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productsubcategoryid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productsubcategoryid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.productcategoryid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productcategoryid")
        member __.Read() =
            { productsubcategoryid = __.productsubcategoryid.Read()
              name = __.name.Read()
              productcategoryid = __.productcategoryid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productcosthistory =
        { standardcost: decimal
          productid: int64 }

    type productcosthistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.standardcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "standardcost")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.Read() =
            { standardcost = __.standardcost.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productdocument =
        { documentnode: string
          productid: int64 }

    type productdocumentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.documentnode = RequiredColumn(reader, getOrdinal, reader.GetString, "documentnode")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.Read() =
            { documentnode = __.documentnode.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productdescription =
        { productdescriptionid: int64
          description: string }

    type productdescriptionReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productdescriptionid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productdescriptionid")
        member __.description = RequiredColumn(reader, getOrdinal, reader.GetString, "description")
        member __.Read() =
            { productdescriptionid = __.productdescriptionid.Read()
              description = __.description.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productcategory =
        { name: string
          productcategoryid: int64 }

    type productcategoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.productcategoryid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productcategoryid")
        member __.Read() =
            { name = __.name.Read()
              productcategoryid = __.productcategoryid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type location =
        { locationid: int64
          costrate: decimal
          availability: decimal
          name: string }

    type locationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.locationid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "locationid")
        member __.costrate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "costrate")
        member __.availability = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "availability")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.Read() =
            { locationid = __.locationid.Read()
              costrate = __.costrate.Read()
              availability = __.availability.Read()
              name = __.name.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productlistpricehistory =
        { listprice: decimal
          productid: int64 }

    type productlistpricehistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.listprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "listprice")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.Read() =
            { listprice = __.listprice.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productmodelillustration =
        { illustrationid: int64
          productmodelid: int64 }

    type productmodelillustrationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.illustrationid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "illustrationid")
        member __.productmodelid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productmodelid")
        member __.Read() =
            { illustrationid = __.illustrationid.Read()
              productmodelid = __.productmodelid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type illustration =
        { diagram: Option<string>
          illustrationid: int64 }

    type illustrationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.diagram = OptionalColumn(reader, getOrdinal, reader.GetString, "diagram")
        member __.illustrationid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "illustrationid")
        member __.Read() =
            { diagram = __.diagram.Read()
              illustrationid = __.illustrationid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productmodelproductdescriptionculture =
        { productmodelid: int64
          cultureid: string
          productdescriptionid: int64 }

    type productmodelproductdescriptioncultureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productmodelid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productmodelid")
        member __.cultureid = RequiredColumn(reader, getOrdinal, reader.GetString, "cultureid")
        member __.productdescriptionid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productdescriptionid")
        member __.Read() =
            { productmodelid = __.productmodelid.Read()
              cultureid = __.cultureid.Read()
              productdescriptionid = __.productdescriptionid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productproductphoto =
        { productid: int64
          primary: bool
          productphotoid: int64 }

    type productproductphotoReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.primary = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "primary")
        member __.productphotoid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productphotoid")
        member __.Read() =
            { productid = __.productid.Read()
              primary = __.primary.Read()
              productphotoid = __.productphotoid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productphoto =
        { productphotoid: int64
          largephotofilename: Option<string>
          thumbnailphotofilename: Option<string> }

    type productphotoReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productphotoid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productphotoid")
        member __.largephotofilename = OptionalColumn(reader, getOrdinal, reader.GetString, "largephotofilename")
        member __.thumbnailphotofilename = OptionalColumn(reader, getOrdinal, reader.GetString, "thumbnailphotofilename")
        member __.Read() =
            { productphotoid = __.productphotoid.Read()
              largephotofilename = __.largephotofilename.Read()
              thumbnailphotofilename = __.thumbnailphotofilename.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type unitmeasure =
        { unitmeasurecode: string
          name: string }

    type unitmeasureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.unitmeasurecode = RequiredColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.Read() =
            { unitmeasurecode = __.unitmeasurecode.Read()
              name = __.name.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productreview =
        { comments: Option<string>
          productid: int64
          reviewername: string
          rating: int64
          emailaddress: string
          productreviewid: int64 }

    type productreviewReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.comments = OptionalColumn(reader, getOrdinal, reader.GetString, "comments")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.reviewername = RequiredColumn(reader, getOrdinal, reader.GetString, "reviewername")
        member __.rating = RequiredColumn(reader, getOrdinal, reader.GetInt64, "rating")
        member __.emailaddress = RequiredColumn(reader, getOrdinal, reader.GetString, "emailaddress")
        member __.productreviewid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productreviewid")
        member __.Read() =
            { comments = __.comments.Read()
              productid = __.productid.Read()
              reviewername = __.reviewername.Read()
              rating = __.rating.Read()
              emailaddress = __.emailaddress.Read()
              productreviewid = __.productreviewid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type transactionhistoryarchive =
        { referenceorderid: int64
          referenceorderlineid: int64
          productid: int64
          quantity: int64
          actualcost: decimal
          transactionid: int64
          transactiontype: string }

    type transactionhistoryarchiveReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.referenceorderid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "referenceorderid")
        member __.referenceorderlineid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "referenceorderlineid")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt64, "quantity")
        member __.actualcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
        member __.transactionid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "transactionid")
        member __.transactiontype = RequiredColumn(reader, getOrdinal, reader.GetString, "transactiontype")
        member __.Read() =
            { referenceorderid = __.referenceorderid.Read()
              referenceorderlineid = __.referenceorderlineid.Read()
              productid = __.productid.Read()
              quantity = __.quantity.Read()
              actualcost = __.actualcost.Read()
              transactionid = __.transactionid.Read()
              transactiontype = __.transactiontype.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type transactionhistory =
        { productid: int64
          referenceorderlineid: int64
          referenceorderid: int64
          actualcost: decimal
          quantity: int64
          transactionid: int64
          transactiontype: string }

    type transactionhistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.referenceorderlineid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "referenceorderlineid")
        member __.referenceorderid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "referenceorderid")
        member __.actualcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
        member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt64, "quantity")
        member __.transactionid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "transactionid")
        member __.transactiontype = RequiredColumn(reader, getOrdinal, reader.GetString, "transactiontype")
        member __.Read() =
            { productid = __.productid.Read()
              referenceorderlineid = __.referenceorderlineid.Read()
              referenceorderid = __.referenceorderid.Read()
              actualcost = __.actualcost.Read()
              quantity = __.quantity.Read()
              transactionid = __.transactionid.Read()
              transactiontype = __.transactiontype.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type workorder =
        { orderqty: int64
          productid: int64
          workorderid: int64
          scrapreasonid: Option<int16>
          scrappedqty: int16 }

    type workorderReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.orderqty = RequiredColumn(reader, getOrdinal, reader.GetInt64, "orderqty")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.workorderid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "workorderid")
        member __.scrapreasonid = OptionalColumn(reader, getOrdinal, reader.GetInt16, "scrapreasonid")
        member __.scrappedqty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "scrappedqty")
        member __.Read() =
            { orderqty = __.orderqty.Read()
              productid = __.productid.Read()
              workorderid = __.workorderid.Read()
              scrapreasonid = __.scrapreasonid.Read()
              scrappedqty = __.scrappedqty.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type scrapreason = { name: string; scrapreasonid: int64 }

    type scrapreasonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.scrapreasonid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "scrapreasonid")
        member __.Read() =
            { name = __.name.Read()
              scrapreasonid = __.scrapreasonid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type workorderrouting =
        { workorderid: int64
          actualresourcehrs: Option<decimal>
          actualcost: Option<decimal>
          plannedcost: decimal
          locationid: int16
          operationsequence: int16
          productid: int64 }

    type workorderroutingReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.workorderid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "workorderid")
        member __.actualresourcehrs = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "actualresourcehrs")
        member __.actualcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
        member __.plannedcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "plannedcost")
        member __.locationid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "locationid")
        member __.operationsequence = RequiredColumn(reader, getOrdinal, reader.GetInt16, "operationsequence")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.Read() =
            { workorderid = __.workorderid.Read()
              actualresourcehrs = __.actualresourcehrs.Read()
              actualcost = __.actualcost.Read()
              plannedcost = __.plannedcost.Read()
              locationid = __.locationid.Read()
              operationsequence = __.operationsequence.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type productinventory =
        { productid: int64
          quantity: int16
          shelf: string
          bin: int16
          locationid: int16 }

    type productinventoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt16, "quantity")
        member __.shelf = RequiredColumn(reader, getOrdinal, reader.GetString, "shelf")
        member __.bin = RequiredColumn(reader, getOrdinal, reader.GetInt16, "bin")
        member __.locationid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "locationid")
        member __.Read() =
            { productid = __.productid.Read()
              quantity = __.quantity.Read()
              shelf = __.shelf.Read()
              bin = __.bin.Read()
              locationid = __.locationid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

module purchasing =
    [<CLIMutable>]
    type productvendor =
        { minorderqty: int64
          maxorderqty: int64
          unitmeasurecode: string
          averageleadtime: int64
          standardprice: decimal
          businessentityid: int64
          onorderqty: Option<int64>
          productid: int64
          lastreceiptcost: Option<decimal> }

    type productvendorReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.minorderqty = RequiredColumn(reader, getOrdinal, reader.GetInt64, "minorderqty")
        member __.maxorderqty = RequiredColumn(reader, getOrdinal, reader.GetInt64, "maxorderqty")
        member __.unitmeasurecode = RequiredColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
        member __.averageleadtime = RequiredColumn(reader, getOrdinal, reader.GetInt64, "averageleadtime")
        member __.standardprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "standardprice")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.onorderqty = OptionalColumn(reader, getOrdinal, reader.GetInt64, "onorderqty")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.lastreceiptcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "lastreceiptcost")
        member __.Read() =
            { minorderqty = __.minorderqty.Read()
              maxorderqty = __.maxorderqty.Read()
              unitmeasurecode = __.unitmeasurecode.Read()
              averageleadtime = __.averageleadtime.Read()
              standardprice = __.standardprice.Read()
              businessentityid = __.businessentityid.Read()
              onorderqty = __.onorderqty.Read()
              productid = __.productid.Read()
              lastreceiptcost = __.lastreceiptcost.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type purchaseorderdetail =
        { unitprice: decimal
          rejectedqty: decimal
          purchaseorderid: int64
          productid: int64
          receivedqty: decimal
          orderqty: int16
          purchaseorderdetailid: int64 }

    type purchaseorderdetailReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.unitprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "unitprice")
        member __.rejectedqty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "rejectedqty")
        member __.purchaseorderid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "purchaseorderid")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.receivedqty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "receivedqty")
        member __.orderqty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "orderqty")
        member __.purchaseorderdetailid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "purchaseorderdetailid")
        member __.Read() =
            { unitprice = __.unitprice.Read()
              rejectedqty = __.rejectedqty.Read()
              purchaseorderid = __.purchaseorderid.Read()
              productid = __.productid.Read()
              receivedqty = __.receivedqty.Read()
              orderqty = __.orderqty.Read()
              purchaseorderdetailid = __.purchaseorderdetailid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type purchaseorderheader =
        { revisionnumber: int16
          status: int16
          employeeid: int64
          taxamt: decimal
          freight: decimal
          vendorid: int64
          subtotal: decimal
          purchaseorderid: int64
          shipmethodid: int64 }

    type purchaseorderheaderReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.revisionnumber = RequiredColumn(reader, getOrdinal, reader.GetInt16, "revisionnumber")
        member __.status = RequiredColumn(reader, getOrdinal, reader.GetInt16, "status")
        member __.employeeid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "employeeid")
        member __.taxamt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "taxamt")
        member __.freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "freight")
        member __.vendorid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "vendorid")
        member __.subtotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "subtotal")
        member __.purchaseorderid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "purchaseorderid")
        member __.shipmethodid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "shipmethodid")
        member __.Read() =
            { revisionnumber = __.revisionnumber.Read()
              status = __.status.Read()
              employeeid = __.employeeid.Read()
              taxamt = __.taxamt.Read()
              freight = __.freight.Read()
              vendorid = __.vendorid.Read()
              subtotal = __.subtotal.Read()
              purchaseorderid = __.purchaseorderid.Read()
              shipmethodid = __.shipmethodid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type shipmethod =
        { shipmethodid: int64
          name: string
          shipbase: decimal
          shiprate: decimal }

    type shipmethodReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.shipmethodid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "shipmethodid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.shipbase = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "shipbase")
        member __.shiprate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "shiprate")
        member __.Read() =
            { shipmethodid = __.shipmethodid.Read()
              name = __.name.Read()
              shipbase = __.shipbase.Read()
              shiprate = __.shiprate.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vendor =
        { purchasingwebserviceurl: Option<string>
          accountnumber: string
          name: string
          creditrating: int16
          activeflag: bool
          preferredvendorstatus: bool
          businessentityid: int64 }

    type vendorReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.purchasingwebserviceurl = OptionalColumn(reader, getOrdinal, reader.GetString, "purchasingwebserviceurl")
        member __.accountnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "accountnumber")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.creditrating = RequiredColumn(reader, getOrdinal, reader.GetInt16, "creditrating")
        member __.activeflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "activeflag")
        member __.preferredvendorstatus = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "preferredvendorstatus")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.Read() =
            { purchasingwebserviceurl = __.purchasingwebserviceurl.Read()
              accountnumber = __.accountnumber.Read()
              name = __.name.Read()
              creditrating = __.creditrating.Read()
              activeflag = __.activeflag.Read()
              preferredvendorstatus = __.preferredvendorstatus.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

module sales =
    [<CLIMutable>]
    type countryregioncurrency =
        { currencycode: string
          countryregioncode: string }

    type countryregioncurrencyReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.currencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "currencycode")
        member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
        member __.Read() =
            { currencycode = __.currencycode.Read()
              countryregioncode = __.countryregioncode.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type currency = { name: string; currencycode: string }

    type currencyReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.currencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "currencycode")
        member __.Read() =
            { name = __.name.Read()
              currencycode = __.currencycode.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type currencyrate =
        { tocurrencycode: string
          fromcurrencycode: string
          averagerate: decimal
          currencyrateid: int64
          endofdayrate: decimal }

    type currencyrateReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.tocurrencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "tocurrencycode")
        member __.fromcurrencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "fromcurrencycode")
        member __.averagerate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "averagerate")
        member __.currencyrateid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "currencyrateid")
        member __.endofdayrate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "endofdayrate")
        member __.Read() =
            { tocurrencycode = __.tocurrencycode.Read()
              fromcurrencycode = __.fromcurrencycode.Read()
              averagerate = __.averagerate.Read()
              currencyrateid = __.currencyrateid.Read()
              endofdayrate = __.endofdayrate.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type customer =
        { territoryid: Option<int64>
          storeid: Option<int64>
          personid: Option<int64>
          customerid: int64 }

    type customerReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "territoryid")
        member __.storeid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "storeid")
        member __.personid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "personid")
        member __.customerid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "customerid")
        member __.Read() =
            { territoryid = __.territoryid.Read()
              storeid = __.storeid.Read()
              personid = __.personid.Read()
              customerid = __.customerid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type personcreditcard =
        { creditcardid: int64
          businessentityid: int64 }

    type personcreditcardReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.creditcardid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "creditcardid")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.Read() =
            { creditcardid = __.creditcardid.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type creditcard =
        { creditcardid: int64
          expyear: int16
          expmonth: int16
          cardnumber: string
          cardtype: string }

    type creditcardReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.creditcardid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "creditcardid")
        member __.expyear = RequiredColumn(reader, getOrdinal, reader.GetInt16, "expyear")
        member __.expmonth = RequiredColumn(reader, getOrdinal, reader.GetInt16, "expmonth")
        member __.cardnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "cardnumber")
        member __.cardtype = RequiredColumn(reader, getOrdinal, reader.GetString, "cardtype")
        member __.Read() =
            { creditcardid = __.creditcardid.Read()
              expyear = __.expyear.Read()
              expmonth = __.expmonth.Read()
              cardnumber = __.cardnumber.Read()
              cardtype = __.cardtype.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesorderheader =
        { creditcardapprovalcode: Option<string>
          revisionnumber: int16
          territoryid: Option<int64>
          currencyrateid: Option<int64>
          shipmethodid: int64
          billtoaddressid: int64
          accountnumber: Option<string>
          comment: Option<string>
          totaldue: Option<decimal>
          onlineorderflag: bool
          subtotal: decimal
          salespersonid: Option<int64>
          customerid: int64
          salesorderid: int64
          freight: decimal
          purchaseordernumber: Option<string>
          creditcardid: Option<int64>
          taxamt: decimal
          shiptoaddressid: int64
          status: int16 }

    type salesorderheaderReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.creditcardapprovalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "creditcardapprovalcode")
        member __.revisionnumber = RequiredColumn(reader, getOrdinal, reader.GetInt16, "revisionnumber")
        member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "territoryid")
        member __.currencyrateid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "currencyrateid")
        member __.shipmethodid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "shipmethodid")
        member __.billtoaddressid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "billtoaddressid")
        member __.accountnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "accountnumber")
        member __.comment = OptionalColumn(reader, getOrdinal, reader.GetString, "comment")
        member __.totaldue = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "totaldue")
        member __.onlineorderflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "onlineorderflag")
        member __.subtotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "subtotal")
        member __.salespersonid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "salespersonid")
        member __.customerid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "customerid")
        member __.salesorderid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "salesorderid")
        member __.freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "freight")
        member __.purchaseordernumber = OptionalColumn(reader, getOrdinal, reader.GetString, "purchaseordernumber")
        member __.creditcardid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "creditcardid")
        member __.taxamt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "taxamt")
        member __.shiptoaddressid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "shiptoaddressid")
        member __.status = RequiredColumn(reader, getOrdinal, reader.GetInt16, "status")
        member __.Read() =
            { creditcardapprovalcode = __.creditcardapprovalcode.Read()
              revisionnumber = __.revisionnumber.Read()
              territoryid = __.territoryid.Read()
              currencyrateid = __.currencyrateid.Read()
              shipmethodid = __.shipmethodid.Read()
              billtoaddressid = __.billtoaddressid.Read()
              accountnumber = __.accountnumber.Read()
              comment = __.comment.Read()
              totaldue = __.totaldue.Read()
              onlineorderflag = __.onlineorderflag.Read()
              subtotal = __.subtotal.Read()
              salespersonid = __.salespersonid.Read()
              customerid = __.customerid.Read()
              salesorderid = __.salesorderid.Read()
              freight = __.freight.Read()
              purchaseordernumber = __.purchaseordernumber.Read()
              creditcardid = __.creditcardid.Read()
              taxamt = __.taxamt.Read()
              shiptoaddressid = __.shiptoaddressid.Read()
              status = __.status.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesorderdetail =
        { specialofferid: int64
          productid: int64
          salesorderid: int64
          unitpricediscount: decimal
          unitprice: decimal
          salesorderdetailid: int64
          orderqty: int16
          carriertrackingnumber: Option<string> }

    type salesorderdetailReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.specialofferid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "specialofferid")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.salesorderid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "salesorderid")
        member __.unitpricediscount = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "unitpricediscount")
        member __.unitprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "unitprice")
        member __.salesorderdetailid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "salesorderdetailid")
        member __.orderqty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "orderqty")
        member __.carriertrackingnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "carriertrackingnumber")
        member __.Read() =
            { specialofferid = __.specialofferid.Read()
              productid = __.productid.Read()
              salesorderid = __.salesorderid.Read()
              unitpricediscount = __.unitpricediscount.Read()
              unitprice = __.unitprice.Read()
              salesorderdetailid = __.salesorderdetailid.Read()
              orderqty = __.orderqty.Read()
              carriertrackingnumber = __.carriertrackingnumber.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesperson =
        { saleslastyear: decimal
          territoryid: Option<int64>
          salesquota: Option<decimal>
          bonus: decimal
          salesytd: decimal
          commissionpct: decimal
          businessentityid: int64 }

    type salespersonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.saleslastyear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "saleslastyear")
        member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "territoryid")
        member __.salesquota = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "salesquota")
        member __.bonus = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "bonus")
        member __.salesytd = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "salesytd")
        member __.commissionpct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "commissionpct")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.Read() =
            { saleslastyear = __.saleslastyear.Read()
              territoryid = __.territoryid.Read()
              salesquota = __.salesquota.Read()
              bonus = __.bonus.Read()
              salesytd = __.salesytd.Read()
              commissionpct = __.commissionpct.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesorderheadersalesreason =
        { salesorderid: int64
          salesreasonid: int64 }

    type salesorderheadersalesreasonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.salesorderid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "salesorderid")
        member __.salesreasonid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "salesreasonid")
        member __.Read() =
            { salesorderid = __.salesorderid.Read()
              salesreasonid = __.salesreasonid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salespersonquotahistory =
        { salesquota: decimal
          businessentityid: int64 }

    type salespersonquotahistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.salesquota = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "salesquota")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.Read() =
            { salesquota = __.salesquota.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesterritory =
        { saleslastyear: decimal
          salesytd: decimal
          territoryid: int64
          costytd: decimal
          costlastyear: decimal
          name: string
          group: string
          countryregioncode: string }

    type salesterritoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.saleslastyear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "saleslastyear")
        member __.salesytd = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "salesytd")
        member __.territoryid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "territoryid")
        member __.costytd = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "costytd")
        member __.costlastyear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "costlastyear")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.group = RequiredColumn(reader, getOrdinal, reader.GetString, "group")
        member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
        member __.Read() =
            { saleslastyear = __.saleslastyear.Read()
              salesytd = __.salesytd.Read()
              territoryid = __.territoryid.Read()
              costytd = __.costytd.Read()
              costlastyear = __.costlastyear.Read()
              name = __.name.Read()
              group = __.group.Read()
              countryregioncode = __.countryregioncode.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type store =
        { demographics: Option<string>
          salespersonid: Option<int64>
          name: string
          businessentityid: int64 }

    type storeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.demographics = OptionalColumn(reader, getOrdinal, reader.GetString, "demographics")
        member __.salespersonid = OptionalColumn(reader, getOrdinal, reader.GetInt64, "salespersonid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.Read() =
            { demographics = __.demographics.Read()
              salespersonid = __.salespersonid.Read()
              name = __.name.Read()
              businessentityid = __.businessentityid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type specialofferproduct =
        { specialofferid: int64
          productid: int64 }

    type specialofferproductReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.specialofferid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "specialofferid")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.Read() =
            { specialofferid = __.specialofferid.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesreason =
        { salesreasonid: int64
          name: string
          reasontype: string }

    type salesreasonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.salesreasonid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "salesreasonid")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.reasontype = RequiredColumn(reader, getOrdinal, reader.GetString, "reasontype")
        member __.Read() =
            { salesreasonid = __.salesreasonid.Read()
              name = __.name.Read()
              reasontype = __.reasontype.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salestaxrate =
        { stateprovinceid: int64
          taxrate: decimal
          taxtype: int16
          name: string
          salestaxrateid: int64 }

    type salestaxrateReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.stateprovinceid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "stateprovinceid")
        member __.taxrate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "taxrate")
        member __.taxtype = RequiredColumn(reader, getOrdinal, reader.GetInt16, "taxtype")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.salestaxrateid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "salestaxrateid")
        member __.Read() =
            { stateprovinceid = __.stateprovinceid.Read()
              taxrate = __.taxrate.Read()
              taxtype = __.taxtype.Read()
              name = __.name.Read()
              salestaxrateid = __.salestaxrateid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type salesterritoryhistory =
        { businessentityid: int64
          territoryid: int64 }

    type salesterritoryhistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "businessentityid")
        member __.territoryid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "territoryid")
        member __.Read() =
            { businessentityid = __.businessentityid.Read()
              territoryid = __.territoryid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type shoppingcartitem =
        { shoppingcartitemid: int64
          shoppingcartid: string
          quantity: int64
          productid: int64 }

    type shoppingcartitemReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.shoppingcartitemid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "shoppingcartitemid")
        member __.shoppingcartid = RequiredColumn(reader, getOrdinal, reader.GetString, "shoppingcartid")
        member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt64, "quantity")
        member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "productid")
        member __.Read() =
            { shoppingcartitemid = __.shoppingcartitemid.Read()
              shoppingcartid = __.shoppingcartid.Read()
              quantity = __.quantity.Read()
              productid = __.productid.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type specialoffer =
        { discountpct: decimal
          ``type``: string
          description: string
          minqty: int64
          maxqty: Option<int64>
          specialofferid: int64
          category: string }

    type specialofferReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.discountpct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "discountpct")
        member __.``type`` = RequiredColumn(reader, getOrdinal, reader.GetString, "type")
        member __.description = RequiredColumn(reader, getOrdinal, reader.GetString, "description")
        member __.minqty = RequiredColumn(reader, getOrdinal, reader.GetInt64, "minqty")
        member __.maxqty = OptionalColumn(reader, getOrdinal, reader.GetInt64, "maxqty")
        member __.specialofferid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "specialofferid")
        member __.category = RequiredColumn(reader, getOrdinal, reader.GetString, "category")
        member __.Read() =
            { discountpct = __.discountpct.Read()
              ``type`` = __.``type``.Read()
              description = __.description.Read()
              minqty = __.minqty.Read()
              maxqty = __.maxqty.Read()
              specialofferid = __.specialofferid.Read()
              category = __.category.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

type HydraReader(reader: Npgsql.NpgsqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazyaddress = lazy (person.addressReader (reader, buildGetOrdinal 9))
    let lazystateprovince = lazy (person.stateprovinceReader (reader, buildGetOrdinal 8))
    let lazybusinessentityaddress = lazy (person.businessentityaddressReader (reader, buildGetOrdinal 5))
    let lazyaddresstype = lazy (person.addresstypeReader (reader, buildGetOrdinal 4))
    let lazybusinessentity = lazy (person.businessentityReader (reader, buildGetOrdinal 3))
    let lazyperson = lazy (person.personReader (reader, buildGetOrdinal 13))
    let lazybusinessentitycontact = lazy (person.businessentitycontactReader (reader, buildGetOrdinal 5))
    let lazycontacttype = lazy (person.contacttypeReader (reader, buildGetOrdinal 3))
    let lazyemailaddress = lazy (person.emailaddressReader (reader, buildGetOrdinal 5))
    let lazypassword = lazy (person.passwordReader (reader, buildGetOrdinal 5))
    let lazypersonphone = lazy (person.personphoneReader (reader, buildGetOrdinal 4))
    let lazyphonenumbertype = lazy (person.phonenumbertypeReader (reader, buildGetOrdinal 3))
    let lazycountryregion = lazy (person.countryregionReader (reader, buildGetOrdinal 3))
    let lazyemployee = lazy (humanresources.employeeReader (reader, buildGetOrdinal 15))
    let lazydepartment = lazy (humanresources.departmentReader (reader, buildGetOrdinal 4))
    let lazyemployeedepartmenthistory = lazy (humanresources.employeedepartmenthistoryReader (reader, buildGetOrdinal 6))
    let lazyshift = lazy (humanresources.shiftReader (reader, buildGetOrdinal 5))
    let lazyemployeepayhistory = lazy (humanresources.employeepayhistoryReader (reader, buildGetOrdinal 5))
    let lazyjobcandidate = lazy (humanresources.jobcandidateReader (reader, buildGetOrdinal 4))
    let lazybillofmaterials = lazy (production.billofmaterialsReader (reader, buildGetOrdinal 9))
    let lazyculture = lazy (production.cultureReader (reader, buildGetOrdinal 3))
    let lazydocument = lazy (production.documentReader (reader, buildGetOrdinal 13))
    let lazyproductmodel = lazy (production.productmodelReader (reader, buildGetOrdinal 6))
    let lazyproduct = lazy (production.productReader (reader, buildGetOrdinal 25))
    let lazyproductsubcategory = lazy (production.productsubcategoryReader (reader, buildGetOrdinal 5))
    let lazyproductcosthistory = lazy (production.productcosthistoryReader (reader, buildGetOrdinal 5))
    let lazyproductdocument = lazy (production.productdocumentReader (reader, buildGetOrdinal 3))
    let lazyproductdescription = lazy (production.productdescriptionReader (reader, buildGetOrdinal 4))
    let lazyproductcategory = lazy (production.productcategoryReader (reader, buildGetOrdinal 4))
    let lazylocation = lazy (production.locationReader (reader, buildGetOrdinal 5))
    let lazyproductlistpricehistory = lazy (production.productlistpricehistoryReader (reader, buildGetOrdinal 5))
    let lazyproductmodelillustration = lazy (production.productmodelillustrationReader (reader, buildGetOrdinal 3))
    let lazyillustration = lazy (production.illustrationReader (reader, buildGetOrdinal 3))
    let lazyproductmodelproductdescriptionculture = lazy (production.productmodelproductdescriptioncultureReader (reader, buildGetOrdinal 4))
    let lazyproductproductphoto = lazy (production.productproductphotoReader (reader, buildGetOrdinal 4))
    let lazyproductphoto = lazy (production.productphotoReader (reader, buildGetOrdinal 6))
    let lazyunitmeasure = lazy (production.unitmeasureReader (reader, buildGetOrdinal 3))
    let lazyproductreview = lazy (production.productreviewReader (reader, buildGetOrdinal 8))
    let lazytransactionhistoryarchive = lazy (production.transactionhistoryarchiveReader (reader, buildGetOrdinal 9))
    let lazytransactionhistory = lazy (production.transactionhistoryReader (reader, buildGetOrdinal 9))
    let lazyworkorder = lazy (production.workorderReader (reader, buildGetOrdinal 9))
    let lazyscrapreason = lazy (production.scrapreasonReader (reader, buildGetOrdinal 3))
    let lazyworkorderrouting = lazy (production.workorderroutingReader (reader, buildGetOrdinal 12))
    let lazyproductinventory = lazy (production.productinventoryReader (reader, buildGetOrdinal 7))
    let lazyproductvendor = lazy (purchasing.productvendorReader (reader, buildGetOrdinal 11))
    let lazypurchaseorderdetail = lazy (purchasing.purchaseorderdetailReader (reader, buildGetOrdinal 9))
    let lazypurchaseorderheader = lazy (purchasing.purchaseorderheaderReader (reader, buildGetOrdinal 12))
    let lazyshipmethod = lazy (purchasing.shipmethodReader (reader, buildGetOrdinal 6))
    let lazyvendor = lazy (purchasing.vendorReader (reader, buildGetOrdinal 8))
    let lazycountryregioncurrency = lazy (sales.countryregioncurrencyReader (reader, buildGetOrdinal 3))
    let lazycurrency = lazy (sales.currencyReader (reader, buildGetOrdinal 3))
    let lazycurrencyrate = lazy (sales.currencyrateReader (reader, buildGetOrdinal 7))
    let lazycustomer = lazy (sales.customerReader (reader, buildGetOrdinal 6))
    let lazypersoncreditcard = lazy (sales.personcreditcardReader (reader, buildGetOrdinal 3))
    let lazycreditcard = lazy (sales.creditcardReader (reader, buildGetOrdinal 6))
    let lazysalesorderheader = lazy (sales.salesorderheaderReader (reader, buildGetOrdinal 25))
    let lazysalesorderdetail = lazy (sales.salesorderdetailReader (reader, buildGetOrdinal 10))
    let lazysalesperson = lazy (sales.salespersonReader (reader, buildGetOrdinal 9))
    let lazysalesorderheadersalesreason = lazy (sales.salesorderheadersalesreasonReader (reader, buildGetOrdinal 3))
    let lazysalespersonquotahistory = lazy (sales.salespersonquotahistoryReader (reader, buildGetOrdinal 5))
    let lazysalesterritory = lazy (sales.salesterritoryReader (reader, buildGetOrdinal 10))
    let lazystore = lazy (sales.storeReader (reader, buildGetOrdinal 6))
    let lazyspecialofferproduct = lazy (sales.specialofferproductReader (reader, buildGetOrdinal 4))
    let lazysalesreason = lazy (sales.salesreasonReader (reader, buildGetOrdinal 4))
    let lazysalestaxrate = lazy (sales.salestaxrateReader (reader, buildGetOrdinal 7))
    let lazysalesterritoryhistory = lazy (sales.salesterritoryhistoryReader (reader, buildGetOrdinal 6))
    let lazyshoppingcartitem = lazy (sales.shoppingcartitemReader (reader, buildGetOrdinal 6))
    let lazyspecialoffer = lazy (sales.specialofferReader (reader, buildGetOrdinal 11))
    member __.address = lazyaddress.Value
    member __.stateprovince = lazystateprovince.Value
    member __.businessentityaddress = lazybusinessentityaddress.Value
    member __.addresstype = lazyaddresstype.Value
    member __.businessentity = lazybusinessentity.Value
    member __.person = lazyperson.Value
    member __.businessentitycontact = lazybusinessentitycontact.Value
    member __.contacttype = lazycontacttype.Value
    member __.emailaddress = lazyemailaddress.Value
    member __.password = lazypassword.Value
    member __.personphone = lazypersonphone.Value
    member __.phonenumbertype = lazyphonenumbertype.Value
    member __.countryregion = lazycountryregion.Value
    member __.employee = lazyemployee.Value
    member __.department = lazydepartment.Value
    member __.employeedepartmenthistory = lazyemployeedepartmenthistory.Value
    member __.shift = lazyshift.Value
    member __.employeepayhistory = lazyemployeepayhistory.Value
    member __.jobcandidate = lazyjobcandidate.Value
    member __.billofmaterials = lazybillofmaterials.Value
    member __.culture = lazyculture.Value
    member __.document = lazydocument.Value
    member __.productmodel = lazyproductmodel.Value
    member __.product = lazyproduct.Value
    member __.productsubcategory = lazyproductsubcategory.Value
    member __.productcosthistory = lazyproductcosthistory.Value
    member __.productdocument = lazyproductdocument.Value
    member __.productdescription = lazyproductdescription.Value
    member __.productcategory = lazyproductcategory.Value
    member __.location = lazylocation.Value
    member __.productlistpricehistory = lazyproductlistpricehistory.Value
    member __.productmodelillustration = lazyproductmodelillustration.Value
    member __.illustration = lazyillustration.Value
    member __.productmodelproductdescriptionculture = lazyproductmodelproductdescriptionculture.Value
    member __.productproductphoto = lazyproductproductphoto.Value
    member __.productphoto = lazyproductphoto.Value
    member __.unitmeasure = lazyunitmeasure.Value
    member __.productreview = lazyproductreview.Value
    member __.transactionhistoryarchive = lazytransactionhistoryarchive.Value
    member __.transactionhistory = lazytransactionhistory.Value
    member __.workorder = lazyworkorder.Value
    member __.scrapreason = lazyscrapreason.Value
    member __.workorderrouting = lazyworkorderrouting.Value
    member __.productinventory = lazyproductinventory.Value
    member __.productvendor = lazyproductvendor.Value
    member __.purchaseorderdetail = lazypurchaseorderdetail.Value
    member __.purchaseorderheader = lazypurchaseorderheader.Value
    member __.shipmethod = lazyshipmethod.Value
    member __.vendor = lazyvendor.Value
    member __.countryregioncurrency = lazycountryregioncurrency.Value
    member __.currency = lazycurrency.Value
    member __.currencyrate = lazycurrencyrate.Value
    member __.customer = lazycustomer.Value
    member __.personcreditcard = lazypersoncreditcard.Value
    member __.creditcard = lazycreditcard.Value
    member __.salesorderheader = lazysalesorderheader.Value
    member __.salesorderdetail = lazysalesorderdetail.Value
    member __.salesperson = lazysalesperson.Value
    member __.salesorderheadersalesreason = lazysalesorderheadersalesreason.Value
    member __.salespersonquotahistory = lazysalespersonquotahistory.Value
    member __.salesterritory = lazysalesterritory.Value
    member __.store = lazystore.Value
    member __.specialofferproduct = lazyspecialofferproduct.Value
    member __.salesreason = lazysalesreason.Value
    member __.salestaxrate = lazysalestaxrate.Value
    member __.salesterritoryhistory = lazysalesterritoryhistory.Value
    member __.shoppingcartitem = lazyshoppingcartitem.Value
    member __.specialoffer = lazyspecialoffer.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value
    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "address", false -> __.address.Read >> box
        | "address", true -> failwith "Could not read type 'address option' because no primary key exists."
        | "stateprovince", false -> __.stateprovince.Read >> box
        | "stateprovince", true -> failwith "Could not read type 'stateprovince option' because no primary key exists."
        | "businessentityaddress", false -> __.businessentityaddress.Read >> box
        | "businessentityaddress", true -> failwith "Could not read type 'businessentityaddress option' because no primary key exists."
        | "addresstype", false -> __.addresstype.Read >> box
        | "addresstype", true -> failwith "Could not read type 'addresstype option' because no primary key exists."
        | "businessentity", false -> __.businessentity.Read >> box
        | "businessentity", true -> failwith "Could not read type 'businessentity option' because no primary key exists."
        | "person", false -> __.person.Read >> box
        | "person", true -> failwith "Could not read type 'person option' because no primary key exists."
        | "businessentitycontact", false -> __.businessentitycontact.Read >> box
        | "businessentitycontact", true -> failwith "Could not read type 'businessentitycontact option' because no primary key exists."
        | "contacttype", false -> __.contacttype.Read >> box
        | "contacttype", true -> failwith "Could not read type 'contacttype option' because no primary key exists."
        | "emailaddress", false -> __.emailaddress.Read >> box
        | "emailaddress", true -> failwith "Could not read type 'emailaddress option' because no primary key exists."
        | "password", false -> __.password.Read >> box
        | "password", true -> failwith "Could not read type 'password option' because no primary key exists."
        | "personphone", false -> __.personphone.Read >> box
        | "personphone", true -> failwith "Could not read type 'personphone option' because no primary key exists."
        | "phonenumbertype", false -> __.phonenumbertype.Read >> box
        | "phonenumbertype", true -> failwith "Could not read type 'phonenumbertype option' because no primary key exists."
        | "countryregion", false -> __.countryregion.Read >> box
        | "countryregion", true -> failwith "Could not read type 'countryregion option' because no primary key exists."
        | "employee", false -> __.employee.Read >> box
        | "employee", true -> failwith "Could not read type 'employee option' because no primary key exists."
        | "department", false -> __.department.Read >> box
        | "department", true -> failwith "Could not read type 'department option' because no primary key exists."
        | "employeedepartmenthistory", false -> __.employeedepartmenthistory.Read >> box
        | "employeedepartmenthistory", true -> failwith "Could not read type 'employeedepartmenthistory option' because no primary key exists."
        | "shift", false -> __.shift.Read >> box
        | "shift", true -> failwith "Could not read type 'shift option' because no primary key exists."
        | "employeepayhistory", false -> __.employeepayhistory.Read >> box
        | "employeepayhistory", true -> failwith "Could not read type 'employeepayhistory option' because no primary key exists."
        | "jobcandidate", false -> __.jobcandidate.Read >> box
        | "jobcandidate", true -> failwith "Could not read type 'jobcandidate option' because no primary key exists."
        | "billofmaterials", false -> __.billofmaterials.Read >> box
        | "billofmaterials", true -> failwith "Could not read type 'billofmaterials option' because no primary key exists."
        | "culture", false -> __.culture.Read >> box
        | "culture", true -> failwith "Could not read type 'culture option' because no primary key exists."
        | "document", false -> __.document.Read >> box
        | "document", true -> failwith "Could not read type 'document option' because no primary key exists."
        | "productmodel", false -> __.productmodel.Read >> box
        | "productmodel", true -> failwith "Could not read type 'productmodel option' because no primary key exists."
        | "product", false -> __.product.Read >> box
        | "product", true -> failwith "Could not read type 'product option' because no primary key exists."
        | "productsubcategory", false -> __.productsubcategory.Read >> box
        | "productsubcategory", true -> failwith "Could not read type 'productsubcategory option' because no primary key exists."
        | "productcosthistory", false -> __.productcosthistory.Read >> box
        | "productcosthistory", true -> failwith "Could not read type 'productcosthistory option' because no primary key exists."
        | "productdocument", false -> __.productdocument.Read >> box
        | "productdocument", true -> failwith "Could not read type 'productdocument option' because no primary key exists."
        | "productdescription", false -> __.productdescription.Read >> box
        | "productdescription", true -> failwith "Could not read type 'productdescription option' because no primary key exists."
        | "productcategory", false -> __.productcategory.Read >> box
        | "productcategory", true -> failwith "Could not read type 'productcategory option' because no primary key exists."
        | "location", false -> __.location.Read >> box
        | "location", true -> failwith "Could not read type 'location option' because no primary key exists."
        | "productlistpricehistory", false -> __.productlistpricehistory.Read >> box
        | "productlistpricehistory", true -> failwith "Could not read type 'productlistpricehistory option' because no primary key exists."
        | "productmodelillustration", false -> __.productmodelillustration.Read >> box
        | "productmodelillustration", true -> failwith "Could not read type 'productmodelillustration option' because no primary key exists."
        | "illustration", false -> __.illustration.Read >> box
        | "illustration", true -> failwith "Could not read type 'illustration option' because no primary key exists."
        | "productmodelproductdescriptionculture", false -> __.productmodelproductdescriptionculture.Read >> box
        | "productmodelproductdescriptionculture", true -> failwith "Could not read type 'productmodelproductdescriptionculture option' because no primary key exists."
        | "productproductphoto", false -> __.productproductphoto.Read >> box
        | "productproductphoto", true -> failwith "Could not read type 'productproductphoto option' because no primary key exists."
        | "productphoto", false -> __.productphoto.Read >> box
        | "productphoto", true -> failwith "Could not read type 'productphoto option' because no primary key exists."
        | "unitmeasure", false -> __.unitmeasure.Read >> box
        | "unitmeasure", true -> failwith "Could not read type 'unitmeasure option' because no primary key exists."
        | "productreview", false -> __.productreview.Read >> box
        | "productreview", true -> failwith "Could not read type 'productreview option' because no primary key exists."
        | "transactionhistoryarchive", false -> __.transactionhistoryarchive.Read >> box
        | "transactionhistoryarchive", true -> failwith "Could not read type 'transactionhistoryarchive option' because no primary key exists."
        | "transactionhistory", false -> __.transactionhistory.Read >> box
        | "transactionhistory", true -> failwith "Could not read type 'transactionhistory option' because no primary key exists."
        | "workorder", false -> __.workorder.Read >> box
        | "workorder", true -> failwith "Could not read type 'workorder option' because no primary key exists."
        | "scrapreason", false -> __.scrapreason.Read >> box
        | "scrapreason", true -> failwith "Could not read type 'scrapreason option' because no primary key exists."
        | "workorderrouting", false -> __.workorderrouting.Read >> box
        | "workorderrouting", true -> failwith "Could not read type 'workorderrouting option' because no primary key exists."
        | "productinventory", false -> __.productinventory.Read >> box
        | "productinventory", true -> failwith "Could not read type 'productinventory option' because no primary key exists."
        | "productvendor", false -> __.productvendor.Read >> box
        | "productvendor", true -> failwith "Could not read type 'productvendor option' because no primary key exists."
        | "purchaseorderdetail", false -> __.purchaseorderdetail.Read >> box
        | "purchaseorderdetail", true -> failwith "Could not read type 'purchaseorderdetail option' because no primary key exists."
        | "purchaseorderheader", false -> __.purchaseorderheader.Read >> box
        | "purchaseorderheader", true -> failwith "Could not read type 'purchaseorderheader option' because no primary key exists."
        | "shipmethod", false -> __.shipmethod.Read >> box
        | "shipmethod", true -> failwith "Could not read type 'shipmethod option' because no primary key exists."
        | "vendor", false -> __.vendor.Read >> box
        | "vendor", true -> failwith "Could not read type 'vendor option' because no primary key exists."
        | "countryregioncurrency", false -> __.countryregioncurrency.Read >> box
        | "countryregioncurrency", true -> failwith "Could not read type 'countryregioncurrency option' because no primary key exists."
        | "currency", false -> __.currency.Read >> box
        | "currency", true -> failwith "Could not read type 'currency option' because no primary key exists."
        | "currencyrate", false -> __.currencyrate.Read >> box
        | "currencyrate", true -> failwith "Could not read type 'currencyrate option' because no primary key exists."
        | "customer", false -> __.customer.Read >> box
        | "customer", true -> failwith "Could not read type 'customer option' because no primary key exists."
        | "personcreditcard", false -> __.personcreditcard.Read >> box
        | "personcreditcard", true -> failwith "Could not read type 'personcreditcard option' because no primary key exists."
        | "creditcard", false -> __.creditcard.Read >> box
        | "creditcard", true -> failwith "Could not read type 'creditcard option' because no primary key exists."
        | "salesorderheader", false -> __.salesorderheader.Read >> box
        | "salesorderheader", true -> failwith "Could not read type 'salesorderheader option' because no primary key exists."
        | "salesorderdetail", false -> __.salesorderdetail.Read >> box
        | "salesorderdetail", true -> failwith "Could not read type 'salesorderdetail option' because no primary key exists."
        | "salesperson", false -> __.salesperson.Read >> box
        | "salesperson", true -> failwith "Could not read type 'salesperson option' because no primary key exists."
        | "salesorderheadersalesreason", false -> __.salesorderheadersalesreason.Read >> box
        | "salesorderheadersalesreason", true -> failwith "Could not read type 'salesorderheadersalesreason option' because no primary key exists."
        | "salespersonquotahistory", false -> __.salespersonquotahistory.Read >> box
        | "salespersonquotahistory", true -> failwith "Could not read type 'salespersonquotahistory option' because no primary key exists."
        | "salesterritory", false -> __.salesterritory.Read >> box
        | "salesterritory", true -> failwith "Could not read type 'salesterritory option' because no primary key exists."
        | "store", false -> __.store.Read >> box
        | "store", true -> failwith "Could not read type 'store option' because no primary key exists."
        | "specialofferproduct", false -> __.specialofferproduct.Read >> box
        | "specialofferproduct", true -> failwith "Could not read type 'specialofferproduct option' because no primary key exists."
        | "salesreason", false -> __.salesreason.Read >> box
        | "salesreason", true -> failwith "Could not read type 'salesreason option' because no primary key exists."
        | "salestaxrate", false -> __.salestaxrate.Read >> box
        | "salestaxrate", true -> failwith "Could not read type 'salestaxrate option' because no primary key exists."
        | "salesterritoryhistory", false -> __.salesterritoryhistory.Read >> box
        | "salesterritoryhistory", true -> failwith "Could not read type 'salesterritoryhistory option' because no primary key exists."
        | "shoppingcartitem", false -> __.shoppingcartitem.Read >> box
        | "shoppingcartitem", true -> failwith "Could not read type 'shoppingcartitem option' because no primary key exists."
        | "specialoffer", false -> __.specialoffer.Read >> box
        | "specialoffer", true -> failwith "Could not read type 'specialoffer option' because no primary key exists."
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Npgsql.NpgsqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
                if isOpt 
                then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
                else get ord |> box 
        
        None

    static member Read(reader: Npgsql.NpgsqlDataReader) = 
            let hydra = HydraReader(reader)
            
            let getOrdinalAndIncrement() = 
                let ordinal = hydra.AccFieldCount
                hydra.AccFieldCount <- hydra.AccFieldCount + 1
                ordinal
            
            let buildEntityReadFn (t: System.Type) = 
                let t, isOpt = 
                    if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                    then t.GenericTypeArguments.[0], true
                    else t, false
            
                match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
                | Some primitiveReader -> 
                    let ord = getOrdinalAndIncrement()
                    fun () -> primitiveReader ord
                | None ->
                    hydra.GetReaderByName(t.Name, isOpt)
            
            // Return a fn that will hydrate 'T (which may be a tuple)
            // This fn will be called once per each record returned by the data reader.
            let t = typeof<'T>
            if FSharp.Reflection.FSharpType.IsTuple(t) then
                let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
                fun () ->
                    let entities = readEntityFns |> Array.map (fun read -> read())
                    Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
            else
                let readEntityFn = t |> buildEntityReadFn
                fun () -> 
                    readEntityFn() :?> 'T
        
