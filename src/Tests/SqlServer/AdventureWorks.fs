// This code was generated by `SqlHydra.SqlServer` -- v0.300.0.0.
namespace SqlServer.AdventureWorks

type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getter o)

type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])
        
module HumanResources =
    [<CLIMutable>]
    type EmployeePayHistory =
        { BusinessEntityID: int
          RateChangeDate: System.DateTime
          Rate: decimal
          PayFrequency: byte
          ModifiedDate: System.DateTime }

    type EmployeePayHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.RateChangeDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "RateChangeDate")
        member __.Rate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Rate")
        member __.PayFrequency = RequiredColumn(reader, getOrdinal, reader.GetByte, "PayFrequency")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              RateChangeDate = __.RateChangeDate.Read()
              Rate = __.Rate.Read()
              PayFrequency = __.PayFrequency.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type JobCandidate =
        { JobCandidateID: int
          ModifiedDate: System.DateTime
          BusinessEntityID: Option<int> }

    type JobCandidateReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.JobCandidateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "JobCandidateID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.BusinessEntityID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.Read() =
            { JobCandidateID = __.JobCandidateID.Read()
              ModifiedDate = __.ModifiedDate.Read()
              BusinessEntityID = __.BusinessEntityID.Read() }

        member __.ReadIfNotNull() =
            if __.JobCandidateID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vEmployee =
        { BusinessEntityID: int
          FirstName: string
          JobTitle: string
          City: string
          StateProvinceName: string
          PostalCode: string
          CountryRegionName: string
          LastName: string
          EmailPromotion: int
          AddressLine1: string
          AddressLine2: Option<string>
          Suffix: Option<string>
          PhoneNumber: Option<string>
          PhoneNumberType: Option<string>
          EmailAddress: Option<string>
          MiddleName: Option<string>
          Title: Option<string> }

    type vEmployeeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.JobTitle = RequiredColumn(reader, getOrdinal, reader.GetString, "JobTitle")
        member __.City = RequiredColumn(reader, getOrdinal, reader.GetString, "City")
        member __.StateProvinceName = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvinceName")
        member __.PostalCode = RequiredColumn(reader, getOrdinal, reader.GetString, "PostalCode")
        member __.CountryRegionName = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionName")
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.EmailPromotion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailPromotion")
        member __.AddressLine1 = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressLine1")
        member __.AddressLine2 = OptionalColumn(reader, getOrdinal, reader.GetString, "AddressLine2")
        member __.Suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "Suffix")
        member __.PhoneNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "PhoneNumber")
        member __.PhoneNumberType = OptionalColumn(reader, getOrdinal, reader.GetString, "PhoneNumberType")
        member __.EmailAddress = OptionalColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.Title = OptionalColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              FirstName = __.FirstName.Read()
              JobTitle = __.JobTitle.Read()
              City = __.City.Read()
              StateProvinceName = __.StateProvinceName.Read()
              PostalCode = __.PostalCode.Read()
              CountryRegionName = __.CountryRegionName.Read()
              LastName = __.LastName.Read()
              EmailPromotion = __.EmailPromotion.Read()
              AddressLine1 = __.AddressLine1.Read()
              AddressLine2 = __.AddressLine2.Read()
              Suffix = __.Suffix.Read()
              PhoneNumber = __.PhoneNumber.Read()
              PhoneNumberType = __.PhoneNumberType.Read()
              EmailAddress = __.EmailAddress.Read()
              MiddleName = __.MiddleName.Read()
              Title = __.Title.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vEmployeeDepartment =
        { BusinessEntityID: int
          FirstName: string
          JobTitle: string
          Department: string
          GroupName: string
          StartDate: System.DateTime
          LastName: string
          Suffix: Option<string>
          MiddleName: Option<string>
          Title: Option<string> }

    type vEmployeeDepartmentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.JobTitle = RequiredColumn(reader, getOrdinal, reader.GetString, "JobTitle")
        member __.Department = RequiredColumn(reader, getOrdinal, reader.GetString, "Department")
        member __.GroupName = RequiredColumn(reader, getOrdinal, reader.GetString, "GroupName")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.Suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "Suffix")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.Title = OptionalColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              FirstName = __.FirstName.Read()
              JobTitle = __.JobTitle.Read()
              Department = __.Department.Read()
              GroupName = __.GroupName.Read()
              StartDate = __.StartDate.Read()
              LastName = __.LastName.Read()
              Suffix = __.Suffix.Read()
              MiddleName = __.MiddleName.Read()
              Title = __.Title.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vEmployeeDepartmentHistory =
        { BusinessEntityID: int
          FirstName: string
          LastName: string
          Shift: string
          Department: string
          GroupName: string
          StartDate: System.DateTime
          EndDate: Option<System.DateTime>
          Suffix: Option<string>
          MiddleName: Option<string>
          Title: Option<string> }

    type vEmployeeDepartmentHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.Shift = RequiredColumn(reader, getOrdinal, reader.GetString, "Shift")
        member __.Department = RequiredColumn(reader, getOrdinal, reader.GetString, "Department")
        member __.GroupName = RequiredColumn(reader, getOrdinal, reader.GetString, "GroupName")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.Suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "Suffix")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.Title = OptionalColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              FirstName = __.FirstName.Read()
              LastName = __.LastName.Read()
              Shift = __.Shift.Read()
              Department = __.Department.Read()
              GroupName = __.GroupName.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read()
              Suffix = __.Suffix.Read()
              MiddleName = __.MiddleName.Read()
              Title = __.Title.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vJobCandidate =
        { JobCandidateID: int
          ModifiedDate: System.DateTime
          BusinessEntityID: Option<int>
          ``Name.Prefix``: Option<string>
          ``Name.First``: Option<string>
          ``Name.Middle``: Option<string>
          ``Name.Last``: Option<string>
          ``Name.Suffix``: Option<string>
          Skills: Option<string>
          ``Addr.Type``: Option<string>
          ``Addr.Loc.CountryRegion``: Option<string>
          ``Addr.Loc.State``: Option<string>
          ``Addr.Loc.City``: Option<string>
          ``Addr.PostalCode``: Option<string>
          EMail: Option<string>
          WebSite: Option<string> }

    type vJobCandidateReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.JobCandidateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "JobCandidateID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.BusinessEntityID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.``Name.Prefix`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Name.Prefix")
        member __.``Name.First`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Name.First")
        member __.``Name.Middle`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Name.Middle")
        member __.``Name.Last`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Name.Last")
        member __.``Name.Suffix`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Name.Suffix")
        member __.Skills = OptionalColumn(reader, getOrdinal, reader.GetString, "Skills")
        member __.``Addr.Type`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Addr.Type")
        member __.``Addr.Loc.CountryRegion`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Addr.Loc.CountryRegion")
        member __.``Addr.Loc.State`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Addr.Loc.State")
        member __.``Addr.Loc.City`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Addr.Loc.City")
        member __.``Addr.PostalCode`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Addr.PostalCode")
        member __.EMail = OptionalColumn(reader, getOrdinal, reader.GetString, "EMail")
        member __.WebSite = OptionalColumn(reader, getOrdinal, reader.GetString, "WebSite")
        member __.Read() =
            { JobCandidateID = __.JobCandidateID.Read()
              ModifiedDate = __.ModifiedDate.Read()
              BusinessEntityID = __.BusinessEntityID.Read()
              ``Name.Prefix`` = __.``Name.Prefix``.Read()
              ``Name.First`` = __.``Name.First``.Read()
              ``Name.Middle`` = __.``Name.Middle``.Read()
              ``Name.Last`` = __.``Name.Last``.Read()
              ``Name.Suffix`` = __.``Name.Suffix``.Read()
              Skills = __.Skills.Read()
              ``Addr.Type`` = __.``Addr.Type``.Read()
              ``Addr.Loc.CountryRegion`` = __.``Addr.Loc.CountryRegion``.Read()
              ``Addr.Loc.State`` = __.``Addr.Loc.State``.Read()
              ``Addr.Loc.City`` = __.``Addr.Loc.City``.Read()
              ``Addr.PostalCode`` = __.``Addr.PostalCode``.Read()
              EMail = __.EMail.Read()
              WebSite = __.WebSite.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vJobCandidateEmployment =
        { JobCandidateID: int
          ``Emp.StartDate``: Option<System.DateTime>
          ``Emp.EndDate``: Option<System.DateTime>
          ``Emp.OrgName``: Option<string>
          ``Emp.JobTitle``: Option<string>
          ``Emp.Responsibility``: Option<string>
          ``Emp.FunctionCategory``: Option<string>
          ``Emp.IndustryCategory``: Option<string>
          ``Emp.Loc.CountryRegion``: Option<string>
          ``Emp.Loc.State``: Option<string>
          ``Emp.Loc.City``: Option<string> }

    type vJobCandidateEmploymentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.JobCandidateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "JobCandidateID")
        member __.``Emp.StartDate`` = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "Emp.StartDate")
        member __.``Emp.EndDate`` = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "Emp.EndDate")
        member __.``Emp.OrgName`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.OrgName")
        member __.``Emp.JobTitle`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.JobTitle")
        member __.``Emp.Responsibility`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.Responsibility")
        member __.``Emp.FunctionCategory`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.FunctionCategory")
        member __.``Emp.IndustryCategory`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.IndustryCategory")
        member __.``Emp.Loc.CountryRegion`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.Loc.CountryRegion")
        member __.``Emp.Loc.State`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.Loc.State")
        member __.``Emp.Loc.City`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.Loc.City")
        member __.Read() =
            { JobCandidateID = __.JobCandidateID.Read()
              ``Emp.StartDate`` = __.``Emp.StartDate``.Read()
              ``Emp.EndDate`` = __.``Emp.EndDate``.Read()
              ``Emp.OrgName`` = __.``Emp.OrgName``.Read()
              ``Emp.JobTitle`` = __.``Emp.JobTitle``.Read()
              ``Emp.Responsibility`` = __.``Emp.Responsibility``.Read()
              ``Emp.FunctionCategory`` = __.``Emp.FunctionCategory``.Read()
              ``Emp.IndustryCategory`` = __.``Emp.IndustryCategory``.Read()
              ``Emp.Loc.CountryRegion`` = __.``Emp.Loc.CountryRegion``.Read()
              ``Emp.Loc.State`` = __.``Emp.Loc.State``.Read()
              ``Emp.Loc.City`` = __.``Emp.Loc.City``.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vJobCandidateEducation =
        { JobCandidateID: int
          ``Edu.Level``: Option<string>
          ``Edu.StartDate``: Option<System.DateTime>
          ``Edu.EndDate``: Option<System.DateTime>
          ``Edu.Degree``: Option<string>
          ``Edu.Major``: Option<string>
          ``Edu.Minor``: Option<string>
          ``Edu.GPA``: Option<string>
          ``Edu.GPAScale``: Option<string>
          ``Edu.School``: Option<string>
          ``Edu.Loc.CountryRegion``: Option<string>
          ``Edu.Loc.State``: Option<string>
          ``Edu.Loc.City``: Option<string> }

    type vJobCandidateEducationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.JobCandidateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "JobCandidateID")
        member __.``Edu.Level`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Level")
        member __.``Edu.StartDate`` = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "Edu.StartDate")
        member __.``Edu.EndDate`` = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "Edu.EndDate")
        member __.``Edu.Degree`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Degree")
        member __.``Edu.Major`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Major")
        member __.``Edu.Minor`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Minor")
        member __.``Edu.GPA`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.GPA")
        member __.``Edu.GPAScale`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.GPAScale")
        member __.``Edu.School`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.School")
        member __.``Edu.Loc.CountryRegion`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Loc.CountryRegion")
        member __.``Edu.Loc.State`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Loc.State")
        member __.``Edu.Loc.City`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Loc.City")
        member __.Read() =
            { JobCandidateID = __.JobCandidateID.Read()
              ``Edu.Level`` = __.``Edu.Level``.Read()
              ``Edu.StartDate`` = __.``Edu.StartDate``.Read()
              ``Edu.EndDate`` = __.``Edu.EndDate``.Read()
              ``Edu.Degree`` = __.``Edu.Degree``.Read()
              ``Edu.Major`` = __.``Edu.Major``.Read()
              ``Edu.Minor`` = __.``Edu.Minor``.Read()
              ``Edu.GPA`` = __.``Edu.GPA``.Read()
              ``Edu.GPAScale`` = __.``Edu.GPAScale``.Read()
              ``Edu.School`` = __.``Edu.School``.Read()
              ``Edu.Loc.CountryRegion`` = __.``Edu.Loc.CountryRegion``.Read()
              ``Edu.Loc.State`` = __.``Edu.Loc.State``.Read()
              ``Edu.Loc.City`` = __.``Edu.Loc.City``.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Shift =
        { ShiftID: byte
          Name: string
          StartTime: System.TimeSpan
          EndTime: System.TimeSpan
          ModifiedDate: System.DateTime }

    type ShiftReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ShiftID = RequiredColumn(reader, getOrdinal, reader.GetByte, "ShiftID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.StartTime = RequiredColumn(reader, getOrdinal, reader.GetTimeSpan, "StartTime")
        member __.EndTime = RequiredColumn(reader, getOrdinal, reader.GetTimeSpan, "EndTime")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ShiftID = __.ShiftID.Read()
              Name = __.Name.Read()
              StartTime = __.StartTime.Read()
              EndTime = __.EndTime.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ShiftID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Department =
        { DepartmentID: int16
          Name: string
          GroupName: string
          ModifiedDate: System.DateTime }

    type DepartmentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.DepartmentID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "DepartmentID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.GroupName = RequiredColumn(reader, getOrdinal, reader.GetString, "GroupName")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { DepartmentID = __.DepartmentID.Read()
              Name = __.Name.Read()
              GroupName = __.GroupName.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.DepartmentID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Employee =
        { JobTitle: string
          BirthDate: System.DateTime
          MaritalStatus: string
          Gender: string
          HireDate: System.DateTime
          SalariedFlag: bool
          VacationHours: int16
          SickLeaveHours: int16
          CurrentFlag: bool
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          BusinessEntityID: int
          NationalIDNumber: string
          LoginID: string
          OrganizationLevel: Option<int16> }

    type EmployeeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.JobTitle = RequiredColumn(reader, getOrdinal, reader.GetString, "JobTitle")
        member __.BirthDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "BirthDate")
        member __.MaritalStatus = RequiredColumn(reader, getOrdinal, reader.GetString, "MaritalStatus")
        member __.Gender = RequiredColumn(reader, getOrdinal, reader.GetString, "Gender")
        member __.HireDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "HireDate")
        member __.SalariedFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "SalariedFlag")
        member __.VacationHours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "VacationHours")
        member __.SickLeaveHours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "SickLeaveHours")
        member __.CurrentFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "CurrentFlag")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.NationalIDNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "NationalIDNumber")
        member __.LoginID = RequiredColumn(reader, getOrdinal, reader.GetString, "LoginID")
        member __.OrganizationLevel = OptionalColumn(reader, getOrdinal, reader.GetInt16, "OrganizationLevel")
        member __.Read() =
            { JobTitle = __.JobTitle.Read()
              BirthDate = __.BirthDate.Read()
              MaritalStatus = __.MaritalStatus.Read()
              Gender = __.Gender.Read()
              HireDate = __.HireDate.Read()
              SalariedFlag = __.SalariedFlag.Read()
              VacationHours = __.VacationHours.Read()
              SickLeaveHours = __.SickLeaveHours.Read()
              CurrentFlag = __.CurrentFlag.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              BusinessEntityID = __.BusinessEntityID.Read()
              NationalIDNumber = __.NationalIDNumber.Read()
              LoginID = __.LoginID.Read()
              OrganizationLevel = __.OrganizationLevel.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type EmployeeDepartmentHistory =
        { BusinessEntityID: int
          DepartmentID: int16
          ShiftID: byte
          StartDate: System.DateTime
          ModifiedDate: System.DateTime
          EndDate: Option<System.DateTime> }

    type EmployeeDepartmentHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.DepartmentID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "DepartmentID")
        member __.ShiftID = RequiredColumn(reader, getOrdinal, reader.GetByte, "ShiftID")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              DepartmentID = __.DepartmentID.Read()
              ShiftID = __.ShiftID.Read()
              StartDate = __.StartDate.Read()
              ModifiedDate = __.ModifiedDate.Read()
              EndDate = __.EndDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

module Sales =
    [<CLIMutable>]
    type SalesOrderHeaderSalesReason =
        { SalesOrderID: int
          SalesReasonID: int
          ModifiedDate: System.DateTime }

    type SalesOrderHeaderSalesReasonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SalesOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderID")
        member __.SalesReasonID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesReasonID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { SalesOrderID = __.SalesOrderID.Read()
              SalesReasonID = __.SalesReasonID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SalesOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesPerson =
        { BusinessEntityID: int
          Bonus: decimal
          CommissionPct: decimal
          SalesYTD: decimal
          SalesLastYear: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          TerritoryID: Option<int>
          SalesQuota: Option<decimal> }

    type SalesPersonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.Bonus = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Bonus")
        member __.CommissionPct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CommissionPct")
        member __.SalesYTD = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesYTD")
        member __.SalesLastYear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesLastYear")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.TerritoryID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.SalesQuota = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "SalesQuota")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              Bonus = __.Bonus.Read()
              CommissionPct = __.CommissionPct.Read()
              SalesYTD = __.SalesYTD.Read()
              SalesLastYear = __.SalesLastYear.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              TerritoryID = __.TerritoryID.Read()
              SalesQuota = __.SalesQuota.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesPersonQuotaHistory =
        { BusinessEntityID: int
          QuotaDate: System.DateTime
          SalesQuota: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesPersonQuotaHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.QuotaDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "QuotaDate")
        member __.SalesQuota = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesQuota")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              QuotaDate = __.QuotaDate.Read()
              SalesQuota = __.SalesQuota.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesReason =
        { SalesReasonID: int
          Name: string
          ReasonType: string
          ModifiedDate: System.DateTime }

    type SalesReasonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SalesReasonID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesReasonID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ReasonType = RequiredColumn(reader, getOrdinal, reader.GetString, "ReasonType")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { SalesReasonID = __.SalesReasonID.Read()
              Name = __.Name.Read()
              ReasonType = __.ReasonType.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SalesReasonID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesTaxRate =
        { SalesTaxRateID: int
          StateProvinceID: int
          TaxType: byte
          TaxRate: decimal
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesTaxRateReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SalesTaxRateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesTaxRateID")
        member __.StateProvinceID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StateProvinceID")
        member __.TaxType = RequiredColumn(reader, getOrdinal, reader.GetByte, "TaxType")
        member __.TaxRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TaxRate")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { SalesTaxRateID = __.SalesTaxRateID.Read()
              StateProvinceID = __.StateProvinceID.Read()
              TaxType = __.TaxType.Read()
              TaxRate = __.TaxRate.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SalesTaxRateID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PersonCreditCard =
        { BusinessEntityID: int
          CreditCardID: int
          ModifiedDate: System.DateTime }

    type PersonCreditCardReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.CreditCardID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CreditCardID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              CreditCardID = __.CreditCardID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesTerritory =
        { TerritoryID: int
          Name: string
          CountryRegionCode: string
          Group: string
          SalesYTD: decimal
          SalesLastYear: decimal
          CostYTD: decimal
          CostLastYear: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesTerritoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.TerritoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
        member __.Group = RequiredColumn(reader, getOrdinal, reader.GetString, "Group")
        member __.SalesYTD = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesYTD")
        member __.SalesLastYear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesLastYear")
        member __.CostYTD = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CostYTD")
        member __.CostLastYear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CostLastYear")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { TerritoryID = __.TerritoryID.Read()
              Name = __.Name.Read()
              CountryRegionCode = __.CountryRegionCode.Read()
              Group = __.Group.Read()
              SalesYTD = __.SalesYTD.Read()
              SalesLastYear = __.SalesLastYear.Read()
              CostYTD = __.CostYTD.Read()
              CostLastYear = __.CostLastYear.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.TerritoryID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vIndividualCustomer =
        { FirstName: string
          City: string
          StateProvinceName: string
          PostalCode: string
          CountryRegionName: string
          BusinessEntityID: int
          LastName: string
          EmailPromotion: int
          AddressType: string
          AddressLine1: string
          AddressLine2: Option<string>
          Suffix: Option<string>
          PhoneNumber: Option<string>
          PhoneNumberType: Option<string>
          EmailAddress: Option<string>
          Title: Option<string>
          MiddleName: Option<string> }

    type vIndividualCustomerReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.City = RequiredColumn(reader, getOrdinal, reader.GetString, "City")
        member __.StateProvinceName = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvinceName")
        member __.PostalCode = RequiredColumn(reader, getOrdinal, reader.GetString, "PostalCode")
        member __.CountryRegionName = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionName")
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.EmailPromotion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailPromotion")
        member __.AddressType = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressType")
        member __.AddressLine1 = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressLine1")
        member __.AddressLine2 = OptionalColumn(reader, getOrdinal, reader.GetString, "AddressLine2")
        member __.Suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "Suffix")
        member __.PhoneNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "PhoneNumber")
        member __.PhoneNumberType = OptionalColumn(reader, getOrdinal, reader.GetString, "PhoneNumberType")
        member __.EmailAddress = OptionalColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
        member __.Title = OptionalColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.Read() =
            { FirstName = __.FirstName.Read()
              City = __.City.Read()
              StateProvinceName = __.StateProvinceName.Read()
              PostalCode = __.PostalCode.Read()
              CountryRegionName = __.CountryRegionName.Read()
              BusinessEntityID = __.BusinessEntityID.Read()
              LastName = __.LastName.Read()
              EmailPromotion = __.EmailPromotion.Read()
              AddressType = __.AddressType.Read()
              AddressLine1 = __.AddressLine1.Read()
              AddressLine2 = __.AddressLine2.Read()
              Suffix = __.Suffix.Read()
              PhoneNumber = __.PhoneNumber.Read()
              PhoneNumberType = __.PhoneNumberType.Read()
              EmailAddress = __.EmailAddress.Read()
              Title = __.Title.Read()
              MiddleName = __.MiddleName.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vPersonDemographics =
        { BusinessEntityID: int
          TotalPurchaseYTD: Option<decimal>
          DateFirstPurchase: Option<System.DateTime>
          BirthDate: Option<System.DateTime>
          MaritalStatus: Option<string>
          YearlyIncome: Option<string>
          Gender: Option<string>
          TotalChildren: Option<int>
          NumberChildrenAtHome: Option<int>
          Education: Option<string>
          Occupation: Option<string>
          HomeOwnerFlag: Option<bool>
          NumberCarsOwned: Option<int> }

    type vPersonDemographicsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.TotalPurchaseYTD = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "TotalPurchaseYTD")
        member __.DateFirstPurchase = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateFirstPurchase")
        member __.BirthDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "BirthDate")
        member __.MaritalStatus = OptionalColumn(reader, getOrdinal, reader.GetString, "MaritalStatus")
        member __.YearlyIncome = OptionalColumn(reader, getOrdinal, reader.GetString, "YearlyIncome")
        member __.Gender = OptionalColumn(reader, getOrdinal, reader.GetString, "Gender")
        member __.TotalChildren = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TotalChildren")
        member __.NumberChildrenAtHome = OptionalColumn(reader, getOrdinal, reader.GetInt32, "NumberChildrenAtHome")
        member __.Education = OptionalColumn(reader, getOrdinal, reader.GetString, "Education")
        member __.Occupation = OptionalColumn(reader, getOrdinal, reader.GetString, "Occupation")
        member __.HomeOwnerFlag = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "HomeOwnerFlag")
        member __.NumberCarsOwned = OptionalColumn(reader, getOrdinal, reader.GetInt32, "NumberCarsOwned")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              TotalPurchaseYTD = __.TotalPurchaseYTD.Read()
              DateFirstPurchase = __.DateFirstPurchase.Read()
              BirthDate = __.BirthDate.Read()
              MaritalStatus = __.MaritalStatus.Read()
              YearlyIncome = __.YearlyIncome.Read()
              Gender = __.Gender.Read()
              TotalChildren = __.TotalChildren.Read()
              NumberChildrenAtHome = __.NumberChildrenAtHome.Read()
              Education = __.Education.Read()
              Occupation = __.Occupation.Read()
              HomeOwnerFlag = __.HomeOwnerFlag.Read()
              NumberCarsOwned = __.NumberCarsOwned.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vSalesPerson =
        { EmailPromotion: int
          AddressLine1: string
          SalesYTD: decimal
          SalesLastYear: decimal
          JobTitle: string
          City: string
          StateProvinceName: string
          PostalCode: string
          CountryRegionName: string
          BusinessEntityID: int
          FirstName: string
          LastName: string
          Suffix: Option<string>
          MiddleName: Option<string>
          Title: Option<string>
          TerritoryName: Option<string>
          TerritoryGroup: Option<string>
          SalesQuota: Option<decimal>
          PhoneNumber: Option<string>
          PhoneNumberType: Option<string>
          EmailAddress: Option<string>
          AddressLine2: Option<string> }

    type vSalesPersonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.EmailPromotion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailPromotion")
        member __.AddressLine1 = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressLine1")
        member __.SalesYTD = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesYTD")
        member __.SalesLastYear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesLastYear")
        member __.JobTitle = RequiredColumn(reader, getOrdinal, reader.GetString, "JobTitle")
        member __.City = RequiredColumn(reader, getOrdinal, reader.GetString, "City")
        member __.StateProvinceName = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvinceName")
        member __.PostalCode = RequiredColumn(reader, getOrdinal, reader.GetString, "PostalCode")
        member __.CountryRegionName = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionName")
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.Suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "Suffix")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.Title = OptionalColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.TerritoryName = OptionalColumn(reader, getOrdinal, reader.GetString, "TerritoryName")
        member __.TerritoryGroup = OptionalColumn(reader, getOrdinal, reader.GetString, "TerritoryGroup")
        member __.SalesQuota = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "SalesQuota")
        member __.PhoneNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "PhoneNumber")
        member __.PhoneNumberType = OptionalColumn(reader, getOrdinal, reader.GetString, "PhoneNumberType")
        member __.EmailAddress = OptionalColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
        member __.AddressLine2 = OptionalColumn(reader, getOrdinal, reader.GetString, "AddressLine2")
        member __.Read() =
            { EmailPromotion = __.EmailPromotion.Read()
              AddressLine1 = __.AddressLine1.Read()
              SalesYTD = __.SalesYTD.Read()
              SalesLastYear = __.SalesLastYear.Read()
              JobTitle = __.JobTitle.Read()
              City = __.City.Read()
              StateProvinceName = __.StateProvinceName.Read()
              PostalCode = __.PostalCode.Read()
              CountryRegionName = __.CountryRegionName.Read()
              BusinessEntityID = __.BusinessEntityID.Read()
              FirstName = __.FirstName.Read()
              LastName = __.LastName.Read()
              Suffix = __.Suffix.Read()
              MiddleName = __.MiddleName.Read()
              Title = __.Title.Read()
              TerritoryName = __.TerritoryName.Read()
              TerritoryGroup = __.TerritoryGroup.Read()
              SalesQuota = __.SalesQuota.Read()
              PhoneNumber = __.PhoneNumber.Read()
              PhoneNumberType = __.PhoneNumberType.Read()
              EmailAddress = __.EmailAddress.Read()
              AddressLine2 = __.AddressLine2.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesTerritoryHistory =
        { BusinessEntityID: int
          TerritoryID: int
          StartDate: System.DateTime
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          EndDate: Option<System.DateTime> }

    type SalesTerritoryHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.TerritoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              TerritoryID = __.TerritoryID.Read()
              StartDate = __.StartDate.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              EndDate = __.EndDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vSalesPersonSalesByFiscalYears =
        { JobTitle: string
          SalesTerritory: string
          ``2002``: Option<decimal>
          ``2003``: Option<decimal>
          ``2004``: Option<decimal>
          SalesPersonID: Option<int>
          FullName: Option<string> }

    type vSalesPersonSalesByFiscalYearsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.JobTitle = RequiredColumn(reader, getOrdinal, reader.GetString, "JobTitle")
        member __.SalesTerritory = RequiredColumn(reader, getOrdinal, reader.GetString, "SalesTerritory")
        member __.``2002`` = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "2002")
        member __.``2003`` = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "2003")
        member __.``2004`` = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "2004")
        member __.SalesPersonID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "SalesPersonID")
        member __.FullName = OptionalColumn(reader, getOrdinal, reader.GetString, "FullName")
        member __.Read() =
            { JobTitle = __.JobTitle.Read()
              SalesTerritory = __.SalesTerritory.Read()
              ``2002`` = __.``2002``.Read()
              ``2003`` = __.``2003``.Read()
              ``2004`` = __.``2004``.Read()
              SalesPersonID = __.SalesPersonID.Read()
              FullName = __.FullName.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vStoreWithDemographics =
        { BusinessEntityID: int
          Name: string
          AnnualSales: Option<decimal>
          AnnualRevenue: Option<decimal>
          BankName: Option<string>
          BusinessType: Option<string>
          YearOpened: Option<int>
          Specialty: Option<string>
          SquareFeet: Option<int>
          Brands: Option<string>
          Internet: Option<string>
          NumberEmployees: Option<int> }

    type vStoreWithDemographicsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.AnnualSales = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "AnnualSales")
        member __.AnnualRevenue = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "AnnualRevenue")
        member __.BankName = OptionalColumn(reader, getOrdinal, reader.GetString, "BankName")
        member __.BusinessType = OptionalColumn(reader, getOrdinal, reader.GetString, "BusinessType")
        member __.YearOpened = OptionalColumn(reader, getOrdinal, reader.GetInt32, "YearOpened")
        member __.Specialty = OptionalColumn(reader, getOrdinal, reader.GetString, "Specialty")
        member __.SquareFeet = OptionalColumn(reader, getOrdinal, reader.GetInt32, "SquareFeet")
        member __.Brands = OptionalColumn(reader, getOrdinal, reader.GetString, "Brands")
        member __.Internet = OptionalColumn(reader, getOrdinal, reader.GetString, "Internet")
        member __.NumberEmployees = OptionalColumn(reader, getOrdinal, reader.GetInt32, "NumberEmployees")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              Name = __.Name.Read()
              AnnualSales = __.AnnualSales.Read()
              AnnualRevenue = __.AnnualRevenue.Read()
              BankName = __.BankName.Read()
              BusinessType = __.BusinessType.Read()
              YearOpened = __.YearOpened.Read()
              Specialty = __.Specialty.Read()
              SquareFeet = __.SquareFeet.Read()
              Brands = __.Brands.Read()
              Internet = __.Internet.Read()
              NumberEmployees = __.NumberEmployees.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vStoreWithContacts =
        { EmailPromotion: int
          FirstName: string
          BusinessEntityID: int
          Name: string
          ContactType: string
          LastName: string
          Suffix: Option<string>
          PhoneNumber: Option<string>
          PhoneNumberType: Option<string>
          EmailAddress: Option<string>
          Title: Option<string>
          MiddleName: Option<string> }

    type vStoreWithContactsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.EmailPromotion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailPromotion")
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ContactType = RequiredColumn(reader, getOrdinal, reader.GetString, "ContactType")
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.Suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "Suffix")
        member __.PhoneNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "PhoneNumber")
        member __.PhoneNumberType = OptionalColumn(reader, getOrdinal, reader.GetString, "PhoneNumberType")
        member __.EmailAddress = OptionalColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
        member __.Title = OptionalColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.Read() =
            { EmailPromotion = __.EmailPromotion.Read()
              FirstName = __.FirstName.Read()
              BusinessEntityID = __.BusinessEntityID.Read()
              Name = __.Name.Read()
              ContactType = __.ContactType.Read()
              LastName = __.LastName.Read()
              Suffix = __.Suffix.Read()
              PhoneNumber = __.PhoneNumber.Read()
              PhoneNumberType = __.PhoneNumberType.Read()
              EmailAddress = __.EmailAddress.Read()
              Title = __.Title.Read()
              MiddleName = __.MiddleName.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vStoreWithAddresses =
        { BusinessEntityID: int
          Name: string
          AddressType: string
          AddressLine1: string
          City: string
          StateProvinceName: string
          PostalCode: string
          CountryRegionName: string
          AddressLine2: Option<string> }

    type vStoreWithAddressesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.AddressType = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressType")
        member __.AddressLine1 = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressLine1")
        member __.City = RequiredColumn(reader, getOrdinal, reader.GetString, "City")
        member __.StateProvinceName = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvinceName")
        member __.PostalCode = RequiredColumn(reader, getOrdinal, reader.GetString, "PostalCode")
        member __.CountryRegionName = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionName")
        member __.AddressLine2 = OptionalColumn(reader, getOrdinal, reader.GetString, "AddressLine2")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              Name = __.Name.Read()
              AddressType = __.AddressType.Read()
              AddressLine1 = __.AddressLine1.Read()
              City = __.City.Read()
              StateProvinceName = __.StateProvinceName.Read()
              PostalCode = __.PostalCode.Read()
              CountryRegionName = __.CountryRegionName.Read()
              AddressLine2 = __.AddressLine2.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ShoppingCartItem =
        { ShoppingCartItemID: int
          ShoppingCartID: string
          Quantity: int
          ProductID: int
          DateCreated: System.DateTime
          ModifiedDate: System.DateTime }

    type ShoppingCartItemReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ShoppingCartItemID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShoppingCartItemID")
        member __.ShoppingCartID = RequiredColumn(reader, getOrdinal, reader.GetString, "ShoppingCartID")
        member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Quantity")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.DateCreated = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DateCreated")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ShoppingCartItemID = __.ShoppingCartItemID.Read()
              ShoppingCartID = __.ShoppingCartID.Read()
              Quantity = __.Quantity.Read()
              ProductID = __.ProductID.Read()
              DateCreated = __.DateCreated.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ShoppingCartItemID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SpecialOffer =
        { rowguid: System.Guid
          ModifiedDate: System.DateTime
          SpecialOfferID: int
          Description: string
          DiscountPct: decimal
          Type: string
          Category: string
          StartDate: System.DateTime
          EndDate: System.DateTime
          MinQty: int
          MaxQty: Option<int> }

    type SpecialOfferReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.SpecialOfferID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SpecialOfferID")
        member __.Description = RequiredColumn(reader, getOrdinal, reader.GetString, "Description")
        member __.DiscountPct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "DiscountPct")
        member __.Type = RequiredColumn(reader, getOrdinal, reader.GetString, "Type")
        member __.Category = RequiredColumn(reader, getOrdinal, reader.GetString, "Category")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.EndDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.MinQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MinQty")
        member __.MaxQty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "MaxQty")
        member __.Read() =
            { rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              SpecialOfferID = __.SpecialOfferID.Read()
              Description = __.Description.Read()
              DiscountPct = __.DiscountPct.Read()
              Type = __.Type.Read()
              Category = __.Category.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read()
              MinQty = __.MinQty.Read()
              MaxQty = __.MaxQty.Read() }

        member __.ReadIfNotNull() =
            if __.SpecialOfferID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SpecialOfferProduct =
        { SpecialOfferID: int
          ProductID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SpecialOfferProductReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SpecialOfferID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SpecialOfferID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { SpecialOfferID = __.SpecialOfferID.Read()
              ProductID = __.ProductID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SpecialOfferID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Store =
        { rowguid: System.Guid
          ModifiedDate: System.DateTime
          BusinessEntityID: int
          Name: string
          SalesPersonID: Option<int> }

    type StoreReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.SalesPersonID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "SalesPersonID")
        member __.Read() =
            { rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              BusinessEntityID = __.BusinessEntityID.Read()
              Name = __.Name.Read()
              SalesPersonID = __.SalesPersonID.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CountryRegionCurrency =
        { CountryRegionCode: string
          CurrencyCode: string
          ModifiedDate: System.DateTime }

    type CountryRegionCurrencyReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
        member __.CurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CurrencyCode")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { CountryRegionCode = __.CountryRegionCode.Read()
              CurrencyCode = __.CurrencyCode.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CountryRegionCode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CreditCard =
        { CreditCardID: int
          CardType: string
          CardNumber: string
          ExpMonth: byte
          ExpYear: int16
          ModifiedDate: System.DateTime }

    type CreditCardReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CreditCardID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CreditCardID")
        member __.CardType = RequiredColumn(reader, getOrdinal, reader.GetString, "CardType")
        member __.CardNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "CardNumber")
        member __.ExpMonth = RequiredColumn(reader, getOrdinal, reader.GetByte, "ExpMonth")
        member __.ExpYear = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ExpYear")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { CreditCardID = __.CreditCardID.Read()
              CardType = __.CardType.Read()
              CardNumber = __.CardNumber.Read()
              ExpMonth = __.ExpMonth.Read()
              ExpYear = __.ExpYear.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CreditCardID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Currency =
        { CurrencyCode: string
          Name: string
          ModifiedDate: System.DateTime }

    type CurrencyReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CurrencyCode")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { CurrencyCode = __.CurrencyCode.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CurrencyCode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CurrencyRate =
        { CurrencyRateID: int
          CurrencyRateDate: System.DateTime
          FromCurrencyCode: string
          ToCurrencyCode: string
          AverageRate: decimal
          EndOfDayRate: decimal
          ModifiedDate: System.DateTime }

    type CurrencyRateReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CurrencyRateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CurrencyRateID")
        member __.CurrencyRateDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CurrencyRateDate")
        member __.FromCurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "FromCurrencyCode")
        member __.ToCurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "ToCurrencyCode")
        member __.AverageRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "AverageRate")
        member __.EndOfDayRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "EndOfDayRate")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { CurrencyRateID = __.CurrencyRateID.Read()
              CurrencyRateDate = __.CurrencyRateDate.Read()
              FromCurrencyCode = __.FromCurrencyCode.Read()
              ToCurrencyCode = __.ToCurrencyCode.Read()
              AverageRate = __.AverageRate.Read()
              EndOfDayRate = __.EndOfDayRate.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CurrencyRateID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Customer =
        { CustomerID: int
          AccountNumber: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          PersonID: Option<int>
          StoreID: Option<int>
          TerritoryID: Option<int> }

    type CustomerReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CustomerID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CustomerID")
        member __.AccountNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "AccountNumber")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.PersonID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "PersonID")
        member __.StoreID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "StoreID")
        member __.TerritoryID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.Read() =
            { CustomerID = __.CustomerID.Read()
              AccountNumber = __.AccountNumber.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              PersonID = __.PersonID.Read()
              StoreID = __.StoreID.Read()
              TerritoryID = __.TerritoryID.Read() }

        member __.ReadIfNotNull() =
            if __.CustomerID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesOrderDetail =
        { SalesOrderID: int
          SalesOrderDetailID: int
          OrderQty: int16
          ProductID: int
          SpecialOfferID: int
          UnitPrice: decimal
          UnitPriceDiscount: decimal
          LineTotal: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          CarrierTrackingNumber: Option<string> }

    type SalesOrderDetailReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SalesOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderID")
        member __.SalesOrderDetailID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderDetailID")
        member __.OrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "OrderQty")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.SpecialOfferID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SpecialOfferID")
        member __.UnitPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "UnitPrice")
        member __.UnitPriceDiscount = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "UnitPriceDiscount")
        member __.LineTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "LineTotal")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.CarrierTrackingNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "CarrierTrackingNumber")
        member __.Read() =
            { SalesOrderID = __.SalesOrderID.Read()
              SalesOrderDetailID = __.SalesOrderDetailID.Read()
              OrderQty = __.OrderQty.Read()
              ProductID = __.ProductID.Read()
              SpecialOfferID = __.SpecialOfferID.Read()
              UnitPrice = __.UnitPrice.Read()
              UnitPriceDiscount = __.UnitPriceDiscount.Read()
              LineTotal = __.LineTotal.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              CarrierTrackingNumber = __.CarrierTrackingNumber.Read() }

        member __.ReadIfNotNull() =
            if __.SalesOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesOrderHeader =
        { Status: byte
          OnlineOrderFlag: bool
          SalesOrderNumber: string
          BillToAddressID: int
          ShipToAddressID: int
          ShipMethodID: int
          SubTotal: decimal
          TaxAmt: decimal
          Freight: decimal
          TotalDue: decimal
          SalesOrderID: int
          RevisionNumber: byte
          OrderDate: System.DateTime
          DueDate: System.DateTime
          CustomerID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          SalesPersonID: Option<int>
          TerritoryID: Option<int>
          ShipDate: Option<System.DateTime>
          Comment: Option<string>
          CreditCardID: Option<int>
          CreditCardApprovalCode: Option<string>
          CurrencyRateID: Option<int>
          PurchaseOrderNumber: Option<string>
          AccountNumber: Option<string> }

    type SalesOrderHeaderReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Status = RequiredColumn(reader, getOrdinal, reader.GetByte, "Status")
        member __.OnlineOrderFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "OnlineOrderFlag")
        member __.SalesOrderNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "SalesOrderNumber")
        member __.BillToAddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BillToAddressID")
        member __.ShipToAddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipToAddressID")
        member __.ShipMethodID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipMethodID")
        member __.SubTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SubTotal")
        member __.TaxAmt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TaxAmt")
        member __.Freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Freight")
        member __.TotalDue = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TotalDue")
        member __.SalesOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderID")
        member __.RevisionNumber = RequiredColumn(reader, getOrdinal, reader.GetByte, "RevisionNumber")
        member __.OrderDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "OrderDate")
        member __.DueDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DueDate")
        member __.CustomerID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CustomerID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.SalesPersonID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "SalesPersonID")
        member __.TerritoryID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.ShipDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ShipDate")
        member __.Comment = OptionalColumn(reader, getOrdinal, reader.GetString, "Comment")
        member __.CreditCardID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "CreditCardID")
        member __.CreditCardApprovalCode = OptionalColumn(reader, getOrdinal, reader.GetString, "CreditCardApprovalCode")
        member __.CurrencyRateID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "CurrencyRateID")
        member __.PurchaseOrderNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "PurchaseOrderNumber")
        member __.AccountNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "AccountNumber")
        member __.Read() =
            { Status = __.Status.Read()
              OnlineOrderFlag = __.OnlineOrderFlag.Read()
              SalesOrderNumber = __.SalesOrderNumber.Read()
              BillToAddressID = __.BillToAddressID.Read()
              ShipToAddressID = __.ShipToAddressID.Read()
              ShipMethodID = __.ShipMethodID.Read()
              SubTotal = __.SubTotal.Read()
              TaxAmt = __.TaxAmt.Read()
              Freight = __.Freight.Read()
              TotalDue = __.TotalDue.Read()
              SalesOrderID = __.SalesOrderID.Read()
              RevisionNumber = __.RevisionNumber.Read()
              OrderDate = __.OrderDate.Read()
              DueDate = __.DueDate.Read()
              CustomerID = __.CustomerID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              SalesPersonID = __.SalesPersonID.Read()
              TerritoryID = __.TerritoryID.Read()
              ShipDate = __.ShipDate.Read()
              Comment = __.Comment.Read()
              CreditCardID = __.CreditCardID.Read()
              CreditCardApprovalCode = __.CreditCardApprovalCode.Read()
              CurrencyRateID = __.CurrencyRateID.Read()
              PurchaseOrderNumber = __.PurchaseOrderNumber.Read()
              AccountNumber = __.AccountNumber.Read() }

        member __.ReadIfNotNull() =
            if __.SalesOrderID.IsNull() then None else Some(__.Read())

module Production =
    [<CLIMutable>]
    type Illustration =
        { ModifiedDate: System.DateTime
          IllustrationID: int }

    type IllustrationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.IllustrationID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "IllustrationID")
        member __.Read() =
            { ModifiedDate = __.ModifiedDate.Read()
              IllustrationID = __.IllustrationID.Read() }

        member __.ReadIfNotNull() =
            if __.IllustrationID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Location =
        { LocationID: int16
          Name: string
          CostRate: decimal
          Availability: decimal
          ModifiedDate: System.DateTime }

    type LocationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.LocationID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "LocationID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.CostRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CostRate")
        member __.Availability = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Availability")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { LocationID = __.LocationID.Read()
              Name = __.Name.Read()
              CostRate = __.CostRate.Read()
              Availability = __.Availability.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.LocationID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Product =
        { ProductID: int
          Name: string
          ProductNumber: string
          MakeFlag: bool
          FinishedGoodsFlag: bool
          SafetyStockLevel: int16
          ReorderPoint: int16
          StandardCost: decimal
          ListPrice: decimal
          DaysToManufacture: int
          SellStartDate: System.DateTime
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          SellEndDate: Option<System.DateTime>
          DiscontinuedDate: Option<System.DateTime>
          ProductLine: Option<string>
          Class: Option<string>
          Style: Option<string>
          ProductSubcategoryID: Option<int>
          ProductModelID: Option<int>
          Size: Option<string>
          SizeUnitMeasureCode: Option<string>
          WeightUnitMeasureCode: Option<string>
          Weight: Option<decimal>
          Color: Option<string> }

    type ProductReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ProductNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "ProductNumber")
        member __.MakeFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "MakeFlag")
        member __.FinishedGoodsFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "FinishedGoodsFlag")
        member __.SafetyStockLevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "SafetyStockLevel")
        member __.ReorderPoint = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ReorderPoint")
        member __.StandardCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StandardCost")
        member __.ListPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ListPrice")
        member __.DaysToManufacture = RequiredColumn(reader, getOrdinal, reader.GetInt32, "DaysToManufacture")
        member __.SellStartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "SellStartDate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.SellEndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SellEndDate")
        member __.DiscontinuedDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DiscontinuedDate")
        member __.ProductLine = OptionalColumn(reader, getOrdinal, reader.GetString, "ProductLine")
        member __.Class = OptionalColumn(reader, getOrdinal, reader.GetString, "Class")
        member __.Style = OptionalColumn(reader, getOrdinal, reader.GetString, "Style")
        member __.ProductSubcategoryID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ProductSubcategoryID")
        member __.ProductModelID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.Size = OptionalColumn(reader, getOrdinal, reader.GetString, "Size")
        member __.SizeUnitMeasureCode = OptionalColumn(reader, getOrdinal, reader.GetString, "SizeUnitMeasureCode")
        member __.WeightUnitMeasureCode = OptionalColumn(reader, getOrdinal, reader.GetString, "WeightUnitMeasureCode")
        member __.Weight = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "Weight")
        member __.Color = OptionalColumn(reader, getOrdinal, reader.GetString, "Color")
        member __.Read() =
            { ProductID = __.ProductID.Read()
              Name = __.Name.Read()
              ProductNumber = __.ProductNumber.Read()
              MakeFlag = __.MakeFlag.Read()
              FinishedGoodsFlag = __.FinishedGoodsFlag.Read()
              SafetyStockLevel = __.SafetyStockLevel.Read()
              ReorderPoint = __.ReorderPoint.Read()
              StandardCost = __.StandardCost.Read()
              ListPrice = __.ListPrice.Read()
              DaysToManufacture = __.DaysToManufacture.Read()
              SellStartDate = __.SellStartDate.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              SellEndDate = __.SellEndDate.Read()
              DiscontinuedDate = __.DiscontinuedDate.Read()
              ProductLine = __.ProductLine.Read()
              Class = __.Class.Read()
              Style = __.Style.Read()
              ProductSubcategoryID = __.ProductSubcategoryID.Read()
              ProductModelID = __.ProductModelID.Read()
              Size = __.Size.Read()
              SizeUnitMeasureCode = __.SizeUnitMeasureCode.Read()
              WeightUnitMeasureCode = __.WeightUnitMeasureCode.Read()
              Weight = __.Weight.Read()
              Color = __.Color.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vProductAndDescription =
        { ProductID: int
          Name: string
          ProductModel: string
          CultureID: string
          Description: string }

    type vProductAndDescriptionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ProductModel = RequiredColumn(reader, getOrdinal, reader.GetString, "ProductModel")
        member __.CultureID = RequiredColumn(reader, getOrdinal, reader.GetString, "CultureID")
        member __.Description = RequiredColumn(reader, getOrdinal, reader.GetString, "Description")
        member __.Read() =
            { ProductID = __.ProductID.Read()
              Name = __.Name.Read()
              ProductModel = __.ProductModel.Read()
              CultureID = __.CultureID.Read()
              Description = __.Description.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vProductModelCatalogDescription =
        { ProductModelID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          Summary: Option<string>
          Manufacturer: Option<string>
          Copyright: Option<string>
          ProductURL: Option<string>
          WarrantyPeriod: Option<string>
          WarrantyDescription: Option<string>
          NoOfYears: Option<string>
          MaintenanceDescription: Option<string>
          Wheel: Option<string>
          Saddle: Option<string>
          Pedal: Option<string>
          BikeFrame: Option<string>
          Crankset: Option<string>
          PictureAngle: Option<string>
          PictureSize: Option<string>
          ProductPhotoID: Option<string>
          Material: Option<string>
          Color: Option<string>
          ProductLine: Option<string>
          Style: Option<string>
          RiderExperience: Option<string> }

    type vProductModelCatalogDescriptionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Summary = OptionalColumn(reader, getOrdinal, reader.GetString, "Summary")
        member __.Manufacturer = OptionalColumn(reader, getOrdinal, reader.GetString, "Manufacturer")
        member __.Copyright = OptionalColumn(reader, getOrdinal, reader.GetString, "Copyright")
        member __.ProductURL = OptionalColumn(reader, getOrdinal, reader.GetString, "ProductURL")
        member __.WarrantyPeriod = OptionalColumn(reader, getOrdinal, reader.GetString, "WarrantyPeriod")
        member __.WarrantyDescription = OptionalColumn(reader, getOrdinal, reader.GetString, "WarrantyDescription")
        member __.NoOfYears = OptionalColumn(reader, getOrdinal, reader.GetString, "NoOfYears")
        member __.MaintenanceDescription = OptionalColumn(reader, getOrdinal, reader.GetString, "MaintenanceDescription")
        member __.Wheel = OptionalColumn(reader, getOrdinal, reader.GetString, "Wheel")
        member __.Saddle = OptionalColumn(reader, getOrdinal, reader.GetString, "Saddle")
        member __.Pedal = OptionalColumn(reader, getOrdinal, reader.GetString, "Pedal")
        member __.BikeFrame = OptionalColumn(reader, getOrdinal, reader.GetString, "BikeFrame")
        member __.Crankset = OptionalColumn(reader, getOrdinal, reader.GetString, "Crankset")
        member __.PictureAngle = OptionalColumn(reader, getOrdinal, reader.GetString, "PictureAngle")
        member __.PictureSize = OptionalColumn(reader, getOrdinal, reader.GetString, "PictureSize")
        member __.ProductPhotoID = OptionalColumn(reader, getOrdinal, reader.GetString, "ProductPhotoID")
        member __.Material = OptionalColumn(reader, getOrdinal, reader.GetString, "Material")
        member __.Color = OptionalColumn(reader, getOrdinal, reader.GetString, "Color")
        member __.ProductLine = OptionalColumn(reader, getOrdinal, reader.GetString, "ProductLine")
        member __.Style = OptionalColumn(reader, getOrdinal, reader.GetString, "Style")
        member __.RiderExperience = OptionalColumn(reader, getOrdinal, reader.GetString, "RiderExperience")
        member __.Read() =
            { ProductModelID = __.ProductModelID.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              Summary = __.Summary.Read()
              Manufacturer = __.Manufacturer.Read()
              Copyright = __.Copyright.Read()
              ProductURL = __.ProductURL.Read()
              WarrantyPeriod = __.WarrantyPeriod.Read()
              WarrantyDescription = __.WarrantyDescription.Read()
              NoOfYears = __.NoOfYears.Read()
              MaintenanceDescription = __.MaintenanceDescription.Read()
              Wheel = __.Wheel.Read()
              Saddle = __.Saddle.Read()
              Pedal = __.Pedal.Read()
              BikeFrame = __.BikeFrame.Read()
              Crankset = __.Crankset.Read()
              PictureAngle = __.PictureAngle.Read()
              PictureSize = __.PictureSize.Read()
              ProductPhotoID = __.ProductPhotoID.Read()
              Material = __.Material.Read()
              Color = __.Color.Read()
              ProductLine = __.ProductLine.Read()
              Style = __.Style.Read()
              RiderExperience = __.RiderExperience.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vProductModelInstructions =
        { ProductModelID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          Instructions: Option<string>
          LocationID: Option<int>
          SetupHours: Option<decimal>
          MachineHours: Option<decimal>
          LaborHours: Option<decimal>
          LotSize: Option<int>
          Step: Option<string> }

    type vProductModelInstructionsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Instructions = OptionalColumn(reader, getOrdinal, reader.GetString, "Instructions")
        member __.LocationID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "LocationID")
        member __.SetupHours = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "SetupHours")
        member __.MachineHours = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "MachineHours")
        member __.LaborHours = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "LaborHours")
        member __.LotSize = OptionalColumn(reader, getOrdinal, reader.GetInt32, "LotSize")
        member __.Step = OptionalColumn(reader, getOrdinal, reader.GetString, "Step")
        member __.Read() =
            { ProductModelID = __.ProductModelID.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              Instructions = __.Instructions.Read()
              LocationID = __.LocationID.Read()
              SetupHours = __.SetupHours.Read()
              MachineHours = __.MachineHours.Read()
              LaborHours = __.LaborHours.Read()
              LotSize = __.LotSize.Read()
              Step = __.Step.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ScrapReason =
        { ScrapReasonID: int16
          Name: string
          ModifiedDate: System.DateTime }

    type ScrapReasonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ScrapReasonID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ScrapReasonID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ScrapReasonID = __.ScrapReasonID.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ScrapReasonID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductCategory =
        { ProductCategoryID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductCategoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductCategoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductCategoryID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ProductCategoryID = __.ProductCategoryID.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductCategoryID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductCostHistory =
        { ProductID: int
          StartDate: System.DateTime
          StandardCost: decimal
          ModifiedDate: System.DateTime
          EndDate: Option<System.DateTime> }

    type ProductCostHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.StandardCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StandardCost")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.Read() =
            { ProductID = __.ProductID.Read()
              StartDate = __.StartDate.Read()
              StandardCost = __.StandardCost.Read()
              ModifiedDate = __.ModifiedDate.Read()
              EndDate = __.EndDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductDescription =
        { ProductDescriptionID: int
          Description: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductDescriptionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductDescriptionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductDescriptionID")
        member __.Description = RequiredColumn(reader, getOrdinal, reader.GetString, "Description")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ProductDescriptionID = __.ProductDescriptionID.Read()
              Description = __.Description.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductDescriptionID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductDocument =
        { ProductID: int
          ModifiedDate: System.DateTime }

    type ProductDocumentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ProductID = __.ProductID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductInventory =
        { ProductID: int
          LocationID: int16
          Shelf: string
          Bin: byte
          Quantity: int16
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductInventoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.LocationID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "LocationID")
        member __.Shelf = RequiredColumn(reader, getOrdinal, reader.GetString, "Shelf")
        member __.Bin = RequiredColumn(reader, getOrdinal, reader.GetByte, "Bin")
        member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt16, "Quantity")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ProductID = __.ProductID.Read()
              LocationID = __.LocationID.Read()
              Shelf = __.Shelf.Read()
              Bin = __.Bin.Read()
              Quantity = __.Quantity.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductListPriceHistory =
        { ListPrice: decimal
          ModifiedDate: System.DateTime
          ProductID: int
          StartDate: System.DateTime
          EndDate: Option<System.DateTime> }

    type ProductListPriceHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ListPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ListPrice")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.Read() =
            { ListPrice = __.ListPrice.Read()
              ModifiedDate = __.ModifiedDate.Read()
              ProductID = __.ProductID.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductModel =
        { rowguid: System.Guid
          ModifiedDate: System.DateTime
          ProductModelID: int
          Name: string }

    type ProductModelReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.Read() =
            { rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              ProductModelID = __.ProductModelID.Read()
              Name = __.Name.Read() }

        member __.ReadIfNotNull() =
            if __.ProductModelID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductModelIllustration =
        { ProductModelID: int
          IllustrationID: int
          ModifiedDate: System.DateTime }

    type ProductModelIllustrationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.IllustrationID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "IllustrationID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ProductModelID = __.ProductModelID.Read()
              IllustrationID = __.IllustrationID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductModelID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductModelProductDescriptionCulture =
        { ProductModelID: int
          ProductDescriptionID: int
          CultureID: string
          ModifiedDate: System.DateTime }

    type ProductModelProductDescriptionCultureReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.ProductDescriptionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductDescriptionID")
        member __.CultureID = RequiredColumn(reader, getOrdinal, reader.GetString, "CultureID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ProductModelID = __.ProductModelID.Read()
              ProductDescriptionID = __.ProductDescriptionID.Read()
              CultureID = __.CultureID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductModelID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type BillOfMaterials =
        { BillOfMaterialsID: int
          UnitMeasureCode: string
          BOMLevel: int16
          PerAssemblyQty: decimal
          ModifiedDate: System.DateTime
          ComponentID: int
          StartDate: System.DateTime
          EndDate: Option<System.DateTime>
          ProductAssemblyID: Option<int> }

    type BillOfMaterialsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BillOfMaterialsID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BillOfMaterialsID")
        member __.UnitMeasureCode = RequiredColumn(reader, getOrdinal, reader.GetString, "UnitMeasureCode")
        member __.BOMLevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "BOMLevel")
        member __.PerAssemblyQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "PerAssemblyQty")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.ComponentID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ComponentID")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.ProductAssemblyID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ProductAssemblyID")
        member __.Read() =
            { BillOfMaterialsID = __.BillOfMaterialsID.Read()
              UnitMeasureCode = __.UnitMeasureCode.Read()
              BOMLevel = __.BOMLevel.Read()
              PerAssemblyQty = __.PerAssemblyQty.Read()
              ModifiedDate = __.ModifiedDate.Read()
              ComponentID = __.ComponentID.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read()
              ProductAssemblyID = __.ProductAssemblyID.Read() }

        member __.ReadIfNotNull() =
            if __.BillOfMaterialsID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductPhoto =
        { ProductPhotoID: int
          ModifiedDate: System.DateTime
          ThumbNailPhoto: Option<byte []>
          ThumbnailPhotoFileName: Option<string>
          LargePhoto: Option<byte []>
          LargePhotoFileName: Option<string> }

    type ProductPhotoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductPhotoID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductPhotoID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.ThumbNailPhoto = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "ThumbNailPhoto")
        member __.ThumbnailPhotoFileName = OptionalColumn(reader, getOrdinal, reader.GetString, "ThumbnailPhotoFileName")
        member __.LargePhoto = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "LargePhoto")
        member __.LargePhotoFileName = OptionalColumn(reader, getOrdinal, reader.GetString, "LargePhotoFileName")
        member __.Read() =
            { ProductPhotoID = __.ProductPhotoID.Read()
              ModifiedDate = __.ModifiedDate.Read()
              ThumbNailPhoto = __.ThumbNailPhoto.Read()
              ThumbnailPhotoFileName = __.ThumbnailPhotoFileName.Read()
              LargePhoto = __.LargePhoto.Read()
              LargePhotoFileName = __.LargePhotoFileName.Read() }

        member __.ReadIfNotNull() =
            if __.ProductPhotoID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductProductPhoto =
        { ProductID: int
          ProductPhotoID: int
          Primary: bool
          ModifiedDate: System.DateTime }

    type ProductProductPhotoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.ProductPhotoID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductPhotoID")
        member __.Primary = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "Primary")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ProductID = __.ProductID.Read()
              ProductPhotoID = __.ProductPhotoID.Read()
              Primary = __.Primary.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type TransactionHistory =
        { TransactionID: int
          ProductID: int
          ReferenceOrderID: int
          ReferenceOrderLineID: int
          TransactionDate: System.DateTime
          TransactionType: string
          Quantity: int
          ActualCost: decimal
          ModifiedDate: System.DateTime }

    type TransactionHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.TransactionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TransactionID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.ReferenceOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderID")
        member __.ReferenceOrderLineID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderLineID")
        member __.TransactionDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "TransactionDate")
        member __.TransactionType = RequiredColumn(reader, getOrdinal, reader.GetString, "TransactionType")
        member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Quantity")
        member __.ActualCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ActualCost")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { TransactionID = __.TransactionID.Read()
              ProductID = __.ProductID.Read()
              ReferenceOrderID = __.ReferenceOrderID.Read()
              ReferenceOrderLineID = __.ReferenceOrderLineID.Read()
              TransactionDate = __.TransactionDate.Read()
              TransactionType = __.TransactionType.Read()
              Quantity = __.Quantity.Read()
              ActualCost = __.ActualCost.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.TransactionID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductReview =
        { ModifiedDate: System.DateTime
          ProductReviewID: int
          ProductID: int
          ReviewerName: string
          ReviewDate: System.DateTime
          EmailAddress: string
          Rating: int
          Comments: Option<string> }

    type ProductReviewReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.ProductReviewID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductReviewID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.ReviewerName = RequiredColumn(reader, getOrdinal, reader.GetString, "ReviewerName")
        member __.ReviewDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ReviewDate")
        member __.EmailAddress = RequiredColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
        member __.Rating = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Rating")
        member __.Comments = OptionalColumn(reader, getOrdinal, reader.GetString, "Comments")
        member __.Read() =
            { ModifiedDate = __.ModifiedDate.Read()
              ProductReviewID = __.ProductReviewID.Read()
              ProductID = __.ProductID.Read()
              ReviewerName = __.ReviewerName.Read()
              ReviewDate = __.ReviewDate.Read()
              EmailAddress = __.EmailAddress.Read()
              Rating = __.Rating.Read()
              Comments = __.Comments.Read() }

        member __.ReadIfNotNull() =
            if __.ProductReviewID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type TransactionHistoryArchive =
        { TransactionID: int
          ProductID: int
          ReferenceOrderID: int
          ReferenceOrderLineID: int
          TransactionDate: System.DateTime
          TransactionType: string
          Quantity: int
          ActualCost: decimal
          ModifiedDate: System.DateTime }

    type TransactionHistoryArchiveReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.TransactionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TransactionID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.ReferenceOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderID")
        member __.ReferenceOrderLineID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderLineID")
        member __.TransactionDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "TransactionDate")
        member __.TransactionType = RequiredColumn(reader, getOrdinal, reader.GetString, "TransactionType")
        member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Quantity")
        member __.ActualCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ActualCost")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { TransactionID = __.TransactionID.Read()
              ProductID = __.ProductID.Read()
              ReferenceOrderID = __.ReferenceOrderID.Read()
              ReferenceOrderLineID = __.ReferenceOrderLineID.Read()
              TransactionDate = __.TransactionDate.Read()
              TransactionType = __.TransactionType.Read()
              Quantity = __.Quantity.Read()
              ActualCost = __.ActualCost.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.TransactionID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductSubcategory =
        { ProductSubcategoryID: int
          ProductCategoryID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductSubcategoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductSubcategoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductSubcategoryID")
        member __.ProductCategoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductCategoryID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ProductSubcategoryID = __.ProductSubcategoryID.Read()
              ProductCategoryID = __.ProductCategoryID.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductSubcategoryID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type UnitMeasure =
        { UnitMeasureCode: string
          Name: string
          ModifiedDate: System.DateTime }

    type UnitMeasureReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.UnitMeasureCode = RequiredColumn(reader, getOrdinal, reader.GetString, "UnitMeasureCode")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { UnitMeasureCode = __.UnitMeasureCode.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.UnitMeasureCode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type WorkOrder =
        { WorkOrderID: int
          ProductID: int
          OrderQty: int
          StockedQty: int
          ScrappedQty: int16
          StartDate: System.DateTime
          ModifiedDate: System.DateTime
          DueDate: System.DateTime
          ScrapReasonID: Option<int16>
          EndDate: Option<System.DateTime> }

    type WorkOrderReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.WorkOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "WorkOrderID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.OrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "OrderQty")
        member __.StockedQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StockedQty")
        member __.ScrappedQty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ScrappedQty")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.DueDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DueDate")
        member __.ScrapReasonID = OptionalColumn(reader, getOrdinal, reader.GetInt16, "ScrapReasonID")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.Read() =
            { WorkOrderID = __.WorkOrderID.Read()
              ProductID = __.ProductID.Read()
              OrderQty = __.OrderQty.Read()
              StockedQty = __.StockedQty.Read()
              ScrappedQty = __.ScrappedQty.Read()
              StartDate = __.StartDate.Read()
              ModifiedDate = __.ModifiedDate.Read()
              DueDate = __.DueDate.Read()
              ScrapReasonID = __.ScrapReasonID.Read()
              EndDate = __.EndDate.Read() }

        member __.ReadIfNotNull() =
            if __.WorkOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Culture =
        { CultureID: string
          Name: string
          ModifiedDate: System.DateTime }

    type CultureReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CultureID = RequiredColumn(reader, getOrdinal, reader.GetString, "CultureID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { CultureID = __.CultureID.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CultureID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type WorkOrderRouting =
        { WorkOrderID: int
          ProductID: int
          OperationSequence: int16
          LocationID: int16
          ScheduledStartDate: System.DateTime
          ScheduledEndDate: System.DateTime
          ModifiedDate: System.DateTime
          PlannedCost: decimal
          ActualCost: Option<decimal>
          ActualStartDate: Option<System.DateTime>
          ActualEndDate: Option<System.DateTime>
          ActualResourceHrs: Option<decimal> }

    type WorkOrderRoutingReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.WorkOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "WorkOrderID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.OperationSequence = RequiredColumn(reader, getOrdinal, reader.GetInt16, "OperationSequence")
        member __.LocationID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "LocationID")
        member __.ScheduledStartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ScheduledStartDate")
        member __.ScheduledEndDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ScheduledEndDate")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.PlannedCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "PlannedCost")
        member __.ActualCost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ActualCost")
        member __.ActualStartDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ActualStartDate")
        member __.ActualEndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ActualEndDate")
        member __.ActualResourceHrs = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ActualResourceHrs")
        member __.Read() =
            { WorkOrderID = __.WorkOrderID.Read()
              ProductID = __.ProductID.Read()
              OperationSequence = __.OperationSequence.Read()
              LocationID = __.LocationID.Read()
              ScheduledStartDate = __.ScheduledStartDate.Read()
              ScheduledEndDate = __.ScheduledEndDate.Read()
              ModifiedDate = __.ModifiedDate.Read()
              PlannedCost = __.PlannedCost.Read()
              ActualCost = __.ActualCost.Read()
              ActualStartDate = __.ActualStartDate.Read()
              ActualEndDate = __.ActualEndDate.Read()
              ActualResourceHrs = __.ActualResourceHrs.Read() }

        member __.ReadIfNotNull() =
            if __.WorkOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Document =
        { rowguid: System.Guid
          ModifiedDate: System.DateTime
          Title: string
          Owner: int
          FolderFlag: bool
          FileName: string
          FileExtension: string
          Revision: string
          ChangeNumber: int
          Status: byte
          DocumentSummary: Option<string>
          Document: Option<byte []>
          DocumentLevel: Option<int16> }

    type DocumentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Title = RequiredColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.Owner = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Owner")
        member __.FolderFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "FolderFlag")
        member __.FileName = RequiredColumn(reader, getOrdinal, reader.GetString, "FileName")
        member __.FileExtension = RequiredColumn(reader, getOrdinal, reader.GetString, "FileExtension")
        member __.Revision = RequiredColumn(reader, getOrdinal, reader.GetString, "Revision")
        member __.ChangeNumber = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ChangeNumber")
        member __.Status = RequiredColumn(reader, getOrdinal, reader.GetByte, "Status")
        member __.DocumentSummary = OptionalColumn(reader, getOrdinal, reader.GetString, "DocumentSummary")
        member __.Document = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "Document")
        member __.DocumentLevel = OptionalColumn(reader, getOrdinal, reader.GetInt16, "DocumentLevel")
        member __.Read() =
            { rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              Title = __.Title.Read()
              Owner = __.Owner.Read()
              FolderFlag = __.FolderFlag.Read()
              FileName = __.FileName.Read()
              FileExtension = __.FileExtension.Read()
              Revision = __.Revision.Read()
              ChangeNumber = __.ChangeNumber.Read()
              Status = __.Status.Read()
              DocumentSummary = __.DocumentSummary.Read()
              Document = __.Document.Read()
              DocumentLevel = __.DocumentLevel.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

module Person =
    [<CLIMutable>]
    type Password =
        { BusinessEntityID: int
          PasswordHash: string
          PasswordSalt: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type PasswordReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.PasswordHash = RequiredColumn(reader, getOrdinal, reader.GetString, "PasswordHash")
        member __.PasswordSalt = RequiredColumn(reader, getOrdinal, reader.GetString, "PasswordSalt")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              PasswordHash = __.PasswordHash.Read()
              PasswordSalt = __.PasswordSalt.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Person =
        { BusinessEntityID: int
          PersonType: string
          NameStyle: bool
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          FirstName: string
          LastName: string
          EmailPromotion: int
          Suffix: Option<string>
          MiddleName: Option<string>
          Title: Option<string> }

    type PersonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.PersonType = RequiredColumn(reader, getOrdinal, reader.GetString, "PersonType")
        member __.NameStyle = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "NameStyle")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.EmailPromotion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailPromotion")
        member __.Suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "Suffix")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.Title = OptionalColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              PersonType = __.PersonType.Read()
              NameStyle = __.NameStyle.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              FirstName = __.FirstName.Read()
              LastName = __.LastName.Read()
              EmailPromotion = __.EmailPromotion.Read()
              Suffix = __.Suffix.Read()
              MiddleName = __.MiddleName.Read()
              Title = __.Title.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vAdditionalContactInfo =
        { BusinessEntityID: int
          FirstName: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          LastName: string
          TelephoneNumber: Option<string>
          TelephoneSpecialInstructions: Option<string>
          Street: Option<string>
          City: Option<string>
          StateProvince: Option<string>
          PostalCode: Option<string>
          CountryRegion: Option<string>
          HomeAddressSpecialInstructions: Option<string>
          EMailAddress: Option<string>
          EMailSpecialInstructions: Option<string>
          EMailTelephoneNumber: Option<string>
          MiddleName: Option<string> }

    type vAdditionalContactInfoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.TelephoneNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "TelephoneNumber")
        member __.TelephoneSpecialInstructions = OptionalColumn(reader, getOrdinal, reader.GetString, "TelephoneSpecialInstructions")
        member __.Street = OptionalColumn(reader, getOrdinal, reader.GetString, "Street")
        member __.City = OptionalColumn(reader, getOrdinal, reader.GetString, "City")
        member __.StateProvince = OptionalColumn(reader, getOrdinal, reader.GetString, "StateProvince")
        member __.PostalCode = OptionalColumn(reader, getOrdinal, reader.GetString, "PostalCode")
        member __.CountryRegion = OptionalColumn(reader, getOrdinal, reader.GetString, "CountryRegion")
        member __.HomeAddressSpecialInstructions = OptionalColumn(reader, getOrdinal, reader.GetString, "HomeAddressSpecialInstructions")
        member __.EMailAddress = OptionalColumn(reader, getOrdinal, reader.GetString, "EMailAddress")
        member __.EMailSpecialInstructions = OptionalColumn(reader, getOrdinal, reader.GetString, "EMailSpecialInstructions")
        member __.EMailTelephoneNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "EMailTelephoneNumber")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              FirstName = __.FirstName.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              LastName = __.LastName.Read()
              TelephoneNumber = __.TelephoneNumber.Read()
              TelephoneSpecialInstructions = __.TelephoneSpecialInstructions.Read()
              Street = __.Street.Read()
              City = __.City.Read()
              StateProvince = __.StateProvince.Read()
              PostalCode = __.PostalCode.Read()
              CountryRegion = __.CountryRegion.Read()
              HomeAddressSpecialInstructions = __.HomeAddressSpecialInstructions.Read()
              EMailAddress = __.EMailAddress.Read()
              EMailSpecialInstructions = __.EMailSpecialInstructions.Read()
              EMailTelephoneNumber = __.EMailTelephoneNumber.Read()
              MiddleName = __.MiddleName.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PersonPhone =
        { BusinessEntityID: int
          PhoneNumber: string
          PhoneNumberTypeID: int
          ModifiedDate: System.DateTime }

    type PersonPhoneReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.PhoneNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "PhoneNumber")
        member __.PhoneNumberTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PhoneNumberTypeID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              PhoneNumber = __.PhoneNumber.Read()
              PhoneNumberTypeID = __.PhoneNumberTypeID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PhoneNumberType =
        { PhoneNumberTypeID: int
          Name: string
          ModifiedDate: System.DateTime }

    type PhoneNumberTypeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.PhoneNumberTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PhoneNumberTypeID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { PhoneNumberTypeID = __.PhoneNumberTypeID.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.PhoneNumberTypeID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vStateProvinceCountryRegion =
        { StateProvinceID: int
          StateProvinceCode: string
          IsOnlyStateProvinceFlag: bool
          StateProvinceName: string
          TerritoryID: int
          CountryRegionCode: string
          CountryRegionName: string }

    type vStateProvinceCountryRegionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.StateProvinceID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StateProvinceID")
        member __.StateProvinceCode = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvinceCode")
        member __.IsOnlyStateProvinceFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsOnlyStateProvinceFlag")
        member __.StateProvinceName = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvinceName")
        member __.TerritoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
        member __.CountryRegionName = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionName")
        member __.Read() =
            { StateProvinceID = __.StateProvinceID.Read()
              StateProvinceCode = __.StateProvinceCode.Read()
              IsOnlyStateProvinceFlag = __.IsOnlyStateProvinceFlag.Read()
              StateProvinceName = __.StateProvinceName.Read()
              TerritoryID = __.TerritoryID.Read()
              CountryRegionCode = __.CountryRegionCode.Read()
              CountryRegionName = __.CountryRegionName.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Address =
        { AddressID: int
          AddressLine1: string
          City: string
          StateProvinceID: int
          PostalCode: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          AddressLine2: Option<string> }

    type AddressReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.AddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressID")
        member __.AddressLine1 = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressLine1")
        member __.City = RequiredColumn(reader, getOrdinal, reader.GetString, "City")
        member __.StateProvinceID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StateProvinceID")
        member __.PostalCode = RequiredColumn(reader, getOrdinal, reader.GetString, "PostalCode")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.AddressLine2 = OptionalColumn(reader, getOrdinal, reader.GetString, "AddressLine2")
        member __.Read() =
            { AddressID = __.AddressID.Read()
              AddressLine1 = __.AddressLine1.Read()
              City = __.City.Read()
              StateProvinceID = __.StateProvinceID.Read()
              PostalCode = __.PostalCode.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              AddressLine2 = __.AddressLine2.Read() }

        member __.ReadIfNotNull() =
            if __.AddressID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type AddressType =
        { AddressTypeID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type AddressTypeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.AddressTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressTypeID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { AddressTypeID = __.AddressTypeID.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.AddressTypeID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type StateProvince =
        { StateProvinceID: int
          StateProvinceCode: string
          CountryRegionCode: string
          IsOnlyStateProvinceFlag: bool
          Name: string
          TerritoryID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type StateProvinceReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.StateProvinceID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StateProvinceID")
        member __.StateProvinceCode = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvinceCode")
        member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
        member __.IsOnlyStateProvinceFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsOnlyStateProvinceFlag")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.TerritoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { StateProvinceID = __.StateProvinceID.Read()
              StateProvinceCode = __.StateProvinceCode.Read()
              CountryRegionCode = __.CountryRegionCode.Read()
              IsOnlyStateProvinceFlag = __.IsOnlyStateProvinceFlag.Read()
              Name = __.Name.Read()
              TerritoryID = __.TerritoryID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.StateProvinceID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type BusinessEntity =
        { BusinessEntityID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type BusinessEntityReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type BusinessEntityAddress =
        { BusinessEntityID: int
          AddressID: int
          AddressTypeID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type BusinessEntityAddressReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.AddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressID")
        member __.AddressTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressTypeID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              AddressID = __.AddressID.Read()
              AddressTypeID = __.AddressTypeID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type BusinessEntityContact =
        { BusinessEntityID: int
          PersonID: int
          ContactTypeID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type BusinessEntityContactReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.PersonID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PersonID")
        member __.ContactTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ContactTypeID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              PersonID = __.PersonID.Read()
              ContactTypeID = __.ContactTypeID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ContactType =
        { ContactTypeID: int
          Name: string
          ModifiedDate: System.DateTime }

    type ContactTypeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ContactTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ContactTypeID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ContactTypeID = __.ContactTypeID.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ContactTypeID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CountryRegion =
        { CountryRegionCode: string
          Name: string
          ModifiedDate: System.DateTime }

    type CountryRegionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { CountryRegionCode = __.CountryRegionCode.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CountryRegionCode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type EmailAddress =
        { BusinessEntityID: int
          EmailAddressID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime
          EmailAddress: Option<string> }

    type EmailAddressReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.EmailAddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailAddressID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.EmailAddress = OptionalColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              EmailAddressID = __.EmailAddressID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read()
              EmailAddress = __.EmailAddress.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

module Purchasing =
    [<CLIMutable>]
    type vVendorWithContacts =
        { BusinessEntityID: int
          Name: string
          ContactType: string
          LastName: string
          FirstName: string
          EmailPromotion: int
          MiddleName: Option<string>
          Suffix: Option<string>
          PhoneNumber: Option<string>
          PhoneNumberType: Option<string>
          EmailAddress: Option<string>
          Title: Option<string> }

    type vVendorWithContactsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ContactType = RequiredColumn(reader, getOrdinal, reader.GetString, "ContactType")
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.EmailPromotion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailPromotion")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.Suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "Suffix")
        member __.PhoneNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "PhoneNumber")
        member __.PhoneNumberType = OptionalColumn(reader, getOrdinal, reader.GetString, "PhoneNumberType")
        member __.EmailAddress = OptionalColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
        member __.Title = OptionalColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              Name = __.Name.Read()
              ContactType = __.ContactType.Read()
              LastName = __.LastName.Read()
              FirstName = __.FirstName.Read()
              EmailPromotion = __.EmailPromotion.Read()
              MiddleName = __.MiddleName.Read()
              Suffix = __.Suffix.Read()
              PhoneNumber = __.PhoneNumber.Read()
              PhoneNumberType = __.PhoneNumberType.Read()
              EmailAddress = __.EmailAddress.Read()
              Title = __.Title.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type vVendorWithAddresses =
        { City: string
          StateProvinceName: string
          PostalCode: string
          CountryRegionName: string
          BusinessEntityID: int
          Name: string
          AddressType: string
          AddressLine1: string
          AddressLine2: Option<string> }

    type vVendorWithAddressesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.City = RequiredColumn(reader, getOrdinal, reader.GetString, "City")
        member __.StateProvinceName = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvinceName")
        member __.PostalCode = RequiredColumn(reader, getOrdinal, reader.GetString, "PostalCode")
        member __.CountryRegionName = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionName")
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.AddressType = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressType")
        member __.AddressLine1 = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressLine1")
        member __.AddressLine2 = OptionalColumn(reader, getOrdinal, reader.GetString, "AddressLine2")
        member __.Read() =
            { City = __.City.Read()
              StateProvinceName = __.StateProvinceName.Read()
              PostalCode = __.PostalCode.Read()
              CountryRegionName = __.CountryRegionName.Read()
              BusinessEntityID = __.BusinessEntityID.Read()
              Name = __.Name.Read()
              AddressType = __.AddressType.Read()
              AddressLine1 = __.AddressLine1.Read()
              AddressLine2 = __.AddressLine2.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ShipMethod =
        { ShipMethodID: int
          Name: string
          ShipBase: decimal
          ShipRate: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ShipMethodReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ShipMethodID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipMethodID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ShipBase = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ShipBase")
        member __.ShipRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ShipRate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { ShipMethodID = __.ShipMethodID.Read()
              Name = __.Name.Read()
              ShipBase = __.ShipBase.Read()
              ShipRate = __.ShipRate.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ShipMethodID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductVendor =
        { UnitMeasureCode: string
          ModifiedDate: System.DateTime
          MinOrderQty: int
          MaxOrderQty: int
          ProductID: int
          BusinessEntityID: int
          AverageLeadTime: int
          StandardPrice: decimal
          LastReceiptCost: Option<decimal>
          LastReceiptDate: Option<System.DateTime>
          OnOrderQty: Option<int> }

    type ProductVendorReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.UnitMeasureCode = RequiredColumn(reader, getOrdinal, reader.GetString, "UnitMeasureCode")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.MinOrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MinOrderQty")
        member __.MaxOrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MaxOrderQty")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.AverageLeadTime = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AverageLeadTime")
        member __.StandardPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StandardPrice")
        member __.LastReceiptCost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "LastReceiptCost")
        member __.LastReceiptDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "LastReceiptDate")
        member __.OnOrderQty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "OnOrderQty")
        member __.Read() =
            { UnitMeasureCode = __.UnitMeasureCode.Read()
              ModifiedDate = __.ModifiedDate.Read()
              MinOrderQty = __.MinOrderQty.Read()
              MaxOrderQty = __.MaxOrderQty.Read()
              ProductID = __.ProductID.Read()
              BusinessEntityID = __.BusinessEntityID.Read()
              AverageLeadTime = __.AverageLeadTime.Read()
              StandardPrice = __.StandardPrice.Read()
              LastReceiptCost = __.LastReceiptCost.Read()
              LastReceiptDate = __.LastReceiptDate.Read()
              OnOrderQty = __.OnOrderQty.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Vendor =
        { BusinessEntityID: int
          AccountNumber: string
          Name: string
          CreditRating: byte
          PreferredVendorStatus: bool
          ActiveFlag: bool
          ModifiedDate: System.DateTime
          PurchasingWebServiceURL: Option<string> }

    type VendorReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.AccountNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "AccountNumber")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.CreditRating = RequiredColumn(reader, getOrdinal, reader.GetByte, "CreditRating")
        member __.PreferredVendorStatus = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "PreferredVendorStatus")
        member __.ActiveFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "ActiveFlag")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.PurchasingWebServiceURL = OptionalColumn(reader, getOrdinal, reader.GetString, "PurchasingWebServiceURL")
        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              AccountNumber = __.AccountNumber.Read()
              Name = __.Name.Read()
              CreditRating = __.CreditRating.Read()
              PreferredVendorStatus = __.PreferredVendorStatus.Read()
              ActiveFlag = __.ActiveFlag.Read()
              ModifiedDate = __.ModifiedDate.Read()
              PurchasingWebServiceURL = __.PurchasingWebServiceURL.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PurchaseOrderDetail =
        { PurchaseOrderID: int
          PurchaseOrderDetailID: int
          DueDate: System.DateTime
          OrderQty: int16
          ProductID: int
          UnitPrice: decimal
          LineTotal: decimal
          ReceivedQty: decimal
          RejectedQty: decimal
          StockedQty: decimal
          ModifiedDate: System.DateTime }

    type PurchaseOrderDetailReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.PurchaseOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PurchaseOrderID")
        member __.PurchaseOrderDetailID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PurchaseOrderDetailID")
        member __.DueDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DueDate")
        member __.OrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "OrderQty")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.UnitPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "UnitPrice")
        member __.LineTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "LineTotal")
        member __.ReceivedQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ReceivedQty")
        member __.RejectedQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "RejectedQty")
        member __.StockedQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StockedQty")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { PurchaseOrderID = __.PurchaseOrderID.Read()
              PurchaseOrderDetailID = __.PurchaseOrderDetailID.Read()
              DueDate = __.DueDate.Read()
              OrderQty = __.OrderQty.Read()
              ProductID = __.ProductID.Read()
              UnitPrice = __.UnitPrice.Read()
              LineTotal = __.LineTotal.Read()
              ReceivedQty = __.ReceivedQty.Read()
              RejectedQty = __.RejectedQty.Read()
              StockedQty = __.StockedQty.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.PurchaseOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PurchaseOrderHeader =
        { PurchaseOrderID: int
          RevisionNumber: byte
          Status: byte
          EmployeeID: int
          VendorID: int
          ShipMethodID: int
          OrderDate: System.DateTime
          SubTotal: decimal
          TaxAmt: decimal
          Freight: decimal
          TotalDue: decimal
          ModifiedDate: System.DateTime
          ShipDate: Option<System.DateTime> }

    type PurchaseOrderHeaderReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.PurchaseOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PurchaseOrderID")
        member __.RevisionNumber = RequiredColumn(reader, getOrdinal, reader.GetByte, "RevisionNumber")
        member __.Status = RequiredColumn(reader, getOrdinal, reader.GetByte, "Status")
        member __.EmployeeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmployeeID")
        member __.VendorID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "VendorID")
        member __.ShipMethodID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipMethodID")
        member __.OrderDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "OrderDate")
        member __.SubTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SubTotal")
        member __.TaxAmt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TaxAmt")
        member __.Freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Freight")
        member __.TotalDue = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TotalDue")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.ShipDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ShipDate")
        member __.Read() =
            { PurchaseOrderID = __.PurchaseOrderID.Read()
              RevisionNumber = __.RevisionNumber.Read()
              Status = __.Status.Read()
              EmployeeID = __.EmployeeID.Read()
              VendorID = __.VendorID.Read()
              ShipMethodID = __.ShipMethodID.Read()
              OrderDate = __.OrderDate.Read()
              SubTotal = __.SubTotal.Read()
              TaxAmt = __.TaxAmt.Read()
              Freight = __.Freight.Read()
              TotalDue = __.TotalDue.Read()
              ModifiedDate = __.ModifiedDate.Read()
              ShipDate = __.ShipDate.Read() }

        member __.ReadIfNotNull() =
            if __.PurchaseOrderID.IsNull() then None else Some(__.Read())

module dbo =
    [<CLIMutable>]
    type DatabaseLog =
        { DatabaseLogID: int
          PostTime: System.DateTime
          DatabaseUser: string
          Event: string
          TSQL: string
          Schema: Option<string>
          Object: Option<string> }

    type DatabaseLogReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.DatabaseLogID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "DatabaseLogID")
        member __.PostTime = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "PostTime")
        member __.DatabaseUser = RequiredColumn(reader, getOrdinal, reader.GetString, "DatabaseUser")
        member __.Event = RequiredColumn(reader, getOrdinal, reader.GetString, "Event")
        member __.TSQL = RequiredColumn(reader, getOrdinal, reader.GetString, "TSQL")
        member __.Schema = OptionalColumn(reader, getOrdinal, reader.GetString, "Schema")
        member __.Object = OptionalColumn(reader, getOrdinal, reader.GetString, "Object")
        member __.Read() =
            { DatabaseLogID = __.DatabaseLogID.Read()
              PostTime = __.PostTime.Read()
              DatabaseUser = __.DatabaseUser.Read()
              Event = __.Event.Read()
              TSQL = __.TSQL.Read()
              Schema = __.Schema.Read()
              Object = __.Object.Read() }

        member __.ReadIfNotNull() =
            if __.DatabaseLogID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ErrorLog =
        { ErrorLogID: int
          ErrorTime: System.DateTime
          UserName: string
          ErrorNumber: int
          ErrorMessage: string
          ErrorSeverity: Option<int>
          ErrorState: Option<int>
          ErrorProcedure: Option<string>
          ErrorLine: Option<int> }

    type ErrorLogReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ErrorLogID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ErrorLogID")
        member __.ErrorTime = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ErrorTime")
        member __.UserName = RequiredColumn(reader, getOrdinal, reader.GetString, "UserName")
        member __.ErrorNumber = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ErrorNumber")
        member __.ErrorMessage = RequiredColumn(reader, getOrdinal, reader.GetString, "ErrorMessage")
        member __.ErrorSeverity = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ErrorSeverity")
        member __.ErrorState = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ErrorState")
        member __.ErrorProcedure = OptionalColumn(reader, getOrdinal, reader.GetString, "ErrorProcedure")
        member __.ErrorLine = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ErrorLine")
        member __.Read() =
            { ErrorLogID = __.ErrorLogID.Read()
              ErrorTime = __.ErrorTime.Read()
              UserName = __.UserName.Read()
              ErrorNumber = __.ErrorNumber.Read()
              ErrorMessage = __.ErrorMessage.Read()
              ErrorSeverity = __.ErrorSeverity.Read()
              ErrorState = __.ErrorState.Read()
              ErrorProcedure = __.ErrorProcedure.Read()
              ErrorLine = __.ErrorLine.Read() }

        member __.ReadIfNotNull() =
            if __.ErrorLogID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type AWBuildVersion =
        { SystemInformationID: byte
          ``Database Version``: string
          VersionDate: System.DateTime
          ModifiedDate: System.DateTime }

    type AWBuildVersionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SystemInformationID = RequiredColumn(reader, getOrdinal, reader.GetByte, "SystemInformationID")
        member __.``Database Version`` = RequiredColumn(reader, getOrdinal, reader.GetString, "Database Version")
        member __.VersionDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "VersionDate")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")
        member __.Read() =
            { SystemInformationID = __.SystemInformationID.Read()
              ``Database Version`` = __.``Database Version``.Read()
              VersionDate = __.VersionDate.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SystemInformationID.IsNull() then None else Some(__.Read())

type HydraReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazyEmployeePayHistory = lazy (HumanResources.EmployeePayHistoryReader(reader, buildGetOrdinal 5))
    let lazyJobCandidate = lazy (HumanResources.JobCandidateReader(reader, buildGetOrdinal 4))
    let lazyvEmployee = lazy (HumanResources.vEmployeeReader (reader, buildGetOrdinal 18))
    let lazyvEmployeeDepartment = lazy (HumanResources.vEmployeeDepartmentReader (reader, buildGetOrdinal 10))
    let lazyvEmployeeDepartmentHistory = lazy (HumanResources.vEmployeeDepartmentHistoryReader (reader, buildGetOrdinal 11))
    let lazyvJobCandidate = lazy (HumanResources.vJobCandidateReader (reader, buildGetOrdinal 16))
    let lazyvJobCandidateEmployment = lazy (HumanResources.vJobCandidateEmploymentReader (reader, buildGetOrdinal 11))
    let lazyvJobCandidateEducation = lazy (HumanResources.vJobCandidateEducationReader (reader, buildGetOrdinal 13))
    let lazyShift = lazy (HumanResources.ShiftReader(reader, buildGetOrdinal 5))
    let lazyDepartment = lazy (HumanResources.DepartmentReader(reader, buildGetOrdinal 4))
    let lazyEmployee = lazy (HumanResources.EmployeeReader(reader, buildGetOrdinal 16))
    let lazyEmployeeDepartmentHistory = lazy (HumanResources.EmployeeDepartmentHistoryReader(reader, buildGetOrdinal 6))
    let lazySalesOrderHeaderSalesReason = lazy (Sales.SalesOrderHeaderSalesReasonReader(reader, buildGetOrdinal 3))
    let lazySalesPerson = lazy (Sales.SalesPersonReader(reader, buildGetOrdinal 9))
    let lazySalesPersonQuotaHistory = lazy (Sales.SalesPersonQuotaHistoryReader(reader, buildGetOrdinal 5))
    let lazySalesReason = lazy (Sales.SalesReasonReader(reader, buildGetOrdinal 4))
    let lazySalesTaxRate = lazy (Sales.SalesTaxRateReader(reader, buildGetOrdinal 7))
    let lazyPersonCreditCard = lazy (Sales.PersonCreditCardReader(reader, buildGetOrdinal 3))
    let lazySalesTerritory = lazy (Sales.SalesTerritoryReader(reader, buildGetOrdinal 10))
    let lazyvIndividualCustomer = lazy (Sales.vIndividualCustomerReader (reader, buildGetOrdinal 18))
    let lazyvPersonDemographics = lazy (Sales.vPersonDemographicsReader (reader, buildGetOrdinal 13))
    let lazyvSalesPerson = lazy (Sales.vSalesPersonReader (reader, buildGetOrdinal 22))
    let lazySalesTerritoryHistory = lazy (Sales.SalesTerritoryHistoryReader(reader, buildGetOrdinal 6))
    let lazyvSalesPersonSalesByFiscalYears = lazy (Sales.vSalesPersonSalesByFiscalYearsReader (reader, buildGetOrdinal 7))
    let lazyvStoreWithDemographics = lazy (Sales.vStoreWithDemographicsReader (reader, buildGetOrdinal 12))
    let lazyvStoreWithContacts = lazy (Sales.vStoreWithContactsReader (reader, buildGetOrdinal 12))
    let lazyvStoreWithAddresses = lazy (Sales.vStoreWithAddressesReader (reader, buildGetOrdinal 9))
    let lazyShoppingCartItem = lazy (Sales.ShoppingCartItemReader(reader, buildGetOrdinal 6))
    let lazySpecialOffer = lazy (Sales.SpecialOfferReader(reader, buildGetOrdinal 11))
    let lazySpecialOfferProduct = lazy (Sales.SpecialOfferProductReader(reader, buildGetOrdinal 4))
    let lazyStore = lazy (Sales.StoreReader(reader, buildGetOrdinal 6))
    let lazyCountryRegionCurrency = lazy (Sales.CountryRegionCurrencyReader(reader, buildGetOrdinal 3))
    let lazyCreditCard = lazy (Sales.CreditCardReader(reader, buildGetOrdinal 6))
    let lazyCurrency = lazy (Sales.CurrencyReader(reader, buildGetOrdinal 3))
    let lazyCurrencyRate = lazy (Sales.CurrencyRateReader(reader, buildGetOrdinal 7))
    let lazyCustomer = lazy (Sales.CustomerReader(reader, buildGetOrdinal 7))
    let lazySalesOrderDetail = lazy (Sales.SalesOrderDetailReader(reader, buildGetOrdinal 11))
    let lazySalesOrderHeader = lazy (Sales.SalesOrderHeaderReader(reader, buildGetOrdinal 26))
    let lazyIllustration = lazy (Production.IllustrationReader(reader, buildGetOrdinal 3))
    let lazyLocation = lazy (Production.LocationReader(reader, buildGetOrdinal 5))
    let lazyProduct = lazy (Production.ProductReader(reader, buildGetOrdinal 25))
    let lazyvProductAndDescription = lazy (Production.vProductAndDescriptionReader (reader, buildGetOrdinal 5))
    let lazyvProductModelCatalogDescription = lazy (Production.vProductModelCatalogDescriptionReader (reader, buildGetOrdinal 25))
    let lazyvProductModelInstructions = lazy (Production.vProductModelInstructionsReader (reader, buildGetOrdinal 11))
    let lazyScrapReason = lazy (Production.ScrapReasonReader(reader, buildGetOrdinal 3))
    let lazyProductCategory = lazy (Production.ProductCategoryReader(reader, buildGetOrdinal 4))
    let lazyProductCostHistory = lazy (Production.ProductCostHistoryReader(reader, buildGetOrdinal 5))
    let lazyProductDescription = lazy (Production.ProductDescriptionReader(reader, buildGetOrdinal 4))
    let lazyProductDocument = lazy (Production.ProductDocumentReader(reader, buildGetOrdinal 3))
    let lazyProductInventory = lazy (Production.ProductInventoryReader(reader, buildGetOrdinal 7))
    let lazyProductListPriceHistory = lazy (Production.ProductListPriceHistoryReader(reader, buildGetOrdinal 5))
    let lazyProductModel = lazy (Production.ProductModelReader(reader, buildGetOrdinal 6))
    let lazyProductModelIllustration = lazy (Production.ProductModelIllustrationReader(reader, buildGetOrdinal 3))
    let lazyProductModelProductDescriptionCulture = lazy (Production.ProductModelProductDescriptionCultureReader(reader, buildGetOrdinal 4))
    let lazyBillOfMaterials = lazy (Production.BillOfMaterialsReader(reader, buildGetOrdinal 9))
    let lazyProductPhoto = lazy (Production.ProductPhotoReader(reader, buildGetOrdinal 6))
    let lazyProductProductPhoto = lazy (Production.ProductProductPhotoReader(reader, buildGetOrdinal 4))
    let lazyTransactionHistory = lazy (Production.TransactionHistoryReader(reader, buildGetOrdinal 9))
    let lazyProductReview = lazy (Production.ProductReviewReader(reader, buildGetOrdinal 8))
    let lazyTransactionHistoryArchive = lazy (Production.TransactionHistoryArchiveReader(reader, buildGetOrdinal 9))
    let lazyProductSubcategory = lazy (Production.ProductSubcategoryReader(reader, buildGetOrdinal 5))
    let lazyUnitMeasure = lazy (Production.UnitMeasureReader(reader, buildGetOrdinal 3))
    let lazyWorkOrder = lazy (Production.WorkOrderReader(reader, buildGetOrdinal 10))
    let lazyCulture = lazy (Production.CultureReader(reader, buildGetOrdinal 3))
    let lazyWorkOrderRouting = lazy (Production.WorkOrderRoutingReader(reader, buildGetOrdinal 12))
    let lazyDocument = lazy (Production.DocumentReader(reader, buildGetOrdinal 14))
    let lazyPassword = lazy (Person.PasswordReader(reader, buildGetOrdinal 5))
    let lazyPerson = lazy (Person.PersonReader(reader, buildGetOrdinal 13))
    let lazyvAdditionalContactInfo = lazy (Person.vAdditionalContactInfoReader (reader, buildGetOrdinal 17))
    let lazyPersonPhone = lazy (Person.PersonPhoneReader(reader, buildGetOrdinal 4))
    let lazyPhoneNumberType = lazy (Person.PhoneNumberTypeReader(reader, buildGetOrdinal 3))
    let lazyvStateProvinceCountryRegion = lazy (Person.vStateProvinceCountryRegionReader (reader, buildGetOrdinal 7))
    let lazyAddress = lazy (Person.AddressReader(reader, buildGetOrdinal 9))
    let lazyAddressType = lazy (Person.AddressTypeReader(reader, buildGetOrdinal 4))
    let lazyStateProvince = lazy (Person.StateProvinceReader(reader, buildGetOrdinal 8))
    let lazyBusinessEntity = lazy (Person.BusinessEntityReader(reader, buildGetOrdinal 3))
    let lazyBusinessEntityAddress = lazy (Person.BusinessEntityAddressReader(reader, buildGetOrdinal 5))
    let lazyBusinessEntityContact = lazy (Person.BusinessEntityContactReader(reader, buildGetOrdinal 5))
    let lazyContactType = lazy (Person.ContactTypeReader(reader, buildGetOrdinal 3))
    let lazyCountryRegion = lazy (Person.CountryRegionReader(reader, buildGetOrdinal 3))
    let lazyEmailAddress = lazy (Person.EmailAddressReader(reader, buildGetOrdinal 5))
    let lazyvVendorWithContacts = lazy (Purchasing.vVendorWithContactsReader (reader, buildGetOrdinal 12))
    let lazyvVendorWithAddresses = lazy (Purchasing.vVendorWithAddressesReader (reader, buildGetOrdinal 9))
    let lazyShipMethod = lazy (Purchasing.ShipMethodReader(reader, buildGetOrdinal 6))
    let lazyProductVendor = lazy (Purchasing.ProductVendorReader(reader, buildGetOrdinal 11))
    let lazyVendor = lazy (Purchasing.VendorReader(reader, buildGetOrdinal 8))
    let lazyPurchaseOrderDetail = lazy (Purchasing.PurchaseOrderDetailReader(reader, buildGetOrdinal 11))
    let lazyPurchaseOrderHeader = lazy (Purchasing.PurchaseOrderHeaderReader(reader, buildGetOrdinal 13))
    let lazyDatabaseLog = lazy (dbo.DatabaseLogReader(reader, buildGetOrdinal 8))
    let lazyErrorLog = lazy (dbo.ErrorLogReader(reader, buildGetOrdinal 9))
    let lazyAWBuildVersion = lazy (dbo.AWBuildVersionReader(reader, buildGetOrdinal 4))
    member __.EmployeePayHistory = lazyEmployeePayHistory.Value
    member __.JobCandidate = lazyJobCandidate.Value
    member __.vEmployee = lazyvEmployee.Value
    member __.vEmployeeDepartment = lazyvEmployeeDepartment.Value
    member __.vEmployeeDepartmentHistory = lazyvEmployeeDepartmentHistory.Value
    member __.vJobCandidate = lazyvJobCandidate.Value
    member __.vJobCandidateEmployment = lazyvJobCandidateEmployment.Value
    member __.vJobCandidateEducation = lazyvJobCandidateEducation.Value
    member __.Shift = lazyShift.Value
    member __.Department = lazyDepartment.Value
    member __.Employee = lazyEmployee.Value
    member __.EmployeeDepartmentHistory = lazyEmployeeDepartmentHistory.Value
    member __.SalesOrderHeaderSalesReason = lazySalesOrderHeaderSalesReason.Value
    member __.SalesPerson = lazySalesPerson.Value
    member __.SalesPersonQuotaHistory = lazySalesPersonQuotaHistory.Value
    member __.SalesReason = lazySalesReason.Value
    member __.SalesTaxRate = lazySalesTaxRate.Value
    member __.PersonCreditCard = lazyPersonCreditCard.Value
    member __.SalesTerritory = lazySalesTerritory.Value
    member __.vIndividualCustomer = lazyvIndividualCustomer.Value
    member __.vPersonDemographics = lazyvPersonDemographics.Value
    member __.vSalesPerson = lazyvSalesPerson.Value
    member __.SalesTerritoryHistory = lazySalesTerritoryHistory.Value
    member __.vSalesPersonSalesByFiscalYears = lazyvSalesPersonSalesByFiscalYears.Value
    member __.vStoreWithDemographics = lazyvStoreWithDemographics.Value
    member __.vStoreWithContacts = lazyvStoreWithContacts.Value
    member __.vStoreWithAddresses = lazyvStoreWithAddresses.Value
    member __.ShoppingCartItem = lazyShoppingCartItem.Value
    member __.SpecialOffer = lazySpecialOffer.Value
    member __.SpecialOfferProduct = lazySpecialOfferProduct.Value
    member __.Store = lazyStore.Value
    member __.CountryRegionCurrency = lazyCountryRegionCurrency.Value
    member __.CreditCard = lazyCreditCard.Value
    member __.Currency = lazyCurrency.Value
    member __.CurrencyRate = lazyCurrencyRate.Value
    member __.Customer = lazyCustomer.Value
    member __.SalesOrderDetail = lazySalesOrderDetail.Value
    member __.SalesOrderHeader = lazySalesOrderHeader.Value
    member __.Illustration = lazyIllustration.Value
    member __.Location = lazyLocation.Value
    member __.Product = lazyProduct.Value
    member __.vProductAndDescription = lazyvProductAndDescription.Value
    member __.vProductModelCatalogDescription = lazyvProductModelCatalogDescription.Value
    member __.vProductModelInstructions = lazyvProductModelInstructions.Value
    member __.ScrapReason = lazyScrapReason.Value
    member __.ProductCategory = lazyProductCategory.Value
    member __.ProductCostHistory = lazyProductCostHistory.Value
    member __.ProductDescription = lazyProductDescription.Value
    member __.ProductDocument = lazyProductDocument.Value
    member __.ProductInventory = lazyProductInventory.Value
    member __.ProductListPriceHistory = lazyProductListPriceHistory.Value
    member __.ProductModel = lazyProductModel.Value
    member __.ProductModelIllustration = lazyProductModelIllustration.Value
    member __.ProductModelProductDescriptionCulture = lazyProductModelProductDescriptionCulture.Value
    member __.BillOfMaterials = lazyBillOfMaterials.Value
    member __.ProductPhoto = lazyProductPhoto.Value
    member __.ProductProductPhoto = lazyProductProductPhoto.Value
    member __.TransactionHistory = lazyTransactionHistory.Value
    member __.ProductReview = lazyProductReview.Value
    member __.TransactionHistoryArchive = lazyTransactionHistoryArchive.Value
    member __.ProductSubcategory = lazyProductSubcategory.Value
    member __.UnitMeasure = lazyUnitMeasure.Value
    member __.WorkOrder = lazyWorkOrder.Value
    member __.Culture = lazyCulture.Value
    member __.WorkOrderRouting = lazyWorkOrderRouting.Value
    member __.Document = lazyDocument.Value
    member __.Password = lazyPassword.Value
    member __.Person = lazyPerson.Value
    member __.vAdditionalContactInfo = lazyvAdditionalContactInfo.Value
    member __.PersonPhone = lazyPersonPhone.Value
    member __.PhoneNumberType = lazyPhoneNumberType.Value
    member __.vStateProvinceCountryRegion = lazyvStateProvinceCountryRegion.Value
    member __.Address = lazyAddress.Value
    member __.AddressType = lazyAddressType.Value
    member __.StateProvince = lazyStateProvince.Value
    member __.BusinessEntity = lazyBusinessEntity.Value
    member __.BusinessEntityAddress = lazyBusinessEntityAddress.Value
    member __.BusinessEntityContact = lazyBusinessEntityContact.Value
    member __.ContactType = lazyContactType.Value
    member __.CountryRegion = lazyCountryRegion.Value
    member __.EmailAddress = lazyEmailAddress.Value
    member __.vVendorWithContacts = lazyvVendorWithContacts.Value
    member __.vVendorWithAddresses = lazyvVendorWithAddresses.Value
    member __.ShipMethod = lazyShipMethod.Value
    member __.ProductVendor = lazyProductVendor.Value
    member __.Vendor = lazyVendor.Value
    member __.PurchaseOrderDetail = lazyPurchaseOrderDetail.Value
    member __.PurchaseOrderHeader = lazyPurchaseOrderHeader.Value
    member __.DatabaseLog = lazyDatabaseLog.Value
    member __.ErrorLog = lazyErrorLog.Value
    member __.AWBuildVersion = lazyAWBuildVersion.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value
    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "EmployeePayHistory", false -> __.EmployeePayHistory.Read >> box
        | "EmployeePayHistory", true -> __.EmployeePayHistory.ReadIfNotNull >> box
        | "JobCandidate", false -> __.JobCandidate.Read >> box
        | "JobCandidate", true -> __.JobCandidate.ReadIfNotNull >> box
        | "vEmployee", false -> __.vEmployee.Read >> box
        | "vEmployee", true -> failwith "Could not read type 'vEmployee option' because no primary key exists."
        | "vEmployeeDepartment", false -> __.vEmployeeDepartment.Read >> box
        | "vEmployeeDepartment", true -> failwith "Could not read type 'vEmployeeDepartment option' because no primary key exists."
        | "vEmployeeDepartmentHistory", false -> __.vEmployeeDepartmentHistory.Read >> box
        | "vEmployeeDepartmentHistory", true -> failwith "Could not read type 'vEmployeeDepartmentHistory option' because no primary key exists."
        | "vJobCandidate", false -> __.vJobCandidate.Read >> box
        | "vJobCandidate", true -> failwith "Could not read type 'vJobCandidate option' because no primary key exists."
        | "vJobCandidateEmployment", false -> __.vJobCandidateEmployment.Read >> box
        | "vJobCandidateEmployment", true -> failwith "Could not read type 'vJobCandidateEmployment option' because no primary key exists."
        | "vJobCandidateEducation", false -> __.vJobCandidateEducation.Read >> box
        | "vJobCandidateEducation", true -> failwith "Could not read type 'vJobCandidateEducation option' because no primary key exists."
        | "Shift", false -> __.Shift.Read >> box
        | "Shift", true -> __.Shift.ReadIfNotNull >> box
        | "Department", false -> __.Department.Read >> box
        | "Department", true -> __.Department.ReadIfNotNull >> box
        | "Employee", false -> __.Employee.Read >> box
        | "Employee", true -> __.Employee.ReadIfNotNull >> box
        | "EmployeeDepartmentHistory", false -> __.EmployeeDepartmentHistory.Read >> box
        | "EmployeeDepartmentHistory", true -> __.EmployeeDepartmentHistory.ReadIfNotNull >> box
        | "SalesOrderHeaderSalesReason", false -> __.SalesOrderHeaderSalesReason.Read >> box
        | "SalesOrderHeaderSalesReason", true -> __.SalesOrderHeaderSalesReason.ReadIfNotNull >> box
        | "SalesPerson", false -> __.SalesPerson.Read >> box
        | "SalesPerson", true -> __.SalesPerson.ReadIfNotNull >> box
        | "SalesPersonQuotaHistory", false -> __.SalesPersonQuotaHistory.Read >> box
        | "SalesPersonQuotaHistory", true -> __.SalesPersonQuotaHistory.ReadIfNotNull >> box
        | "SalesReason", false -> __.SalesReason.Read >> box
        | "SalesReason", true -> __.SalesReason.ReadIfNotNull >> box
        | "SalesTaxRate", false -> __.SalesTaxRate.Read >> box
        | "SalesTaxRate", true -> __.SalesTaxRate.ReadIfNotNull >> box
        | "PersonCreditCard", false -> __.PersonCreditCard.Read >> box
        | "PersonCreditCard", true -> __.PersonCreditCard.ReadIfNotNull >> box
        | "SalesTerritory", false -> __.SalesTerritory.Read >> box
        | "SalesTerritory", true -> __.SalesTerritory.ReadIfNotNull >> box
        | "vIndividualCustomer", false -> __.vIndividualCustomer.Read >> box
        | "vIndividualCustomer", true -> failwith "Could not read type 'vIndividualCustomer option' because no primary key exists."
        | "vPersonDemographics", false -> __.vPersonDemographics.Read >> box
        | "vPersonDemographics", true -> failwith "Could not read type 'vPersonDemographics option' because no primary key exists."
        | "vSalesPerson", false -> __.vSalesPerson.Read >> box
        | "vSalesPerson", true -> failwith "Could not read type 'vSalesPerson option' because no primary key exists."
        | "SalesTerritoryHistory", false -> __.SalesTerritoryHistory.Read >> box
        | "SalesTerritoryHistory", true -> __.SalesTerritoryHistory.ReadIfNotNull >> box
        | "vSalesPersonSalesByFiscalYears", false -> __.vSalesPersonSalesByFiscalYears.Read >> box
        | "vSalesPersonSalesByFiscalYears", true -> failwith "Could not read type 'vSalesPersonSalesByFiscalYears option' because no primary key exists."
        | "vStoreWithDemographics", false -> __.vStoreWithDemographics.Read >> box
        | "vStoreWithDemographics", true -> failwith "Could not read type 'vStoreWithDemographics option' because no primary key exists."
        | "vStoreWithContacts", false -> __.vStoreWithContacts.Read >> box
        | "vStoreWithContacts", true -> failwith "Could not read type 'vStoreWithContacts option' because no primary key exists."
        | "vStoreWithAddresses", false -> __.vStoreWithAddresses.Read >> box
        | "vStoreWithAddresses", true -> failwith "Could not read type 'vStoreWithAddresses option' because no primary key exists."
        | "ShoppingCartItem", false -> __.ShoppingCartItem.Read >> box
        | "ShoppingCartItem", true -> __.ShoppingCartItem.ReadIfNotNull >> box
        | "SpecialOffer", false -> __.SpecialOffer.Read >> box
        | "SpecialOffer", true -> __.SpecialOffer.ReadIfNotNull >> box
        | "SpecialOfferProduct", false -> __.SpecialOfferProduct.Read >> box
        | "SpecialOfferProduct", true -> __.SpecialOfferProduct.ReadIfNotNull >> box
        | "Store", false -> __.Store.Read >> box
        | "Store", true -> __.Store.ReadIfNotNull >> box
        | "CountryRegionCurrency", false -> __.CountryRegionCurrency.Read >> box
        | "CountryRegionCurrency", true -> __.CountryRegionCurrency.ReadIfNotNull >> box
        | "CreditCard", false -> __.CreditCard.Read >> box
        | "CreditCard", true -> __.CreditCard.ReadIfNotNull >> box
        | "Currency", false -> __.Currency.Read >> box
        | "Currency", true -> __.Currency.ReadIfNotNull >> box
        | "CurrencyRate", false -> __.CurrencyRate.Read >> box
        | "CurrencyRate", true -> __.CurrencyRate.ReadIfNotNull >> box
        | "Customer", false -> __.Customer.Read >> box
        | "Customer", true -> __.Customer.ReadIfNotNull >> box
        | "SalesOrderDetail", false -> __.SalesOrderDetail.Read >> box
        | "SalesOrderDetail", true -> __.SalesOrderDetail.ReadIfNotNull >> box
        | "SalesOrderHeader", false -> __.SalesOrderHeader.Read >> box
        | "SalesOrderHeader", true -> __.SalesOrderHeader.ReadIfNotNull >> box
        | "Illustration", false -> __.Illustration.Read >> box
        | "Illustration", true -> __.Illustration.ReadIfNotNull >> box
        | "Location", false -> __.Location.Read >> box
        | "Location", true -> __.Location.ReadIfNotNull >> box
        | "Product", false -> __.Product.Read >> box
        | "Product", true -> __.Product.ReadIfNotNull >> box
        | "vProductAndDescription", false -> __.vProductAndDescription.Read >> box
        | "vProductAndDescription", true -> failwith "Could not read type 'vProductAndDescription option' because no primary key exists."
        | "vProductModelCatalogDescription", false -> __.vProductModelCatalogDescription.Read >> box
        | "vProductModelCatalogDescription", true -> failwith "Could not read type 'vProductModelCatalogDescription option' because no primary key exists."
        | "vProductModelInstructions", false -> __.vProductModelInstructions.Read >> box
        | "vProductModelInstructions", true -> failwith "Could not read type 'vProductModelInstructions option' because no primary key exists."
        | "ScrapReason", false -> __.ScrapReason.Read >> box
        | "ScrapReason", true -> __.ScrapReason.ReadIfNotNull >> box
        | "ProductCategory", false -> __.ProductCategory.Read >> box
        | "ProductCategory", true -> __.ProductCategory.ReadIfNotNull >> box
        | "ProductCostHistory", false -> __.ProductCostHistory.Read >> box
        | "ProductCostHistory", true -> __.ProductCostHistory.ReadIfNotNull >> box
        | "ProductDescription", false -> __.ProductDescription.Read >> box
        | "ProductDescription", true -> __.ProductDescription.ReadIfNotNull >> box
        | "ProductDocument", false -> __.ProductDocument.Read >> box
        | "ProductDocument", true -> __.ProductDocument.ReadIfNotNull >> box
        | "ProductInventory", false -> __.ProductInventory.Read >> box
        | "ProductInventory", true -> __.ProductInventory.ReadIfNotNull >> box
        | "ProductListPriceHistory", false -> __.ProductListPriceHistory.Read >> box
        | "ProductListPriceHistory", true -> __.ProductListPriceHistory.ReadIfNotNull >> box
        | "ProductModel", false -> __.ProductModel.Read >> box
        | "ProductModel", true -> __.ProductModel.ReadIfNotNull >> box
        | "ProductModelIllustration", false -> __.ProductModelIllustration.Read >> box
        | "ProductModelIllustration", true -> __.ProductModelIllustration.ReadIfNotNull >> box
        | "ProductModelProductDescriptionCulture", false -> __.ProductModelProductDescriptionCulture.Read >> box
        | "ProductModelProductDescriptionCulture", true -> __.ProductModelProductDescriptionCulture.ReadIfNotNull >> box
        | "BillOfMaterials", false -> __.BillOfMaterials.Read >> box
        | "BillOfMaterials", true -> __.BillOfMaterials.ReadIfNotNull >> box
        | "ProductPhoto", false -> __.ProductPhoto.Read >> box
        | "ProductPhoto", true -> __.ProductPhoto.ReadIfNotNull >> box
        | "ProductProductPhoto", false -> __.ProductProductPhoto.Read >> box
        | "ProductProductPhoto", true -> __.ProductProductPhoto.ReadIfNotNull >> box
        | "TransactionHistory", false -> __.TransactionHistory.Read >> box
        | "TransactionHistory", true -> __.TransactionHistory.ReadIfNotNull >> box
        | "ProductReview", false -> __.ProductReview.Read >> box
        | "ProductReview", true -> __.ProductReview.ReadIfNotNull >> box
        | "TransactionHistoryArchive", false -> __.TransactionHistoryArchive.Read >> box
        | "TransactionHistoryArchive", true -> __.TransactionHistoryArchive.ReadIfNotNull >> box
        | "ProductSubcategory", false -> __.ProductSubcategory.Read >> box
        | "ProductSubcategory", true -> __.ProductSubcategory.ReadIfNotNull >> box
        | "UnitMeasure", false -> __.UnitMeasure.Read >> box
        | "UnitMeasure", true -> __.UnitMeasure.ReadIfNotNull >> box
        | "WorkOrder", false -> __.WorkOrder.Read >> box
        | "WorkOrder", true -> __.WorkOrder.ReadIfNotNull >> box
        | "Culture", false -> __.Culture.Read >> box
        | "Culture", true -> __.Culture.ReadIfNotNull >> box
        | "WorkOrderRouting", false -> __.WorkOrderRouting.Read >> box
        | "WorkOrderRouting", true -> __.WorkOrderRouting.ReadIfNotNull >> box
        | "Document", false -> __.Document.Read >> box
        | "Document", true -> failwith "Could not read type 'Document option' because no primary key exists."
        | "Password", false -> __.Password.Read >> box
        | "Password", true -> __.Password.ReadIfNotNull >> box
        | "Person", false -> __.Person.Read >> box
        | "Person", true -> __.Person.ReadIfNotNull >> box
        | "vAdditionalContactInfo", false -> __.vAdditionalContactInfo.Read >> box
        | "vAdditionalContactInfo", true -> failwith "Could not read type 'vAdditionalContactInfo option' because no primary key exists."
        | "PersonPhone", false -> __.PersonPhone.Read >> box
        | "PersonPhone", true -> __.PersonPhone.ReadIfNotNull >> box
        | "PhoneNumberType", false -> __.PhoneNumberType.Read >> box
        | "PhoneNumberType", true -> __.PhoneNumberType.ReadIfNotNull >> box
        | "vStateProvinceCountryRegion", false -> __.vStateProvinceCountryRegion.Read >> box
        | "vStateProvinceCountryRegion", true -> failwith "Could not read type 'vStateProvinceCountryRegion option' because no primary key exists."
        | "Address", false -> __.Address.Read >> box
        | "Address", true -> __.Address.ReadIfNotNull >> box
        | "AddressType", false -> __.AddressType.Read >> box
        | "AddressType", true -> __.AddressType.ReadIfNotNull >> box
        | "StateProvince", false -> __.StateProvince.Read >> box
        | "StateProvince", true -> __.StateProvince.ReadIfNotNull >> box
        | "BusinessEntity", false -> __.BusinessEntity.Read >> box
        | "BusinessEntity", true -> __.BusinessEntity.ReadIfNotNull >> box
        | "BusinessEntityAddress", false -> __.BusinessEntityAddress.Read >> box
        | "BusinessEntityAddress", true -> __.BusinessEntityAddress.ReadIfNotNull >> box
        | "BusinessEntityContact", false -> __.BusinessEntityContact.Read >> box
        | "BusinessEntityContact", true -> __.BusinessEntityContact.ReadIfNotNull >> box
        | "ContactType", false -> __.ContactType.Read >> box
        | "ContactType", true -> __.ContactType.ReadIfNotNull >> box
        | "CountryRegion", false -> __.CountryRegion.Read >> box
        | "CountryRegion", true -> __.CountryRegion.ReadIfNotNull >> box
        | "EmailAddress", false -> __.EmailAddress.Read >> box
        | "EmailAddress", true -> __.EmailAddress.ReadIfNotNull >> box
        | "vVendorWithContacts", false -> __.vVendorWithContacts.Read >> box
        | "vVendorWithContacts", true -> failwith "Could not read type 'vVendorWithContacts option' because no primary key exists."
        | "vVendorWithAddresses", false -> __.vVendorWithAddresses.Read >> box
        | "vVendorWithAddresses", true -> failwith "Could not read type 'vVendorWithAddresses option' because no primary key exists."
        | "ShipMethod", false -> __.ShipMethod.Read >> box
        | "ShipMethod", true -> __.ShipMethod.ReadIfNotNull >> box
        | "ProductVendor", false -> __.ProductVendor.Read >> box
        | "ProductVendor", true -> __.ProductVendor.ReadIfNotNull >> box
        | "Vendor", false -> __.Vendor.Read >> box
        | "Vendor", true -> __.Vendor.ReadIfNotNull >> box
        | "PurchaseOrderDetail", false -> __.PurchaseOrderDetail.Read >> box
        | "PurchaseOrderDetail", true -> __.PurchaseOrderDetail.ReadIfNotNull >> box
        | "PurchaseOrderHeader", false -> __.PurchaseOrderHeader.Read >> box
        | "PurchaseOrderHeader", true -> __.PurchaseOrderHeader.ReadIfNotNull >> box
        | "DatabaseLog", false -> __.DatabaseLog.Read >> box
        | "DatabaseLog", true -> __.DatabaseLog.ReadIfNotNull >> box
        | "ErrorLog", false -> __.ErrorLog.Read >> box
        | "ErrorLog", true -> __.ErrorLog.ReadIfNotNull >> box
        | "AWBuildVersion", false -> __.AWBuildVersion.Read >> box
        | "AWBuildVersion", true -> __.AWBuildVersion.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Microsoft.Data.SqlClient.SqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
                if isOpt 
                then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
                else get ord |> box 
        
        if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<byte> then Some(wrap reader.GetByte)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<System.Single> then Some(wrap reader.GetFloat)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<System.DateTimeOffset> then Some(wrap reader.GetDateTimeOffset)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<System.TimeSpan> then Some(wrap reader.GetTimeSpan)
        else if t = typedefof<byte []> then Some(wrap reader.GetValue)
        else if t = typedefof<obj> then Some(wrap reader.GetValue)
        else None

    static member Read(reader: Microsoft.Data.SqlClient.SqlDataReader) = 
            let hydra = HydraReader(reader)
            
            let getOrdinalAndIncrement() = 
                let ordinal = hydra.AccFieldCount
                hydra.AccFieldCount <- hydra.AccFieldCount + 1
                ordinal
            
            let buildEntityReadFn (t: System.Type) = 
                let t, isOpt = 
                    if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                    then t.GenericTypeArguments.[0], true
                    else t, false
            
                match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
                | Some primitiveReader -> 
                    let ord = getOrdinalAndIncrement()
                    fun () -> primitiveReader ord
                | None ->
                    hydra.GetReaderByName(t.Name, isOpt)
            
            // Return a fn that will hydrate 'T (which may be a tuple)
            // This fn will be called once per each record returned by the data reader.
            let t = typeof<'T>
            if FSharp.Reflection.FSharpType.IsTuple(t) then
                let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
                fun () ->
                    let entities = readEntityFns |> Array.map (fun read -> read())
                    Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
            else
                let readEntityFn = t |> buildEntityReadFn
                fun () -> 
                    readEntityFn() :?> 'T
        
